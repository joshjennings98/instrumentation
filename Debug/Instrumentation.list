
Instrumentation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006358  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006520  08006520  00016520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006540  08006540  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08006540  08006540  00016540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006548  08006548  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006548  08006548  00016548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800654c  0800654c  0001654c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000018  08006568  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08006568  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa2f  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021f1  00000000  00000000  0002fa77  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff0  00000000  00000000  00031c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef0  00000000  00000000  00032c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022845  00000000  00000000  00033b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bfaf  00000000  00000000  0005638d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4cc2  00000000  00000000  0006233c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136ffe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004460  00000000  00000000  0013707c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000018 	.word	0x20000018
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006508 	.word	0x08006508

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000001c 	.word	0x2000001c
 8000204:	08006508 	.word	0x08006508

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_d2f>:
 80009e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ec:	bf24      	itt	cs
 80009ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009f6:	d90d      	bls.n	8000a14 <__aeabi_d2f+0x30>
 80009f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a0c:	bf08      	it	eq
 8000a0e:	f020 0001 	biceq.w	r0, r0, #1
 8000a12:	4770      	bx	lr
 8000a14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a18:	d121      	bne.n	8000a5e <__aeabi_d2f+0x7a>
 8000a1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a1e:	bfbc      	itt	lt
 8000a20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a24:	4770      	bxlt	lr
 8000a26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a2e:	f1c2 0218 	rsb	r2, r2, #24
 8000a32:	f1c2 0c20 	rsb	ip, r2, #32
 8000a36:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a3a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a3e:	bf18      	it	ne
 8000a40:	f040 0001 	orrne.w	r0, r0, #1
 8000a44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a50:	ea40 000c 	orr.w	r0, r0, ip
 8000a54:	fa23 f302 	lsr.w	r3, r3, r2
 8000a58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a5c:	e7cc      	b.n	80009f8 <__aeabi_d2f+0x14>
 8000a5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a62:	d107      	bne.n	8000a74 <__aeabi_d2f+0x90>
 8000a64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a68:	bf1e      	ittt	ne
 8000a6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a72:	4770      	bxne	lr
 8000a74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295
 8000a98:	f000 b972 	b.w	8000d80 <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f000 f806 	bl	8000ab4 <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <__udivmoddi4>:
 8000ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab8:	9e08      	ldr	r6, [sp, #32]
 8000aba:	4604      	mov	r4, r0
 8000abc:	4688      	mov	r8, r1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d14b      	bne.n	8000b5a <__udivmoddi4+0xa6>
 8000ac2:	428a      	cmp	r2, r1
 8000ac4:	4615      	mov	r5, r2
 8000ac6:	d967      	bls.n	8000b98 <__udivmoddi4+0xe4>
 8000ac8:	fab2 f282 	clz	r2, r2
 8000acc:	b14a      	cbz	r2, 8000ae2 <__udivmoddi4+0x2e>
 8000ace:	f1c2 0720 	rsb	r7, r2, #32
 8000ad2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ad6:	fa20 f707 	lsr.w	r7, r0, r7
 8000ada:	4095      	lsls	r5, r2
 8000adc:	ea47 0803 	orr.w	r8, r7, r3
 8000ae0:	4094      	lsls	r4, r2
 8000ae2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ae6:	0c23      	lsrs	r3, r4, #16
 8000ae8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000aec:	fa1f fc85 	uxth.w	ip, r5
 8000af0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000af4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af8:	fb07 f10c 	mul.w	r1, r7, ip
 8000afc:	4299      	cmp	r1, r3
 8000afe:	d909      	bls.n	8000b14 <__udivmoddi4+0x60>
 8000b00:	18eb      	adds	r3, r5, r3
 8000b02:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b06:	f080 811b 	bcs.w	8000d40 <__udivmoddi4+0x28c>
 8000b0a:	4299      	cmp	r1, r3
 8000b0c:	f240 8118 	bls.w	8000d40 <__udivmoddi4+0x28c>
 8000b10:	3f02      	subs	r7, #2
 8000b12:	442b      	add	r3, r5
 8000b14:	1a5b      	subs	r3, r3, r1
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b24:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b28:	45a4      	cmp	ip, r4
 8000b2a:	d909      	bls.n	8000b40 <__udivmoddi4+0x8c>
 8000b2c:	192c      	adds	r4, r5, r4
 8000b2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b32:	f080 8107 	bcs.w	8000d44 <__udivmoddi4+0x290>
 8000b36:	45a4      	cmp	ip, r4
 8000b38:	f240 8104 	bls.w	8000d44 <__udivmoddi4+0x290>
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	442c      	add	r4, r5
 8000b40:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b44:	eba4 040c 	sub.w	r4, r4, ip
 8000b48:	2700      	movs	r7, #0
 8000b4a:	b11e      	cbz	r6, 8000b54 <__udivmoddi4+0xa0>
 8000b4c:	40d4      	lsrs	r4, r2
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e9c6 4300 	strd	r4, r3, [r6]
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d909      	bls.n	8000b72 <__udivmoddi4+0xbe>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	f000 80eb 	beq.w	8000d3a <__udivmoddi4+0x286>
 8000b64:	2700      	movs	r7, #0
 8000b66:	e9c6 0100 	strd	r0, r1, [r6]
 8000b6a:	4638      	mov	r0, r7
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	fab3 f783 	clz	r7, r3
 8000b76:	2f00      	cmp	r7, #0
 8000b78:	d147      	bne.n	8000c0a <__udivmoddi4+0x156>
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	d302      	bcc.n	8000b84 <__udivmoddi4+0xd0>
 8000b7e:	4282      	cmp	r2, r0
 8000b80:	f200 80fa 	bhi.w	8000d78 <__udivmoddi4+0x2c4>
 8000b84:	1a84      	subs	r4, r0, r2
 8000b86:	eb61 0303 	sbc.w	r3, r1, r3
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	4698      	mov	r8, r3
 8000b8e:	2e00      	cmp	r6, #0
 8000b90:	d0e0      	beq.n	8000b54 <__udivmoddi4+0xa0>
 8000b92:	e9c6 4800 	strd	r4, r8, [r6]
 8000b96:	e7dd      	b.n	8000b54 <__udivmoddi4+0xa0>
 8000b98:	b902      	cbnz	r2, 8000b9c <__udivmoddi4+0xe8>
 8000b9a:	deff      	udf	#255	; 0xff
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f040 808f 	bne.w	8000cc4 <__udivmoddi4+0x210>
 8000ba6:	1b49      	subs	r1, r1, r5
 8000ba8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bac:	fa1f f885 	uxth.w	r8, r5
 8000bb0:	2701      	movs	r7, #1
 8000bb2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bb6:	0c23      	lsrs	r3, r4, #16
 8000bb8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc0:	fb08 f10c 	mul.w	r1, r8, ip
 8000bc4:	4299      	cmp	r1, r3
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x124>
 8000bc8:	18eb      	adds	r3, r5, r3
 8000bca:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x122>
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2bc>
 8000bd6:	4684      	mov	ip, r0
 8000bd8:	1a59      	subs	r1, r3, r1
 8000bda:	b2a3      	uxth	r3, r4
 8000bdc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000be4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000be8:	fb08 f800 	mul.w	r8, r8, r0
 8000bec:	45a0      	cmp	r8, r4
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x14c>
 8000bf0:	192c      	adds	r4, r5, r4
 8000bf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x14a>
 8000bf8:	45a0      	cmp	r8, r4
 8000bfa:	f200 80b6 	bhi.w	8000d6a <__udivmoddi4+0x2b6>
 8000bfe:	4618      	mov	r0, r3
 8000c00:	eba4 0408 	sub.w	r4, r4, r8
 8000c04:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c08:	e79f      	b.n	8000b4a <__udivmoddi4+0x96>
 8000c0a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c0e:	40bb      	lsls	r3, r7
 8000c10:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c14:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c18:	fa01 f407 	lsl.w	r4, r1, r7
 8000c1c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c20:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c24:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c28:	4325      	orrs	r5, r4
 8000c2a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c2e:	0c2c      	lsrs	r4, r5, #16
 8000c30:	fb08 3319 	mls	r3, r8, r9, r3
 8000c34:	fa1f fa8e 	uxth.w	sl, lr
 8000c38:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c3c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c40:	429c      	cmp	r4, r3
 8000c42:	fa02 f207 	lsl.w	r2, r2, r7
 8000c46:	fa00 f107 	lsl.w	r1, r0, r7
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b0>
 8000c4c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c50:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c54:	f080 8087 	bcs.w	8000d66 <__udivmoddi4+0x2b2>
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	f240 8084 	bls.w	8000d66 <__udivmoddi4+0x2b2>
 8000c5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c62:	4473      	add	r3, lr
 8000c64:	1b1b      	subs	r3, r3, r4
 8000c66:	b2ad      	uxth	r5, r5
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c74:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c78:	45a2      	cmp	sl, r4
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1da>
 8000c7c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	d26b      	bcs.n	8000d5e <__udivmoddi4+0x2aa>
 8000c86:	45a2      	cmp	sl, r4
 8000c88:	d969      	bls.n	8000d5e <__udivmoddi4+0x2aa>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4474      	add	r4, lr
 8000c8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c92:	fba0 8902 	umull	r8, r9, r0, r2
 8000c96:	eba4 040a 	sub.w	r4, r4, sl
 8000c9a:	454c      	cmp	r4, r9
 8000c9c:	46c2      	mov	sl, r8
 8000c9e:	464b      	mov	r3, r9
 8000ca0:	d354      	bcc.n	8000d4c <__udivmoddi4+0x298>
 8000ca2:	d051      	beq.n	8000d48 <__udivmoddi4+0x294>
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d069      	beq.n	8000d7c <__udivmoddi4+0x2c8>
 8000ca8:	ebb1 050a 	subs.w	r5, r1, sl
 8000cac:	eb64 0403 	sbc.w	r4, r4, r3
 8000cb0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cb4:	40fd      	lsrs	r5, r7
 8000cb6:	40fc      	lsrs	r4, r7
 8000cb8:	ea4c 0505 	orr.w	r5, ip, r5
 8000cbc:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e747      	b.n	8000b54 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f703 	lsr.w	r7, r0, r3
 8000ccc:	4095      	lsls	r5, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	4338      	orrs	r0, r7
 8000cdc:	0c01      	lsrs	r1, r0, #16
 8000cde:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ce2:	fa1f f885 	uxth.w	r8, r5
 8000ce6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cee:	fb07 f308 	mul.w	r3, r7, r8
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x256>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d00:	d22f      	bcs.n	8000d62 <__udivmoddi4+0x2ae>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d92d      	bls.n	8000d62 <__udivmoddi4+0x2ae>
 8000d06:	3f02      	subs	r7, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1acb      	subs	r3, r1, r3
 8000d0c:	b281      	uxth	r1, r0
 8000d0e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d12:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d16:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1a:	fb00 f308 	mul.w	r3, r0, r8
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d907      	bls.n	8000d32 <__udivmoddi4+0x27e>
 8000d22:	1869      	adds	r1, r5, r1
 8000d24:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d28:	d217      	bcs.n	8000d5a <__udivmoddi4+0x2a6>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d915      	bls.n	8000d5a <__udivmoddi4+0x2a6>
 8000d2e:	3802      	subs	r0, #2
 8000d30:	4429      	add	r1, r5
 8000d32:	1ac9      	subs	r1, r1, r3
 8000d34:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d38:	e73b      	b.n	8000bb2 <__udivmoddi4+0xfe>
 8000d3a:	4637      	mov	r7, r6
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e709      	b.n	8000b54 <__udivmoddi4+0xa0>
 8000d40:	4607      	mov	r7, r0
 8000d42:	e6e7      	b.n	8000b14 <__udivmoddi4+0x60>
 8000d44:	4618      	mov	r0, r3
 8000d46:	e6fb      	b.n	8000b40 <__udivmoddi4+0x8c>
 8000d48:	4541      	cmp	r1, r8
 8000d4a:	d2ab      	bcs.n	8000ca4 <__udivmoddi4+0x1f0>
 8000d4c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d50:	eb69 020e 	sbc.w	r2, r9, lr
 8000d54:	3801      	subs	r0, #1
 8000d56:	4613      	mov	r3, r2
 8000d58:	e7a4      	b.n	8000ca4 <__udivmoddi4+0x1f0>
 8000d5a:	4660      	mov	r0, ip
 8000d5c:	e7e9      	b.n	8000d32 <__udivmoddi4+0x27e>
 8000d5e:	4618      	mov	r0, r3
 8000d60:	e795      	b.n	8000c8e <__udivmoddi4+0x1da>
 8000d62:	4667      	mov	r7, ip
 8000d64:	e7d1      	b.n	8000d0a <__udivmoddi4+0x256>
 8000d66:	4681      	mov	r9, r0
 8000d68:	e77c      	b.n	8000c64 <__udivmoddi4+0x1b0>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	442c      	add	r4, r5
 8000d6e:	e747      	b.n	8000c00 <__udivmoddi4+0x14c>
 8000d70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d74:	442b      	add	r3, r5
 8000d76:	e72f      	b.n	8000bd8 <__udivmoddi4+0x124>
 8000d78:	4638      	mov	r0, r7
 8000d7a:	e708      	b.n	8000b8e <__udivmoddi4+0xda>
 8000d7c:	4637      	mov	r7, r6
 8000d7e:	e6e9      	b.n	8000b54 <__udivmoddi4+0xa0>

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <AD9833CalculateRegister>:
 */
#include "ad9833.h"
#include "main.h"


void AD9833CalculateRegister(long frequency, int waveform){
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]

	float steps_per_Hz = (float)(0x10000000) / refFreq;
 8000d8e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000e10 <AD9833CalculateRegister+0x8c>
 8000d92:	eddf 6a20 	vldr	s13, [pc, #128]	; 8000e14 <AD9833CalculateRegister+0x90>
 8000d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d9a:	edc7 7a05 	vstr	s15, [r7, #20]

	unsigned long int FreqWord = frequency * steps_per_Hz;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	ee07 3a90 	vmov	s15, r3
 8000da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000db4:	ee17 3a90 	vmov	r3, s15
 8000db8:	613b      	str	r3, [r7, #16]

	int MSB = ((FreqWord & 0xFFFC000) >> 14);    //Only lower 14 bits are used for data
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	0b9b      	lsrs	r3, r3, #14
 8000dbe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000dc2:	60fb      	str	r3, [r7, #12]
	int LSB = (FreqWord & 0x3FFF);
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000dca:	60bb      	str	r3, [r7, #8]

	//Set control bits 15 and 14 to 0 and 1, respectively, for frequency register 0
	LSB |= 0x4000;
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd2:	60bb      	str	r3, [r7, #8]
	MSB |= 0x4000;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dda:	60fb      	str	r3, [r7, #12]

	registerValues[0] = 0x2100;
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <AD9833CalculateRegister+0x94>)
 8000dde:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 8000de2:	801a      	strh	r2, [r3, #0]
	registerValues[1] = LSB;
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <AD9833CalculateRegister+0x94>)
 8000dea:	805a      	strh	r2, [r3, #2]
	registerValues[2] = MSB;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <AD9833CalculateRegister+0x94>)
 8000df2:	809a      	strh	r2, [r3, #4]
	registerValues[3] = 0xC000;
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <AD9833CalculateRegister+0x94>)
 8000df6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000dfa:	80da      	strh	r2, [r3, #6]
	registerValues[4] = waveform; // TODO waveform error check
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <AD9833CalculateRegister+0x94>)
 8000e02:	811a      	strh	r2, [r3, #8]
}
 8000e04:	bf00      	nop
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	4bbebc20 	.word	0x4bbebc20
 8000e14:	4d800000 	.word	0x4d800000
 8000e18:	200000b8 	.word	0x200000b8
 8000e1c:	00000000 	.word	0x00000000

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e26:	f001 fae3 	bl	80023f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2a:	f000 f99b 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f000 fbfd 	bl	800162c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e32:	f000 fbdb 	bl	80015ec <MX_DMA_Init>
  MX_SPI1_Init();
 8000e36:	f000 fa77 	bl	8001328 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000e3a:	f000 fbad 	bl	8001598 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e3e:	f000 fae3 	bl	8001408 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000e42:	f000 fa01 	bl	8001248 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000e46:	f000 faa7 	bl	8001398 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000e4a:	f000 fb57 	bl	80014fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Set All SPI Periperal CS High
  HAL_GPIO_WritePin(PGA_CS_GPIO_Port, PGA_CS_Pin, GPIO_PIN_SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	48ad      	ldr	r0, [pc, #692]	; (8001108 <main+0x2e8>)
 8000e54:	f002 fd98 	bl	8003988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2140      	movs	r1, #64	; 0x40
 8000e5c:	48ab      	ldr	r0, [pc, #684]	; (800110c <main+0x2ec>)
 8000e5e:	f002 fd93 	bl	8003988 <HAL_GPIO_WritePin>

  // Reset AD9833
  HAL_Delay(10);
 8000e62:	200a      	movs	r0, #10
 8000e64:	f001 fb36 	bl	80024d4 <HAL_Delay>
  uint16_t resetValue = 0x100;
 8000e68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e6c:	81fb      	strh	r3, [r7, #14]
  HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2140      	movs	r1, #64	; 0x40
 8000e72:	48a6      	ldr	r0, [pc, #664]	; (800110c <main+0x2ec>)
 8000e74:	f002 fd88 	bl	8003988 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t*)resetValue, sizeof(resetValue)/sizeof(uint16_t), HAL_MAX_DELAY);
 8000e78:	89fb      	ldrh	r3, [r7, #14]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e80:	2201      	movs	r2, #1
 8000e82:	48a3      	ldr	r0, [pc, #652]	; (8001110 <main+0x2f0>)
 8000e84:	f003 fb2e 	bl	80044e4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2140      	movs	r1, #64	; 0x40
 8000e8c:	489f      	ldr	r0, [pc, #636]	; (800110c <main+0x2ec>)
 8000e8e:	f002 fd7b 	bl	8003988 <HAL_GPIO_WritePin>

  // Reset LEDS
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e98:	489e      	ldr	r0, [pc, #632]	; (8001114 <main+0x2f4>)
 8000e9a:	f002 fd75 	bl	8003988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GRN_LED_GPIO_Port, GRN_LED_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea4:	489b      	ldr	r0, [pc, #620]	; (8001114 <main+0x2f4>)
 8000ea6:	f002 fd6f 	bl	8003988 <HAL_GPIO_WritePin>

  // UART interrupts
  HAL_UART_Receive_IT(&huart2, (uint8_t*)uartRxBytes, 12);
 8000eaa:	220c      	movs	r2, #12
 8000eac:	499a      	ldr	r1, [pc, #616]	; (8001118 <main+0x2f8>)
 8000eae:	489b      	ldr	r0, [pc, #620]	; (800111c <main+0x2fc>)
 8000eb0:	f004 fcac 	bl	800580c <HAL_UART_Receive_IT>
  //HAL_UART_Receive_DMA(&huart2, (uint8_t*)uartRxBytes, 1);

  // Start timer interrupts
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	489a      	ldr	r0, [pc, #616]	; (8001120 <main+0x300>)
 8000eb8:	f003 fd78 	bl	80049ac <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	4898      	ldr	r0, [pc, #608]	; (8001120 <main+0x300>)
 8000ec0:	f003 fd74 	bl	80049ac <HAL_TIM_IC_Start_IT>

  // Start ADC DMA thing
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, 3*ADC_BUF_LEN);
 8000ec4:	221e      	movs	r2, #30
 8000ec6:	4997      	ldr	r1, [pc, #604]	; (8001124 <main+0x304>)
 8000ec8:	4897      	ldr	r0, [pc, #604]	; (8001128 <main+0x308>)
 8000eca:	f001 fb69 	bl	80025a0 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim3);
 8000ece:	4897      	ldr	r0, [pc, #604]	; (800112c <main+0x30c>)
 8000ed0:	f003 fd13 	bl	80048fa <HAL_TIM_Base_Start_IT>

  // Set relays low

  HAL_GPIO_WritePin(FB_SW6_GPIO_Port, FB_SW6_Pin, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eda:	488b      	ldr	r0, [pc, #556]	; (8001108 <main+0x2e8>)
 8000edc:	f002 fd54 	bl	8003988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FB_SW5_GPIO_Port, FB_SW5_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee6:	4888      	ldr	r0, [pc, #544]	; (8001108 <main+0x2e8>)
 8000ee8:	f002 fd4e 	bl	8003988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FB_SW4_GPIO_Port, FB_SW4_Pin, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef2:	4888      	ldr	r0, [pc, #544]	; (8001114 <main+0x2f4>)
 8000ef4:	f002 fd48 	bl	8003988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FB_SW3_GPIO_Port, FB_SW3_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000efe:	4882      	ldr	r0, [pc, #520]	; (8001108 <main+0x2e8>)
 8000f00:	f002 fd42 	bl	8003988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FB_SW2_GPIO_Port, FB_SW2_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2108      	movs	r1, #8
 8000f08:	487f      	ldr	r0, [pc, #508]	; (8001108 <main+0x2e8>)
 8000f0a:	f002 fd3d 	bl	8003988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FB_SW1_GPIO_Port, FB_SW1_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2104      	movs	r1, #4
 8000f12:	487d      	ldr	r0, [pc, #500]	; (8001108 <main+0x2e8>)
 8000f14:	f002 fd38 	bl	8003988 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TIM3->CNT = 0;
 8000f18:	4b85      	ldr	r3, [pc, #532]	; (8001130 <main+0x310>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
	  // Start loop timer

	  if (newCaptureValue){
 8000f1e:	4b85      	ldr	r3, [pc, #532]	; (8001134 <main+0x314>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <main+0x10c>
		 newCaptureValue = false;
 8000f26:	4b83      	ldr	r3, [pc, #524]	; (8001134 <main+0x314>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
	  }

	  // Send Data Packets to AD9833
	  if(updateSignalFreqFlag == true){
 8000f2c:	4b82      	ldr	r3, [pc, #520]	; (8001138 <main+0x318>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00a      	beq.n	8000f4a <main+0x12a>
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f3a:	4876      	ldr	r0, [pc, #472]	; (8001114 <main+0x2f4>)
 8000f3c:	f002 fd24 	bl	8003988 <HAL_GPIO_WritePin>
		  AD9833_Set_Output();
 8000f40:	f000 ff02 	bl	8001d48 <AD9833_Set_Output>
		  updateSignalFreqFlag = false;
 8000f44:	4b7c      	ldr	r3, [pc, #496]	; (8001138 <main+0x318>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
	  }
	  // Update PGA Gain
	  if(updatePGAGainFlag == true){
 8000f4a:	4b7c      	ldr	r3, [pc, #496]	; (800113c <main+0x31c>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00a      	beq.n	8000f68 <main+0x148>
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f58:	486e      	ldr	r0, [pc, #440]	; (8001114 <main+0x2f4>)
 8000f5a:	f002 fd15 	bl	8003988 <HAL_GPIO_WritePin>
		  PGA_Set_Gain();
 8000f5e:	f000 ff21 	bl	8001da4 <PGA_Set_Gain>
		  updatePGAGainFlag = false;
 8000f62:	4b76      	ldr	r3, [pc, #472]	; (800113c <main+0x31c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
	  }

	  if(measureFlag == true){
 8000f68:	4b75      	ldr	r3, [pc, #468]	; (8001140 <main+0x320>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d11a      	bne.n	8000fa6 <main+0x186>
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f76:	4867      	ldr	r0, [pc, #412]	; (8001114 <main+0x2f4>)
 8000f78:	f002 fd06 	bl	8003988 <HAL_GPIO_WritePin>
		  impedanceMag = measureImpedanceMagnitude();
 8000f7c:	f000 fbd4 	bl	8001728 <measureImpedanceMagnitude>
 8000f80:	4602      	mov	r2, r0
 8000f82:	4b70      	ldr	r3, [pc, #448]	; (8001144 <main+0x324>)
 8000f84:	601a      	str	r2, [r3, #0]
		  impedancePhase = measureImpedancePhase();
 8000f86:	f000 fc07 	bl	8001798 <measureImpedancePhase>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	4b6e      	ldr	r3, [pc, #440]	; (8001148 <main+0x328>)
 8000f8e:	601a      	str	r2, [r3, #0]
		  sendImpedanceMessage(impedanceMag, impedancePhase);
 8000f90:	4b6c      	ldr	r3, [pc, #432]	; (8001144 <main+0x324>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b6c      	ldr	r3, [pc, #432]	; (8001148 <main+0x328>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	f000 fc50 	bl	8001840 <sendImpedanceMessage>
		  measureFlag = false;
 8000fa0:	4b67      	ldr	r3, [pc, #412]	; (8001140 <main+0x320>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
	  }

	  // Toggle LED pin to show we're alive
	  if (loopCounter % 1000 == 0) {
 8000fa6:	4b69      	ldr	r3, [pc, #420]	; (800114c <main+0x32c>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b69      	ldr	r3, [pc, #420]	; (8001150 <main+0x330>)
 8000fac:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb0:	099b      	lsrs	r3, r3, #6
 8000fb2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fb6:	fb01 f303 	mul.w	r3, r1, r3
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10a      	bne.n	8000fd6 <main+0x1b6>
		  HAL_GPIO_TogglePin(GRN_LED_GPIO_Port, GRN_LED_Pin);
 8000fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc4:	4853      	ldr	r0, [pc, #332]	; (8001114 <main+0x2f4>)
 8000fc6:	f002 fcf8 	bl	80039ba <HAL_GPIO_TogglePin>
		  sysCount++;
 8000fca:	4b62      	ldr	r3, [pc, #392]	; (8001154 <main+0x334>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b60      	ldr	r3, [pc, #384]	; (8001154 <main+0x334>)
 8000fd4:	701a      	strb	r2, [r3, #0]
	  }

	  if (loopCounter % 2000 == 0) {
 8000fd6:	4b5d      	ldr	r3, [pc, #372]	; (800114c <main+0x32c>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b5d      	ldr	r3, [pc, #372]	; (8001150 <main+0x330>)
 8000fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8000fe0:	09db      	lsrs	r3, r3, #7
 8000fe2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000fe6:	fb01 f303 	mul.w	r3, r1, r3
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d170      	bne.n	80010d2 <main+0x2b2>
		  // Send message
		  float avgADCtemp = 0;
 8000ff0:	f04f 0300 	mov.w	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
		  for (int i = 0; i < ADC_BUF_LEN; i++) {
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	e015      	b.n	8001028 <main+0x208>
			  avgADCtemp += adc_buf[i][2];
 8000ffc:	4949      	ldr	r1, [pc, #292]	; (8001124 <main+0x304>)
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	440b      	add	r3, r1
 800100a:	3304      	adds	r3, #4
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001016:	ed97 7a05 	vldr	s14, [r7, #20]
 800101a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101e:	edc7 7a05 	vstr	s15, [r7, #20]
		  for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	3301      	adds	r3, #1
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	2b09      	cmp	r3, #9
 800102c:	dde6      	ble.n	8000ffc <main+0x1dc>
		  }
		  float vTemp = ((3.3*(avgADCtemp / ADC_BUF_LEN)/4096 - 0.76) / 25 + 25);
 800102e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001032:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001036:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800103a:	ee16 0a90 	vmov	r0, s13
 800103e:	f7ff fa47 	bl	80004d0 <__aeabi_f2d>
 8001042:	a32d      	add	r3, pc, #180	; (adr r3, 80010f8 <main+0x2d8>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff fa9a 	bl	8000580 <__aeabi_dmul>
 800104c:	4603      	mov	r3, r0
 800104e:	460c      	mov	r4, r1
 8001050:	4618      	mov	r0, r3
 8001052:	4621      	mov	r1, r4
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	4b3f      	ldr	r3, [pc, #252]	; (8001158 <main+0x338>)
 800105a:	f7ff fbbb 	bl	80007d4 <__aeabi_ddiv>
 800105e:	4603      	mov	r3, r0
 8001060:	460c      	mov	r4, r1
 8001062:	4618      	mov	r0, r3
 8001064:	4621      	mov	r1, r4
 8001066:	a326      	add	r3, pc, #152	; (adr r3, 8001100 <main+0x2e0>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff f8d0 	bl	8000210 <__aeabi_dsub>
 8001070:	4603      	mov	r3, r0
 8001072:	460c      	mov	r4, r1
 8001074:	4618      	mov	r0, r3
 8001076:	4621      	mov	r1, r4
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	4b37      	ldr	r3, [pc, #220]	; (800115c <main+0x33c>)
 800107e:	f7ff fba9 	bl	80007d4 <__aeabi_ddiv>
 8001082:	4603      	mov	r3, r0
 8001084:	460c      	mov	r4, r1
 8001086:	4618      	mov	r0, r3
 8001088:	4621      	mov	r1, r4
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	4b33      	ldr	r3, [pc, #204]	; (800115c <main+0x33c>)
 8001090:	f7ff f8c0 	bl	8000214 <__adddf3>
 8001094:	4603      	mov	r3, r0
 8001096:	460c      	mov	r4, r1
 8001098:	4618      	mov	r0, r3
 800109a:	4621      	mov	r1, r4
 800109c:	f7ff fca2 	bl	80009e4 <__aeabi_d2f>
 80010a0:	4603      	mov	r3, r0
 80010a2:	60bb      	str	r3, [r7, #8]
		  asm("NOP");
 80010a4:	bf00      	nop
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ac:	4819      	ldr	r0, [pc, #100]	; (8001114 <main+0x2f4>)
 80010ae:	f002 fc6b 	bl	8003988 <HAL_GPIO_WritePin>
		  uartTxBytes[1] = 0x01;
 80010b2:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <main+0x340>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	705a      	strb	r2, [r3, #1]
		  uartTxBytes[3] = sysCount;
 80010b8:	4b26      	ldr	r3, [pc, #152]	; (8001154 <main+0x334>)
 80010ba:	781a      	ldrb	r2, [r3, #0]
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <main+0x340>)
 80010be:	70da      	strb	r2, [r3, #3]
		  uint8_t checksum = makeCheckSum();
 80010c0:	f000 fdfc 	bl	8001cbc <makeCheckSum>
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
		  uartTxBytes[11] = checksum;
 80010c8:	4a25      	ldr	r2, [pc, #148]	; (8001160 <main+0x340>)
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	72d3      	strb	r3, [r2, #11]


	  // Arbitrary Loop Delay To stop spamming everything
	  //HAL_Delay(10);

	  while (TIM3->CNT < 1000) {
 80010ce:	e000      	b.n	80010d2 <main+0x2b2>
		  // Do nothing
		  asm("NOP");
 80010d0:	bf00      	nop
	  while (TIM3->CNT < 1000) {
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <main+0x310>)
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010da:	d3f9      	bcc.n	80010d0 <main+0x2b0>
	  }
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	480c      	ldr	r0, [pc, #48]	; (8001114 <main+0x2f4>)
 80010e4:	f002 fc50 	bl	8003988 <HAL_GPIO_WritePin>
	  loopCounter++;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <main+0x32c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a17      	ldr	r2, [pc, #92]	; (800114c <main+0x32c>)
 80010f0:	6013      	str	r3, [r2, #0]
	  TIM3->CNT = 0;
 80010f2:	e711      	b.n	8000f18 <main+0xf8>
 80010f4:	f3af 8000 	nop.w
 80010f8:	66666666 	.word	0x66666666
 80010fc:	400a6666 	.word	0x400a6666
 8001100:	851eb852 	.word	0x851eb852
 8001104:	3fe851eb 	.word	0x3fe851eb
 8001108:	40020800 	.word	0x40020800
 800110c:	40020400 	.word	0x40020400
 8001110:	200001c4 	.word	0x200001c4
 8001114:	40020000 	.word	0x40020000
 8001118:	20000150 	.word	0x20000150
 800111c:	20000298 	.word	0x20000298
 8001120:	20000258 	.word	0x20000258
 8001124:	2000021c 	.word	0x2000021c
 8001128:	20000108 	.word	0x20000108
 800112c:	200000c4 	.word	0x200000c4
 8001130:	40000400 	.word	0x40000400
 8001134:	20000046 	.word	0x20000046
 8001138:	20000034 	.word	0x20000034
 800113c:	20000035 	.word	0x20000035
 8001140:	20000048 	.word	0x20000048
 8001144:	20000050 	.word	0x20000050
 8001148:	20000054 	.word	0x20000054
 800114c:	20000058 	.word	0x20000058
 8001150:	10624dd3 	.word	0x10624dd3
 8001154:	2000005c 	.word	0x2000005c
 8001158:	40b00000 	.word	0x40b00000
 800115c:	40390000 	.word	0x40390000
 8001160:	20000000 	.word	0x20000000

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b094      	sub	sp, #80	; 0x50
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	2234      	movs	r2, #52	; 0x34
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f005 f9c0 	bl	80064f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <SystemClock_Config+0xdc>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	4a2b      	ldr	r2, [pc, #172]	; (8001240 <SystemClock_Config+0xdc>)
 8001192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001196:	6413      	str	r3, [r2, #64]	; 0x40
 8001198:	4b29      	ldr	r3, [pc, #164]	; (8001240 <SystemClock_Config+0xdc>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a4:	2300      	movs	r3, #0
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <SystemClock_Config+0xe0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a25      	ldr	r2, [pc, #148]	; (8001244 <SystemClock_Config+0xe0>)
 80011ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b23      	ldr	r3, [pc, #140]	; (8001244 <SystemClock_Config+0xe0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c0:	2302      	movs	r3, #2
 80011c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c4:	2301      	movs	r3, #1
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c8:	2310      	movs	r3, #16
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011cc:	2302      	movs	r3, #2
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d0:	2300      	movs	r3, #0
 80011d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011d4:	2308      	movs	r3, #8
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80011d8:	23b4      	movs	r3, #180	; 0xb4
 80011da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011dc:	2302      	movs	r3, #2
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 febb 	bl	8003f68 <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011f8:	f000 fe62 	bl	8001ec0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011fc:	f002 fbf8 	bl	80039f0 <HAL_PWREx_EnableOverDrive>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001206:	f000 fe5b 	bl	8001ec0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120a:	230f      	movs	r3, #15
 800120c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120e:	2302      	movs	r3, #2
 8001210:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001216:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800121a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800121c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001220:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	2105      	movs	r1, #5
 8001228:	4618      	mov	r0, r3
 800122a:	f002 fc31 	bl	8003a90 <HAL_RCC_ClockConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001234:	f000 fe44 	bl	8001ec0 <Error_Handler>
  }
}
 8001238:	bf00      	nop
 800123a:	3750      	adds	r7, #80	; 0x50
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	40007000 	.word	0x40007000

08001248 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800124e:	463b      	mov	r3, r7
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800125a:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <MX_ADC1_Init+0xd0>)
 800125c:	4a2f      	ldr	r2, [pc, #188]	; (800131c <MX_ADC1_Init+0xd4>)
 800125e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001260:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <MX_ADC1_Init+0xd0>)
 8001262:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001266:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001268:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <MX_ADC1_Init+0xd0>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <MX_ADC1_Init+0xd0>)
 8001270:	2201      	movs	r2, #1
 8001272:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001274:	4b28      	ldr	r3, [pc, #160]	; (8001318 <MX_ADC1_Init+0xd0>)
 8001276:	2201      	movs	r2, #1
 8001278:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800127a:	4b27      	ldr	r3, [pc, #156]	; (8001318 <MX_ADC1_Init+0xd0>)
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001282:	4b25      	ldr	r3, [pc, #148]	; (8001318 <MX_ADC1_Init+0xd0>)
 8001284:	2200      	movs	r2, #0
 8001286:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <MX_ADC1_Init+0xd0>)
 800128a:	4a25      	ldr	r2, [pc, #148]	; (8001320 <MX_ADC1_Init+0xd8>)
 800128c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800128e:	4b22      	ldr	r3, [pc, #136]	; (8001318 <MX_ADC1_Init+0xd0>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001294:	4b20      	ldr	r3, [pc, #128]	; (8001318 <MX_ADC1_Init+0xd0>)
 8001296:	2203      	movs	r2, #3
 8001298:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800129a:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <MX_ADC1_Init+0xd0>)
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <MX_ADC1_Init+0xd0>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012a8:	481b      	ldr	r0, [pc, #108]	; (8001318 <MX_ADC1_Init+0xd0>)
 80012aa:	f001 f935 	bl	8002518 <HAL_ADC_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012b4:	f000 fe04 	bl	8001ec0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012b8:	2304      	movs	r3, #4
 80012ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012bc:	2301      	movs	r3, #1
 80012be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c4:	463b      	mov	r3, r7
 80012c6:	4619      	mov	r1, r3
 80012c8:	4813      	ldr	r0, [pc, #76]	; (8001318 <MX_ADC1_Init+0xd0>)
 80012ca:	f001 fa79 	bl	80027c0 <HAL_ADC_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012d4:	f000 fdf4 	bl	8001ec0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012d8:	2306      	movs	r3, #6
 80012da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80012dc:	2302      	movs	r3, #2
 80012de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e0:	463b      	mov	r3, r7
 80012e2:	4619      	mov	r1, r3
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <MX_ADC1_Init+0xd0>)
 80012e6:	f001 fa6b 	bl	80027c0 <HAL_ADC_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012f0:	f000 fde6 	bl	8001ec0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_ADC1_Init+0xdc>)
 80012f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80012f8:	2303      	movs	r3, #3
 80012fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_ADC1_Init+0xd0>)
 8001302:	f001 fa5d 	bl	80027c0 <HAL_ADC_ConfigChannel>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800130c:	f000 fdd8 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000108 	.word	0x20000108
 800131c:	40012000 	.word	0x40012000
 8001320:	0f000001 	.word	0x0f000001
 8001324:	10000012 	.word	0x10000012

08001328 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_SPI1_Init+0x68>)
 800132e:	4a19      	ldr	r2, [pc, #100]	; (8001394 <MX_SPI1_Init+0x6c>)
 8001330:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_SPI1_Init+0x68>)
 8001334:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001338:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_SPI1_Init+0x68>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <MX_SPI1_Init+0x68>)
 8001342:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001346:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_SPI1_Init+0x68>)
 800134a:	2202      	movs	r2, #2
 800134c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_SPI1_Init+0x68>)
 8001350:	2200      	movs	r2, #0
 8001352:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001354:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_SPI1_Init+0x68>)
 8001356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800135a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_SPI1_Init+0x68>)
 800135e:	2238      	movs	r2, #56	; 0x38
 8001360:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_SPI1_Init+0x68>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_SPI1_Init+0x68>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_SPI1_Init+0x68>)
 8001370:	2200      	movs	r2, #0
 8001372:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_SPI1_Init+0x68>)
 8001376:	220a      	movs	r2, #10
 8001378:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_SPI1_Init+0x68>)
 800137c:	f003 f84e 	bl	800441c <HAL_SPI_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001386:	f000 fd9b 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200001c4 	.word	0x200001c4
 8001394:	40013000 	.word	0x40013000

08001398 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_SPI2_Init+0x68>)
 800139e:	4a19      	ldr	r2, [pc, #100]	; (8001404 <MX_SPI2_Init+0x6c>)
 80013a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <MX_SPI2_Init+0x68>)
 80013a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <MX_SPI2_Init+0x68>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <MX_SPI2_Init+0x68>)
 80013b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013b6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_SPI2_Init+0x68>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <MX_SPI2_Init+0x68>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_SPI2_Init+0x68>)
 80013c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_SPI2_Init+0x68>)
 80013ce:	2238      	movs	r2, #56	; 0x38
 80013d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MX_SPI2_Init+0x68>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_SPI2_Init+0x68>)
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <MX_SPI2_Init+0x68>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_SPI2_Init+0x68>)
 80013e6:	220a      	movs	r2, #10
 80013e8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_SPI2_Init+0x68>)
 80013ec:	f003 f816 	bl	800441c <HAL_SPI_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80013f6:	f000 fd63 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000060 	.word	0x20000060
 8001404:	40003800 	.word	0x40003800

08001408 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0318 	add.w	r3, r7, #24
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001426:	463b      	mov	r3, r7
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001432:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <MX_TIM2_Init+0xf0>)
 8001434:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001438:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800143a:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <MX_TIM2_Init+0xf0>)
 800143c:	2200      	movs	r2, #0
 800143e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001440:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <MX_TIM2_Init+0xf0>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001446:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <MX_TIM2_Init+0xf0>)
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144e:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <MX_TIM2_Init+0xf0>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001454:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <MX_TIM2_Init+0xf0>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800145a:	4827      	ldr	r0, [pc, #156]	; (80014f8 <MX_TIM2_Init+0xf0>)
 800145c:	f003 fa22 	bl	80048a4 <HAL_TIM_Base_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001466:	f000 fd2b 	bl	8001ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001470:	f107 0318 	add.w	r3, r7, #24
 8001474:	4619      	mov	r1, r3
 8001476:	4820      	ldr	r0, [pc, #128]	; (80014f8 <MX_TIM2_Init+0xf0>)
 8001478:	f003 fca4 	bl	8004dc4 <HAL_TIM_ConfigClockSource>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001482:	f000 fd1d 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001486:	481c      	ldr	r0, [pc, #112]	; (80014f8 <MX_TIM2_Init+0xf0>)
 8001488:	f003 fa5b 	bl	8004942 <HAL_TIM_IC_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001492:	f000 fd15 	bl	8001ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	4619      	mov	r1, r3
 80014a4:	4814      	ldr	r0, [pc, #80]	; (80014f8 <MX_TIM2_Init+0xf0>)
 80014a6:	f004 f83b 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80014b0:	f000 fd06 	bl	8001ec0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014b4:	2300      	movs	r3, #0
 80014b6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014b8:	2301      	movs	r3, #1
 80014ba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80014c0:	230f      	movs	r3, #15
 80014c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014c4:	463b      	mov	r3, r7
 80014c6:	2200      	movs	r2, #0
 80014c8:	4619      	mov	r1, r3
 80014ca:	480b      	ldr	r0, [pc, #44]	; (80014f8 <MX_TIM2_Init+0xf0>)
 80014cc:	f003 fbde 	bl	8004c8c <HAL_TIM_IC_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80014d6:	f000 fcf3 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014da:	463b      	mov	r3, r7
 80014dc:	2204      	movs	r2, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_TIM2_Init+0xf0>)
 80014e2:	f003 fbd3 	bl	8004c8c <HAL_TIM_IC_ConfigChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80014ec:	f000 fce8 	bl	8001ec0 <Error_Handler>
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	3728      	adds	r7, #40	; 0x28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000258 	.word	0x20000258

080014fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_TIM3_Init+0x94>)
 800151a:	4a1e      	ldr	r2, [pc, #120]	; (8001594 <MX_TIM3_Init+0x98>)
 800151c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 89;
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <MX_TIM3_Init+0x94>)
 8001520:	2259      	movs	r2, #89	; 0x59
 8001522:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_TIM3_Init+0x94>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65335;
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <MX_TIM3_Init+0x94>)
 800152c:	f64f 7237 	movw	r2, #65335	; 0xff37
 8001530:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_TIM3_Init+0x94>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_TIM3_Init+0x94>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800153e:	4814      	ldr	r0, [pc, #80]	; (8001590 <MX_TIM3_Init+0x94>)
 8001540:	f003 f9b0 	bl	80048a4 <HAL_TIM_Base_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800154a:	f000 fcb9 	bl	8001ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001552:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	4619      	mov	r1, r3
 800155a:	480d      	ldr	r0, [pc, #52]	; (8001590 <MX_TIM3_Init+0x94>)
 800155c:	f003 fc32 	bl	8004dc4 <HAL_TIM_ConfigClockSource>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001566:	f000 fcab 	bl	8001ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001572:	463b      	mov	r3, r7
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	; (8001590 <MX_TIM3_Init+0x94>)
 8001578:	f003 ffd2 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001582:	f000 fc9d 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200000c4 	.word	0x200000c4
 8001594:	40000400 	.word	0x40000400

08001598 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <MX_USART2_UART_Init+0x50>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015d0:	f004 f836 	bl	8005640 <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015da:	f000 fc71 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000298 	.word	0x20000298
 80015e8:	40004400 	.word	0x40004400

080015ec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_DMA_Init+0x3c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <MX_DMA_Init+0x3c>)
 80015fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_DMA_Init+0x3c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2038      	movs	r0, #56	; 0x38
 8001614:	f001 fc5f 	bl	8002ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001618:	2038      	movs	r0, #56	; 0x38
 800161a:	f001 fc78 	bl	8002f0e <HAL_NVIC_EnableIRQ>

}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800

0800162c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	4b34      	ldr	r3, [pc, #208]	; (8001718 <MX_GPIO_Init+0xec>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a33      	ldr	r2, [pc, #204]	; (8001718 <MX_GPIO_Init+0xec>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b31      	ldr	r3, [pc, #196]	; (8001718 <MX_GPIO_Init+0xec>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <MX_GPIO_Init+0xec>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a2c      	ldr	r2, [pc, #176]	; (8001718 <MX_GPIO_Init+0xec>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <MX_GPIO_Init+0xec>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	4b26      	ldr	r3, [pc, #152]	; (8001718 <MX_GPIO_Init+0xec>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a25      	ldr	r2, [pc, #148]	; (8001718 <MX_GPIO_Init+0xec>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b23      	ldr	r3, [pc, #140]	; (8001718 <MX_GPIO_Init+0xec>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FB_SW3_Pin|FB_SW1_Pin|FB_SW2_Pin|PGA_CS_Pin 
 8001696:	2200      	movs	r2, #0
 8001698:	f243 418c 	movw	r1, #13452	; 0x348c
 800169c:	481f      	ldr	r0, [pc, #124]	; (800171c <MX_GPIO_Init+0xf0>)
 800169e:	f002 f973 	bl	8003988 <HAL_GPIO_WritePin>
                          |FB_SW5_Pin|FB_SW6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LED_Pin|GRN_LED_Pin|FB_SW4_Pin, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 80016a8:	481d      	ldr	r0, [pc, #116]	; (8001720 <MX_GPIO_Init+0xf4>)
 80016aa:	f002 f96d 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2140      	movs	r1, #64	; 0x40
 80016b2:	481c      	ldr	r0, [pc, #112]	; (8001724 <MX_GPIO_Init+0xf8>)
 80016b4:	f002 f968 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FB_SW3_Pin FB_SW1_Pin FB_SW2_Pin PGA_CS_Pin 
                           FB_SW5_Pin FB_SW6_Pin */
  GPIO_InitStruct.Pin = FB_SW3_Pin|FB_SW1_Pin|FB_SW2_Pin|PGA_CS_Pin 
 80016b8:	f243 438c 	movw	r3, #13452	; 0x348c
 80016bc:	60fb      	str	r3, [r7, #12]
                          |FB_SW5_Pin|FB_SW6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4619      	mov	r1, r3
 80016d0:	4812      	ldr	r0, [pc, #72]	; (800171c <MX_GPIO_Init+0xf0>)
 80016d2:	f001 ffc7 	bl	8003664 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GRN_LED_Pin FB_SW4_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GRN_LED_Pin|FB_SW4_Pin;
 80016d6:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 80016da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	4619      	mov	r1, r3
 80016ee:	480c      	ldr	r0, [pc, #48]	; (8001720 <MX_GPIO_Init+0xf4>)
 80016f0:	f001 ffb8 	bl	8003664 <HAL_GPIO_Init>

  /*Configure GPIO pin : AD9833_CS_Pin */
  GPIO_InitStruct.Pin = AD9833_CS_Pin;
 80016f4:	2340      	movs	r3, #64	; 0x40
 80016f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AD9833_CS_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4619      	mov	r1, r3
 800170a:	4806      	ldr	r0, [pc, #24]	; (8001724 <MX_GPIO_Init+0xf8>)
 800170c:	f001 ffaa 	bl	8003664 <HAL_GPIO_Init>

}
 8001710:	bf00      	nop
 8001712:	3720      	adds	r7, #32
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	40020800 	.word	0x40020800
 8001720:	40020000 	.word	0x40020000
 8001724:	40020400 	.word	0x40020400

08001728 <measureImpedanceMagnitude>:

/* USER CODE BEGIN 4 */

uint32_t measureImpedanceMagnitude(void) {
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
	float adcMean = 0;
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001734:	2300      	movs	r3, #0
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	e014      	b.n	8001764 <measureImpedanceMagnitude+0x3c>
	  adcMean += adc_buf[i][0];
 800173a:	4916      	ldr	r1, [pc, #88]	; (8001794 <measureImpedanceMagnitude+0x6c>)
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	440b      	add	r3, r1
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001752:	ed97 7a01 	vldr	s14, [r7, #4]
 8001756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175a:	edc7 7a01 	vstr	s15, [r7, #4]
	for (int i = 0; i < ADC_BUF_LEN; i++) {
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2b09      	cmp	r3, #9
 8001768:	dde7      	ble.n	800173a <measureImpedanceMagnitude+0x12>
	}
	adcMean /= (float)ADC_BUF_LEN;
 800176a:	ed97 7a01 	vldr	s14, [r7, #4]
 800176e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001772:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001776:	edc7 7a01 	vstr	s15, [r7, #4]

	return (uint32_t)adcMean;
 800177a:	edd7 7a01 	vldr	s15, [r7, #4]
 800177e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001782:	ee17 3a90 	vmov	r3, s15
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	2000021c 	.word	0x2000021c

08001798 <measureImpedancePhase>:

uint32_t measureImpedancePhase(void) {
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b08b      	sub	sp, #44	; 0x2c
 800179c:	af00      	add	r7, sp, #0
	int freq = refSignalFrequency;
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <measureImpedancePhase+0x98>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
	double period = 1.0 / (double)freq;
 80017a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017a6:	f7fe fe81 	bl	80004ac <__aeabi_i2d>
 80017aa:	4603      	mov	r3, r0
 80017ac:	460c      	mov	r4, r1
 80017ae:	461a      	mov	r2, r3
 80017b0:	4623      	mov	r3, r4
 80017b2:	f04f 0000 	mov.w	r0, #0
 80017b6:	491f      	ldr	r1, [pc, #124]	; (8001834 <measureImpedancePhase+0x9c>)
 80017b8:	f7ff f80c 	bl	80007d4 <__aeabi_ddiv>
 80017bc:	4603      	mov	r3, r0
 80017be:	460c      	mov	r4, r1
 80017c0:	e9c7 3406 	strd	r3, r4, [r7, #24]

	double periodTicks = (period * 180000000);
 80017c4:	a318      	add	r3, pc, #96	; (adr r3, 8001828 <measureImpedancePhase+0x90>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017ce:	f7fe fed7 	bl	8000580 <__aeabi_dmul>
 80017d2:	4603      	mov	r3, r0
 80017d4:	460c      	mov	r4, r1
 80017d6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double count = (double) counterDifference;
 80017da:	4b17      	ldr	r3, [pc, #92]	; (8001838 <measureImpedancePhase+0xa0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fe54 	bl	800048c <__aeabi_ui2d>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	uint32_t phase = (uint32_t) (360.0 * count / periodTicks);
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <measureImpedancePhase+0xa4>)
 80017f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017f6:	f7fe fec3 	bl	8000580 <__aeabi_dmul>
 80017fa:	4603      	mov	r3, r0
 80017fc:	460c      	mov	r4, r1
 80017fe:	4618      	mov	r0, r3
 8001800:	4621      	mov	r1, r4
 8001802:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001806:	f7fe ffe5 	bl	80007d4 <__aeabi_ddiv>
 800180a:	4603      	mov	r3, r0
 800180c:	460c      	mov	r4, r1
 800180e:	4618      	mov	r0, r3
 8001810:	4621      	mov	r1, r4
 8001812:	f7ff f8c7 	bl	80009a4 <__aeabi_d2uiz>
 8001816:	4603      	mov	r3, r0
 8001818:	607b      	str	r3, [r7, #4]

	return phase;
 800181a:	687b      	ldr	r3, [r7, #4]
}
 800181c:	4618      	mov	r0, r3
 800181e:	372c      	adds	r7, #44	; 0x2c
 8001820:	46bd      	mov	sp, r7
 8001822:	bd90      	pop	{r4, r7, pc}
 8001824:	f3af 8000 	nop.w
 8001828:	00000000 	.word	0x00000000
 800182c:	41a5752a 	.word	0x41a5752a
 8001830:	2000004c 	.word	0x2000004c
 8001834:	3ff00000 	.word	0x3ff00000
 8001838:	20000040 	.word	0x20000040
 800183c:	40768000 	.word	0x40768000

08001840 <sendImpedanceMessage>:

void sendImpedanceMessage(uint32_t mag, uint32_t phase) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
	uartTxBytes[1] = 0x03;
 800184a:	4b31      	ldr	r3, [pc, #196]	; (8001910 <sendImpedanceMessage+0xd0>)
 800184c:	2203      	movs	r2, #3
 800184e:	705a      	strb	r2, [r3, #1]


	uartTxBytes[3] = mag & 0xFF;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <sendImpedanceMessage+0xd0>)
 8001856:	70da      	strb	r2, [r3, #3]
	uartTxBytes[4] = (mag & 0xFF00) / 0xFF;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800185e:	4a2d      	ldr	r2, [pc, #180]	; (8001914 <sendImpedanceMessage+0xd4>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	09db      	lsrs	r3, r3, #7
 8001866:	b2da      	uxtb	r2, r3
 8001868:	4b29      	ldr	r3, [pc, #164]	; (8001910 <sendImpedanceMessage+0xd0>)
 800186a:	711a      	strb	r2, [r3, #4]
	uartTxBytes[5] = (mag & 0xFF0000) / 0xFFFF;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001872:	4a29      	ldr	r2, [pc, #164]	; (8001918 <sendImpedanceMessage+0xd8>)
 8001874:	fba2 2303 	umull	r2, r3, r2, r3
 8001878:	0bdb      	lsrs	r3, r3, #15
 800187a:	b2da      	uxtb	r2, r3
 800187c:	4b24      	ldr	r3, [pc, #144]	; (8001910 <sendImpedanceMessage+0xd0>)
 800187e:	715a      	strb	r2, [r3, #5]
	uartTxBytes[6] = (mag & 0xFF000000) / 0xFFFFFF;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001886:	f240 1301 	movw	r3, #257	; 0x101
 800188a:	fba3 1302 	umull	r1, r3, r3, r2
 800188e:	1ad2      	subs	r2, r2, r3
 8001890:	0852      	lsrs	r2, r2, #1
 8001892:	4413      	add	r3, r2
 8001894:	0ddb      	lsrs	r3, r3, #23
 8001896:	b2da      	uxtb	r2, r3
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <sendImpedanceMessage+0xd0>)
 800189a:	719a      	strb	r2, [r3, #6]

	uartTxBytes[7] = phase & 0xFF;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <sendImpedanceMessage+0xd0>)
 80018a2:	71da      	strb	r2, [r3, #7]
	uartTxBytes[8] = (phase & 0xFF00) / 0xFF;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80018aa:	4a1a      	ldr	r2, [pc, #104]	; (8001914 <sendImpedanceMessage+0xd4>)
 80018ac:	fba2 2303 	umull	r2, r3, r2, r3
 80018b0:	09db      	lsrs	r3, r3, #7
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <sendImpedanceMessage+0xd0>)
 80018b6:	721a      	strb	r2, [r3, #8]
	uartTxBytes[9] = (phase & 0xFF0000) / 0xFFFF;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80018be:	4a16      	ldr	r2, [pc, #88]	; (8001918 <sendImpedanceMessage+0xd8>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	0bdb      	lsrs	r3, r3, #15
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <sendImpedanceMessage+0xd0>)
 80018ca:	725a      	strb	r2, [r3, #9]
	uartTxBytes[10] = (phase & 0xFF000000) / 0xFFFFFF;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80018d2:	f240 1301 	movw	r3, #257	; 0x101
 80018d6:	fba3 1302 	umull	r1, r3, r3, r2
 80018da:	1ad2      	subs	r2, r2, r3
 80018dc:	0852      	lsrs	r2, r2, #1
 80018de:	4413      	add	r3, r2
 80018e0:	0ddb      	lsrs	r3, r3, #23
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <sendImpedanceMessage+0xd0>)
 80018e6:	729a      	strb	r2, [r3, #10]

	uint8_t checksum = makeCheckSum();
 80018e8:	f000 f9e8 	bl	8001cbc <makeCheckSum>
 80018ec:	4603      	mov	r3, r0
 80018ee:	73fb      	strb	r3, [r7, #15]
	uartTxBytes[11] = checksum;
 80018f0:	4a07      	ldr	r2, [pc, #28]	; (8001910 <sendImpedanceMessage+0xd0>)
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	72d3      	strb	r3, [r2, #11]
	HAL_UART_Transmit(&huart2, (uint8_t *)uartTxBytes, 12, 1);
 80018f6:	2301      	movs	r3, #1
 80018f8:	220c      	movs	r2, #12
 80018fa:	4905      	ldr	r1, [pc, #20]	; (8001910 <sendImpedanceMessage+0xd0>)
 80018fc:	4807      	ldr	r0, [pc, #28]	; (800191c <sendImpedanceMessage+0xdc>)
 80018fe:	f003 feec 	bl	80056da <HAL_UART_Transmit>
	measureFlag = false;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <sendImpedanceMessage+0xe0>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
}
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000000 	.word	0x20000000
 8001914:	80808081 	.word	0x80808081
 8001918:	80008001 	.word	0x80008001
 800191c:	20000298 	.word	0x20000298
 8001920:	20000048 	.word	0x20000048

08001924 <toggleRelay>:

void toggleRelay(uint8_t relay) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
	switch(relay)
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	3b01      	subs	r3, #1
 8001932:	2b05      	cmp	r3, #5
 8001934:	f200 80e2 	bhi.w	8001afc <toggleRelay+0x1d8>
 8001938:	a201      	add	r2, pc, #4	; (adr r2, 8001940 <toggleRelay+0x1c>)
 800193a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193e:	bf00      	nop
 8001940:	08001959 	.word	0x08001959
 8001944:	0800199f 	.word	0x0800199f
 8001948:	080019e5 	.word	0x080019e5
 800194c:	08001a2b 	.word	0x08001a2b
 8001950:	08001a71 	.word	0x08001a71
 8001954:	08001ab7 	.word	0x08001ab7
		{
		case(0x01):
				HAL_GPIO_WritePin(FB_SW6_GPIO_Port, FB_SW6_Pin, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800195e:	486a      	ldr	r0, [pc, #424]	; (8001b08 <toggleRelay+0x1e4>)
 8001960:	f002 f812 	bl	8003988 <HAL_GPIO_WritePin>
		  	  	HAL_GPIO_WritePin(FB_SW5_GPIO_Port, FB_SW5_Pin, GPIO_PIN_RESET);
 8001964:	2200      	movs	r2, #0
 8001966:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800196a:	4867      	ldr	r0, [pc, #412]	; (8001b08 <toggleRelay+0x1e4>)
 800196c:	f002 f80c 	bl	8003988 <HAL_GPIO_WritePin>
		  	  	HAL_GPIO_WritePin(FB_SW4_GPIO_Port, FB_SW4_Pin, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001976:	4865      	ldr	r0, [pc, #404]	; (8001b0c <toggleRelay+0x1e8>)
 8001978:	f002 f806 	bl	8003988 <HAL_GPIO_WritePin>
		  	  	HAL_GPIO_WritePin(FB_SW3_GPIO_Port, FB_SW3_Pin, GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001982:	4861      	ldr	r0, [pc, #388]	; (8001b08 <toggleRelay+0x1e4>)
 8001984:	f002 f800 	bl	8003988 <HAL_GPIO_WritePin>
		  	  	HAL_GPIO_WritePin(FB_SW2_GPIO_Port, FB_SW2_Pin, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	2108      	movs	r1, #8
 800198c:	485e      	ldr	r0, [pc, #376]	; (8001b08 <toggleRelay+0x1e4>)
 800198e:	f001 fffb 	bl	8003988 <HAL_GPIO_WritePin>
		  	  	HAL_GPIO_WritePin(FB_SW1_GPIO_Port, FB_SW1_Pin, GPIO_PIN_SET);
 8001992:	2201      	movs	r2, #1
 8001994:	2104      	movs	r1, #4
 8001996:	485c      	ldr	r0, [pc, #368]	; (8001b08 <toggleRelay+0x1e4>)
 8001998:	f001 fff6 	bl	8003988 <HAL_GPIO_WritePin>
				break;
 800199c:	e0af      	b.n	8001afe <toggleRelay+0x1da>
		case(0x02):
				HAL_GPIO_WritePin(FB_SW6_GPIO_Port, FB_SW6_Pin, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a4:	4858      	ldr	r0, [pc, #352]	; (8001b08 <toggleRelay+0x1e4>)
 80019a6:	f001 ffef 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW5_GPIO_Port, FB_SW5_Pin, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019b0:	4855      	ldr	r0, [pc, #340]	; (8001b08 <toggleRelay+0x1e4>)
 80019b2:	f001 ffe9 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW4_GPIO_Port, FB_SW4_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019bc:	4853      	ldr	r0, [pc, #332]	; (8001b0c <toggleRelay+0x1e8>)
 80019be:	f001 ffe3 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW3_GPIO_Port, FB_SW3_Pin, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019c8:	484f      	ldr	r0, [pc, #316]	; (8001b08 <toggleRelay+0x1e4>)
 80019ca:	f001 ffdd 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW2_GPIO_Port, FB_SW2_Pin, GPIO_PIN_SET);
 80019ce:	2201      	movs	r2, #1
 80019d0:	2108      	movs	r1, #8
 80019d2:	484d      	ldr	r0, [pc, #308]	; (8001b08 <toggleRelay+0x1e4>)
 80019d4:	f001 ffd8 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW1_GPIO_Port, FB_SW1_Pin, GPIO_PIN_RESET);
 80019d8:	2200      	movs	r2, #0
 80019da:	2104      	movs	r1, #4
 80019dc:	484a      	ldr	r0, [pc, #296]	; (8001b08 <toggleRelay+0x1e4>)
 80019de:	f001 ffd3 	bl	8003988 <HAL_GPIO_WritePin>
				break;
 80019e2:	e08c      	b.n	8001afe <toggleRelay+0x1da>
		case(0x03):
				HAL_GPIO_WritePin(FB_SW6_GPIO_Port, FB_SW6_Pin, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ea:	4847      	ldr	r0, [pc, #284]	; (8001b08 <toggleRelay+0x1e4>)
 80019ec:	f001 ffcc 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW5_GPIO_Port, FB_SW5_Pin, GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019f6:	4844      	ldr	r0, [pc, #272]	; (8001b08 <toggleRelay+0x1e4>)
 80019f8:	f001 ffc6 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW4_GPIO_Port, FB_SW4_Pin, GPIO_PIN_RESET);
 80019fc:	2200      	movs	r2, #0
 80019fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a02:	4842      	ldr	r0, [pc, #264]	; (8001b0c <toggleRelay+0x1e8>)
 8001a04:	f001 ffc0 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW3_GPIO_Port, FB_SW3_Pin, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a0e:	483e      	ldr	r0, [pc, #248]	; (8001b08 <toggleRelay+0x1e4>)
 8001a10:	f001 ffba 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW2_GPIO_Port, FB_SW2_Pin, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2108      	movs	r1, #8
 8001a18:	483b      	ldr	r0, [pc, #236]	; (8001b08 <toggleRelay+0x1e4>)
 8001a1a:	f001 ffb5 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW1_GPIO_Port, FB_SW1_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2104      	movs	r1, #4
 8001a22:	4839      	ldr	r0, [pc, #228]	; (8001b08 <toggleRelay+0x1e4>)
 8001a24:	f001 ffb0 	bl	8003988 <HAL_GPIO_WritePin>
				break;
 8001a28:	e069      	b.n	8001afe <toggleRelay+0x1da>
		case(0x04):
				HAL_GPIO_WritePin(FB_SW6_GPIO_Port, FB_SW6_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a30:	4835      	ldr	r0, [pc, #212]	; (8001b08 <toggleRelay+0x1e4>)
 8001a32:	f001 ffa9 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW5_GPIO_Port, FB_SW5_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a3c:	4832      	ldr	r0, [pc, #200]	; (8001b08 <toggleRelay+0x1e4>)
 8001a3e:	f001 ffa3 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW4_GPIO_Port, FB_SW4_Pin, GPIO_PIN_SET);
 8001a42:	2201      	movs	r2, #1
 8001a44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a48:	4830      	ldr	r0, [pc, #192]	; (8001b0c <toggleRelay+0x1e8>)
 8001a4a:	f001 ff9d 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW3_GPIO_Port, FB_SW3_Pin, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a54:	482c      	ldr	r0, [pc, #176]	; (8001b08 <toggleRelay+0x1e4>)
 8001a56:	f001 ff97 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW2_GPIO_Port, FB_SW2_Pin, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2108      	movs	r1, #8
 8001a5e:	482a      	ldr	r0, [pc, #168]	; (8001b08 <toggleRelay+0x1e4>)
 8001a60:	f001 ff92 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW1_GPIO_Port, FB_SW1_Pin, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2104      	movs	r1, #4
 8001a68:	4827      	ldr	r0, [pc, #156]	; (8001b08 <toggleRelay+0x1e4>)
 8001a6a:	f001 ff8d 	bl	8003988 <HAL_GPIO_WritePin>
				break;
 8001a6e:	e046      	b.n	8001afe <toggleRelay+0x1da>
		case(0x05):
				HAL_GPIO_WritePin(FB_SW6_GPIO_Port, FB_SW6_Pin, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a76:	4824      	ldr	r0, [pc, #144]	; (8001b08 <toggleRelay+0x1e4>)
 8001a78:	f001 ff86 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW5_GPIO_Port, FB_SW5_Pin, GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a82:	4821      	ldr	r0, [pc, #132]	; (8001b08 <toggleRelay+0x1e4>)
 8001a84:	f001 ff80 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW4_GPIO_Port, FB_SW4_Pin, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a8e:	481f      	ldr	r0, [pc, #124]	; (8001b0c <toggleRelay+0x1e8>)
 8001a90:	f001 ff7a 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW3_GPIO_Port, FB_SW3_Pin, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a9a:	481b      	ldr	r0, [pc, #108]	; (8001b08 <toggleRelay+0x1e4>)
 8001a9c:	f001 ff74 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW2_GPIO_Port, FB_SW2_Pin, GPIO_PIN_RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2108      	movs	r1, #8
 8001aa4:	4818      	ldr	r0, [pc, #96]	; (8001b08 <toggleRelay+0x1e4>)
 8001aa6:	f001 ff6f 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW1_GPIO_Port, FB_SW1_Pin, GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2104      	movs	r1, #4
 8001aae:	4816      	ldr	r0, [pc, #88]	; (8001b08 <toggleRelay+0x1e4>)
 8001ab0:	f001 ff6a 	bl	8003988 <HAL_GPIO_WritePin>
				break;
 8001ab4:	e023      	b.n	8001afe <toggleRelay+0x1da>
		case(0x06):
				HAL_GPIO_WritePin(FB_SW6_GPIO_Port, FB_SW6_Pin, GPIO_PIN_SET);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001abc:	4812      	ldr	r0, [pc, #72]	; (8001b08 <toggleRelay+0x1e4>)
 8001abe:	f001 ff63 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW5_GPIO_Port, FB_SW5_Pin, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ac8:	480f      	ldr	r0, [pc, #60]	; (8001b08 <toggleRelay+0x1e4>)
 8001aca:	f001 ff5d 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW4_GPIO_Port, FB_SW4_Pin, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <toggleRelay+0x1e8>)
 8001ad6:	f001 ff57 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW3_GPIO_Port, FB_SW3_Pin, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae0:	4809      	ldr	r0, [pc, #36]	; (8001b08 <toggleRelay+0x1e4>)
 8001ae2:	f001 ff51 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW2_GPIO_Port, FB_SW2_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2108      	movs	r1, #8
 8001aea:	4807      	ldr	r0, [pc, #28]	; (8001b08 <toggleRelay+0x1e4>)
 8001aec:	f001 ff4c 	bl	8003988 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW1_GPIO_Port, FB_SW1_Pin, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2104      	movs	r1, #4
 8001af4:	4804      	ldr	r0, [pc, #16]	; (8001b08 <toggleRelay+0x1e4>)
 8001af6:	f001 ff47 	bl	8003988 <HAL_GPIO_WritePin>
				break;
 8001afa:	e000      	b.n	8001afe <toggleRelay+0x1da>
		default:
			break;
 8001afc:	bf00      	nop
		}
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40020800 	.word	0x40020800
 8001b0c:	40020000 	.word	0x40020000

08001b10 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if (htim->Instance==TIM2) {
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b20:	d131      	bne.n	8001b86 <HAL_TIM_IC_CaptureCallback+0x76>
	/*
		This works if you set channel 1 then channel 2 of the timer.
		You can set channel 1 twice but then the difference will be wrong.
		The reading will be 0xFFFFFFFF - CounterOneValue since CounterTwoValue = 0.
	*/
	if(startedCounting == 0) {
 8001b22:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10a      	bne.n	8001b40 <HAL_TIM_IC_CaptureCallback+0x30>
      // Get the 1st Input Capture value
      CounterOneValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f003 fa01 	bl	8004f34 <HAL_TIM_ReadCapturedValue>
 8001b32:	4602      	mov	r2, r0
 8001b34:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001b36:	601a      	str	r2, [r3, #0]
      startedCounting = 1;
 8001b38:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	801a      	strh	r2, [r3, #0]
	  // Set flags
	  startedCounting = 0;
	  newCaptureValue = true;
    }
  }
}
 8001b3e:	e022      	b.n	8001b86 <HAL_TIM_IC_CaptureCallback+0x76>
      CounterTwoValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001b40:	2104      	movs	r1, #4
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f003 f9f6 	bl	8004f34 <HAL_TIM_ReadCapturedValue>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001b4c:	601a      	str	r2, [r3, #0]
	  if (CounterTwoValue > CounterOneValue) {
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d907      	bls.n	8001b6a <HAL_TIM_IC_CaptureCallback+0x5a>
		counterDifference = (CounterTwoValue - CounterOneValue);
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	e007      	b.n	8001b7a <HAL_TIM_IC_CaptureCallback+0x6a>
		counterDifference = ((0xFFFFFFFF - CounterOneValue) + CounterTwoValue);
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	3b01      	subs	r3, #1
 8001b76:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001b78:	6013      	str	r3, [r2, #0]
	  startedCounting = 0;
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	801a      	strh	r2, [r3, #0]
	  newCaptureValue = true;
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000044 	.word	0x20000044
 8001b94:	20000038 	.word	0x20000038
 8001b98:	2000003c 	.word	0x2000003c
 8001b9c:	20000040 	.word	0x20000040
 8001ba0:	20000046 	.word	0x20000046

08001ba4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	// Handle Recieved Message
	UART_Rx_Handler();
 8001bac:	f000 f80e 	bl	8001bcc <UART_Rx_Handler>

	// Stage Rx of Next UART Message
	HAL_UART_Receive_IT(&huart2, (uint8_t*)uartRxBytes, 12);
 8001bb0:	220c      	movs	r2, #12
 8001bb2:	4904      	ldr	r1, [pc, #16]	; (8001bc4 <HAL_UART_RxCpltCallback+0x20>)
 8001bb4:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <HAL_UART_RxCpltCallback+0x24>)
 8001bb6:	f003 fe29 	bl	800580c <HAL_UART_Receive_IT>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000150 	.word	0x20000150
 8001bc8:	20000298 	.word	0x20000298

08001bcc <UART_Rx_Handler>:

void UART_Rx_Handler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0

	if(uartRxBytes[0] != 0xFF) 	// If header byte is not first byte abandon
 8001bd2:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <UART_Rx_Handler+0xd8>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2bff      	cmp	r3, #255	; 0xff
 8001bd8:	d15c      	bne.n	8001c94 <UART_Rx_Handler+0xc8>
		return;

	//Calculate Checksum to Check Data is Valid
	if(!CalculateRxDataChecksum())
 8001bda:	f000 f88d 	bl	8001cf8 <CalculateRxDataChecksum>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f083 0301 	eor.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d156      	bne.n	8001c98 <UART_Rx_Handler+0xcc>
		return;

	// Data is valid so handle it

	int freq = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
	int signal = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	603b      	str	r3, [r7, #0]
	// Switch on Data ID
	switch(uartRxBytes[1])
 8001bf2:	4b2c      	ldr	r3, [pc, #176]	; (8001ca4 <UART_Rx_Handler+0xd8>)
 8001bf4:	785b      	ldrb	r3, [r3, #1]
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d850      	bhi.n	8001c9c <UART_Rx_Handler+0xd0>
 8001bfa:	a201      	add	r2, pc, #4	; (adr r2, 8001c00 <UART_Rx_Handler+0x34>)
 8001bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c00:	08001c9d 	.word	0x08001c9d
 8001c04:	08001c9d 	.word	0x08001c9d
 8001c08:	08001c1d 	.word	0x08001c1d
 8001c0c:	08001c9d 	.word	0x08001c9d
 8001c10:	08001c23 	.word	0x08001c23
 8001c14:	08001c79 	.word	0x08001c79
 8001c18:	08001c87 	.word	0x08001c87
	case(0x00):
			break;
	case(0x01):
			break;
	case(0x02):
			measureFlag = true;
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <UART_Rx_Handler+0xdc>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
	case(0x04): // frequency change message
			freq = uartRxBytes[6] | ((int)uartRxBytes[5] << 8) | ((int)uartRxBytes[4] << 16) | ((int)uartRxBytes[3] << 24);
 8001c22:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <UART_Rx_Handler+0xd8>)
 8001c24:	799b      	ldrb	r3, [r3, #6]
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <UART_Rx_Handler+0xd8>)
 8001c2a:	795b      	ldrb	r3, [r3, #5]
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <UART_Rx_Handler+0xd8>)
 8001c32:	791b      	ldrb	r3, [r3, #4]
 8001c34:	041b      	lsls	r3, r3, #16
 8001c36:	431a      	orrs	r2, r3
 8001c38:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <UART_Rx_Handler+0xd8>)
 8001c3a:	78db      	ldrb	r3, [r3, #3]
 8001c3c:	061b      	lsls	r3, r3, #24
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	607b      	str	r3, [r7, #4]
			signal = uartRxBytes[10] | ((int)uartRxBytes[9] << 8) | ((int)uartRxBytes[8] << 16) | ((int)uartRxBytes[7] << 24);
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <UART_Rx_Handler+0xd8>)
 8001c44:	7a9b      	ldrb	r3, [r3, #10]
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <UART_Rx_Handler+0xd8>)
 8001c4a:	7a5b      	ldrb	r3, [r3, #9]
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <UART_Rx_Handler+0xd8>)
 8001c52:	7a1b      	ldrb	r3, [r3, #8]
 8001c54:	041b      	lsls	r3, r3, #16
 8001c56:	431a      	orrs	r2, r3
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <UART_Rx_Handler+0xd8>)
 8001c5a:	79db      	ldrb	r3, [r3, #7]
 8001c5c:	061b      	lsls	r3, r3, #24
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	603b      	str	r3, [r7, #0]
			AD9833CalculateRegister(freq, signal);
 8001c62:	6839      	ldr	r1, [r7, #0]
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff f88d 	bl	8000d84 <AD9833CalculateRegister>
			// Set Update Frequency Flag so AD9833 updates in main task loop
			updateSignalFreqFlag = true;
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <UART_Rx_Handler+0xe0>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
			refSignalFrequency = freq;
 8001c70:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <UART_Rx_Handler+0xe4>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]
			break;
 8001c76:	e012      	b.n	8001c9e <UART_Rx_Handler+0xd2>
	case(0x05): // set PGA gain message
			pgaGainValue = uartRxBytes[3];
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <UART_Rx_Handler+0xd8>)
 8001c7a:	78da      	ldrb	r2, [r3, #3]
 8001c7c:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <UART_Rx_Handler+0xe8>)
 8001c7e:	701a      	strb	r2, [r3, #0]
			updatePGAGainFlag = true;
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <UART_Rx_Handler+0xec>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	701a      	strb	r2, [r3, #0]
	case(0x06): // toggle relay
			toggleRelay(uartRxBytes[3]);
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <UART_Rx_Handler+0xd8>)
 8001c88:	78db      	ldrb	r3, [r3, #3]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fe4a 	bl	8001924 <toggleRelay>
	default:
		break;
 8001c90:	bf00      	nop
 8001c92:	e003      	b.n	8001c9c <UART_Rx_Handler+0xd0>
		return;
 8001c94:	bf00      	nop
 8001c96:	e002      	b.n	8001c9e <UART_Rx_Handler+0xd2>
		return;
 8001c98:	bf00      	nop
 8001c9a:	e000      	b.n	8001c9e <UART_Rx_Handler+0xd2>
		break;
 8001c9c:	bf00      	nop
	}
}
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000150 	.word	0x20000150
 8001ca8:	20000048 	.word	0x20000048
 8001cac:	20000034 	.word	0x20000034
 8001cb0:	2000004c 	.word	0x2000004c
 8001cb4:	20000104 	.word	0x20000104
 8001cb8:	20000035 	.word	0x20000035

08001cbc <makeCheckSum>:

uint8_t makeCheckSum(void) {
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	71fb      	strb	r3, [r7, #7]

	int i;
	// Checksum is bitwise xor of all bytes except checksum
	for(i = 0; i < (sizeof(uartTxBytes)/sizeof(uint8_t) - 1); i++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	e009      	b.n	8001ce0 <makeCheckSum+0x24>
		result = result ^ uartTxBytes[i];
 8001ccc:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <makeCheckSum+0x38>)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	781a      	ldrb	r2, [r3, #0]
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	4053      	eors	r3, r2
 8001cd8:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < (sizeof(uartTxBytes)/sizeof(uint8_t) - 1); i++)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2b0a      	cmp	r3, #10
 8001ce4:	d9f2      	bls.n	8001ccc <makeCheckSum+0x10>
	return result;
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	20000000 	.word	0x20000000

08001cf8 <CalculateRxDataChecksum>:

bool CalculateRxDataChecksum(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	71fb      	strb	r3, [r7, #7]

	int i;
	// Checksum is bitwise xor of all bytes except checksum
	for(i = 0; i < (sizeof(uartRxBytes)/sizeof(uint8_t) - 1); i++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	e009      	b.n	8001d1c <CalculateRxDataChecksum+0x24>
		result = result ^ uartRxBytes[i];
 8001d08:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <CalculateRxDataChecksum+0x4c>)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	4053      	eors	r3, r2
 8001d14:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < (sizeof(uartRxBytes)/sizeof(uint8_t) - 1); i++)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2b0a      	cmp	r3, #10
 8001d20:	d9f2      	bls.n	8001d08 <CalculateRxDataChecksum+0x10>

	if(result == uartRxBytes[i])
 8001d22:	4a08      	ldr	r2, [pc, #32]	; (8001d44 <CalculateRxDataChecksum+0x4c>)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	79fa      	ldrb	r2, [r7, #7]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d101      	bne.n	8001d34 <CalculateRxDataChecksum+0x3c>
		return true;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <CalculateRxDataChecksum+0x3e>
	else
		return false;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000150 	.word	0x20000150

08001d48 <AD9833_Set_Output>:

void AD9833_Set_Output(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_RESET);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2140      	movs	r1, #64	; 0x40
 8001d52:	4811      	ldr	r0, [pc, #68]	; (8001d98 <AD9833_Set_Output+0x50>)
 8001d54:	f001 fe18 	bl	8003988 <HAL_GPIO_WritePin>
	uint16_t size = 1;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	817b      	strh	r3, [r7, #10]
	uint8_t * base = (uint8_t*)registerValues;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <AD9833_Set_Output+0x54>)
 8001d5e:	607b      	str	r3, [r7, #4]
	uint8_t * dataPointer = (uint8_t*)registerValues;
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <AD9833_Set_Output+0x54>)
 8001d62:	60fb      	str	r3, [r7, #12]
	while(dataPointer < base + sizeof(registerValues))
 8001d64:	e009      	b.n	8001d7a <AD9833_Set_Output+0x32>
	{
		//HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_RESET);
		HAL_SPI_Transmit(&hspi1, dataPointer, size, HAL_MAX_DELAY);
 8001d66:	897a      	ldrh	r2, [r7, #10]
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6c:	68f9      	ldr	r1, [r7, #12]
 8001d6e:	480c      	ldr	r0, [pc, #48]	; (8001da0 <AD9833_Set_Output+0x58>)
 8001d70:	f002 fbb8 	bl	80044e4 <HAL_SPI_Transmit>
		//HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_SET);
		dataPointer += sizeof(uint16_t);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	3302      	adds	r3, #2
 8001d78:	60fb      	str	r3, [r7, #12]
	while(dataPointer < base + sizeof(registerValues))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	330a      	adds	r3, #10
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d3f0      	bcc.n	8001d66 <AD9833_Set_Output+0x1e>
	}
	HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_SET);
 8001d84:	2201      	movs	r2, #1
 8001d86:	2140      	movs	r1, #64	; 0x40
 8001d88:	4803      	ldr	r0, [pc, #12]	; (8001d98 <AD9833_Set_Output+0x50>)
 8001d8a:	f001 fdfd 	bl	8003988 <HAL_GPIO_WritePin>
}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	200000b8 	.word	0x200000b8
 8001da0:	200001c4 	.word	0x200001c4

08001da4 <PGA_Set_Gain>:

void PGA_Set_Gain(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
	// 8 bit values for seperate instruction and control registers
	// Channel select register is not needed as single channel device used
	uint8_t instructionReg = 0x40; // write to gain register
 8001daa:	2340      	movs	r3, #64	; 0x40
 8001dac:	73bb      	strb	r3, [r7, #14]
	uint8_t controlReg;

	// Switch on allowable gain values, and set relevant bits in control reg
	switch(pgaGainValue){
 8001dae:	4b41      	ldr	r3, [pc, #260]	; (8001eb4 <PGA_Set_Gain+0x110>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b20      	cmp	r3, #32
 8001db4:	d87a      	bhi.n	8001eac <PGA_Set_Gain+0x108>
 8001db6:	a201      	add	r2, pc, #4	; (adr r2, 8001dbc <PGA_Set_Gain+0x18>)
 8001db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dbc:	08001e71 	.word	0x08001e71
 8001dc0:	08001e41 	.word	0x08001e41
 8001dc4:	08001e47 	.word	0x08001e47
 8001dc8:	08001ead 	.word	0x08001ead
 8001dcc:	08001e4d 	.word	0x08001e4d
 8001dd0:	08001e53 	.word	0x08001e53
 8001dd4:	08001ead 	.word	0x08001ead
 8001dd8:	08001ead 	.word	0x08001ead
 8001ddc:	08001e59 	.word	0x08001e59
 8001de0:	08001ead 	.word	0x08001ead
 8001de4:	08001e5f 	.word	0x08001e5f
 8001de8:	08001ead 	.word	0x08001ead
 8001dec:	08001ead 	.word	0x08001ead
 8001df0:	08001ead 	.word	0x08001ead
 8001df4:	08001ead 	.word	0x08001ead
 8001df8:	08001ead 	.word	0x08001ead
 8001dfc:	08001e65 	.word	0x08001e65
 8001e00:	08001ead 	.word	0x08001ead
 8001e04:	08001ead 	.word	0x08001ead
 8001e08:	08001ead 	.word	0x08001ead
 8001e0c:	08001ead 	.word	0x08001ead
 8001e10:	08001ead 	.word	0x08001ead
 8001e14:	08001ead 	.word	0x08001ead
 8001e18:	08001ead 	.word	0x08001ead
 8001e1c:	08001ead 	.word	0x08001ead
 8001e20:	08001ead 	.word	0x08001ead
 8001e24:	08001ead 	.word	0x08001ead
 8001e28:	08001ead 	.word	0x08001ead
 8001e2c:	08001ead 	.word	0x08001ead
 8001e30:	08001ead 	.word	0x08001ead
 8001e34:	08001ead 	.word	0x08001ead
 8001e38:	08001ead 	.word	0x08001ead
 8001e3c:	08001e6b 	.word	0x08001e6b
	case 0x0 : // TODO implement shutdown/sleep whatever its called
		break;
	case 1 :
		controlReg = 0x0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	73fb      	strb	r3, [r7, #15]
		break;
 8001e44:	e015      	b.n	8001e72 <PGA_Set_Gain+0xce>
	case 2 :
		controlReg = 0x1;
 8001e46:	2301      	movs	r3, #1
 8001e48:	73fb      	strb	r3, [r7, #15]
		break;
 8001e4a:	e012      	b.n	8001e72 <PGA_Set_Gain+0xce>
	case 4 :
		controlReg = 0x2;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	73fb      	strb	r3, [r7, #15]
		break;
 8001e50:	e00f      	b.n	8001e72 <PGA_Set_Gain+0xce>
	case 5 :
		controlReg = 0x3;
 8001e52:	2303      	movs	r3, #3
 8001e54:	73fb      	strb	r3, [r7, #15]
		break;
 8001e56:	e00c      	b.n	8001e72 <PGA_Set_Gain+0xce>
	case 8:
		controlReg = 0x4;
 8001e58:	2304      	movs	r3, #4
 8001e5a:	73fb      	strb	r3, [r7, #15]
		break;
 8001e5c:	e009      	b.n	8001e72 <PGA_Set_Gain+0xce>
	case 10:
		controlReg = 0x5;
 8001e5e:	2305      	movs	r3, #5
 8001e60:	73fb      	strb	r3, [r7, #15]
		break;
 8001e62:	e006      	b.n	8001e72 <PGA_Set_Gain+0xce>
	case 16:
		controlReg = 0x6;
 8001e64:	2306      	movs	r3, #6
 8001e66:	73fb      	strb	r3, [r7, #15]
		break;
 8001e68:	e003      	b.n	8001e72 <PGA_Set_Gain+0xce>
	case 32:
		controlReg = 0x7;
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	73fb      	strb	r3, [r7, #15]
		break;
 8001e6e:	e000      	b.n	8001e72 <PGA_Set_Gain+0xce>
		break;
 8001e70:	bf00      	nop
	default:	// gain was not valid so don't send a command
		return;
	}

	// Assemble data to send via SPI
	uint16_t spiWord = ((uint16_t)instructionReg << 8) | controlReg;
 8001e72:	7bbb      	ldrb	r3, [r7, #14]
 8001e74:	021b      	lsls	r3, r3, #8
 8001e76:	b21a      	sxth	r2, r3
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	b21b      	sxth	r3, r3
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	80fb      	strh	r3, [r7, #6]

	// Get Data pointer
	uint8_t * dataAddr = &spiWord;
 8001e84:	1dbb      	adds	r3, r7, #6
 8001e86:	60bb      	str	r3, [r7, #8]


	// Set CS Low
	HAL_GPIO_WritePin(PGA_CS_GPIO_Port, PGA_CS_Pin, GPIO_PIN_RESET);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2180      	movs	r1, #128	; 0x80
 8001e8c:	480a      	ldr	r0, [pc, #40]	; (8001eb8 <PGA_Set_Gain+0x114>)
 8001e8e:	f001 fd7b 	bl	8003988 <HAL_GPIO_WritePin>
	// Send SPI data
	HAL_SPI_Transmit(&hspi2, dataAddr, sizeof(spiWord)/sizeof(uint16_t), HAL_MAX_DELAY);
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	2201      	movs	r2, #1
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	4808      	ldr	r0, [pc, #32]	; (8001ebc <PGA_Set_Gain+0x118>)
 8001e9c:	f002 fb22 	bl	80044e4 <HAL_SPI_Transmit>
	// Set CS High
	HAL_GPIO_WritePin(PGA_CS_GPIO_Port, PGA_CS_Pin, GPIO_PIN_SET);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	2180      	movs	r1, #128	; 0x80
 8001ea4:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <PGA_Set_Gain+0x114>)
 8001ea6:	f001 fd6f 	bl	8003988 <HAL_GPIO_WritePin>
 8001eaa:	e000      	b.n	8001eae <PGA_Set_Gain+0x10a>
		return;
 8001eac:	bf00      	nop


}
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000104 	.word	0x20000104
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	20000060 	.word	0x20000060

08001ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_MspInit+0x4c>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <HAL_MspInit+0x4c>)
 8001ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_MspInit+0x4c>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	603b      	str	r3, [r7, #0]
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_MspInit+0x4c>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a08      	ldr	r2, [pc, #32]	; (8001f1c <HAL_MspInit+0x4c>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_MspInit+0x4c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800

08001f20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a2f      	ldr	r2, [pc, #188]	; (8001ffc <HAL_ADC_MspInit+0xdc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d157      	bne.n	8001ff2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	4b2e      	ldr	r3, [pc, #184]	; (8002000 <HAL_ADC_MspInit+0xe0>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	4a2d      	ldr	r2, [pc, #180]	; (8002000 <HAL_ADC_MspInit+0xe0>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f50:	6453      	str	r3, [r2, #68]	; 0x44
 8001f52:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <HAL_ADC_MspInit+0xe0>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4b27      	ldr	r3, [pc, #156]	; (8002000 <HAL_ADC_MspInit+0xe0>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a26      	ldr	r2, [pc, #152]	; (8002000 <HAL_ADC_MspInit+0xe0>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b24      	ldr	r3, [pc, #144]	; (8002000 <HAL_ADC_MspInit+0xe0>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001f7a:	2350      	movs	r3, #80	; 0x50
 8001f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	481d      	ldr	r0, [pc, #116]	; (8002004 <HAL_ADC_MspInit+0xe4>)
 8001f8e:	f001 fb69 	bl	8003664 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_ADC_MspInit+0xe8>)
 8001f94:	4a1d      	ldr	r2, [pc, #116]	; (800200c <HAL_ADC_MspInit+0xec>)
 8001f96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_ADC_MspInit+0xe8>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <HAL_ADC_MspInit+0xe8>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa4:	4b18      	ldr	r3, [pc, #96]	; (8002008 <HAL_ADC_MspInit+0xe8>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001faa:	4b17      	ldr	r3, [pc, #92]	; (8002008 <HAL_ADC_MspInit+0xe8>)
 8001fac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fb0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <HAL_ADC_MspInit+0xe8>)
 8001fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fb8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <HAL_ADC_MspInit+0xe8>)
 8001fbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_ADC_MspInit+0xe8>)
 8001fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fc8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_ADC_MspInit+0xe8>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd0:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <HAL_ADC_MspInit+0xe8>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fd6:	480c      	ldr	r0, [pc, #48]	; (8002008 <HAL_ADC_MspInit+0xe8>)
 8001fd8:	f000 ffb4 	bl	8002f44 <HAL_DMA_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001fe2:	f7ff ff6d 	bl	8001ec0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a07      	ldr	r2, [pc, #28]	; (8002008 <HAL_ADC_MspInit+0xe8>)
 8001fea:	639a      	str	r2, [r3, #56]	; 0x38
 8001fec:	4a06      	ldr	r2, [pc, #24]	; (8002008 <HAL_ADC_MspInit+0xe8>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ff2:	bf00      	nop
 8001ff4:	3728      	adds	r7, #40	; 0x28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40012000 	.word	0x40012000
 8002000:	40023800 	.word	0x40023800
 8002004:	40020000 	.word	0x40020000
 8002008:	20000164 	.word	0x20000164
 800200c:	40026410 	.word	0x40026410

08002010 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08c      	sub	sp, #48	; 0x30
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a41      	ldr	r2, [pc, #260]	; (8002134 <HAL_SPI_MspInit+0x124>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d12c      	bne.n	800208c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	4b40      	ldr	r3, [pc, #256]	; (8002138 <HAL_SPI_MspInit+0x128>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	4a3f      	ldr	r2, [pc, #252]	; (8002138 <HAL_SPI_MspInit+0x128>)
 800203c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002040:	6453      	str	r3, [r2, #68]	; 0x44
 8002042:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <HAL_SPI_MspInit+0x128>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204a:	61bb      	str	r3, [r7, #24]
 800204c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	4b39      	ldr	r3, [pc, #228]	; (8002138 <HAL_SPI_MspInit+0x128>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a38      	ldr	r2, [pc, #224]	; (8002138 <HAL_SPI_MspInit+0x128>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b36      	ldr	r3, [pc, #216]	; (8002138 <HAL_SPI_MspInit+0x128>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800206a:	23a0      	movs	r3, #160	; 0xa0
 800206c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800207a:	2305      	movs	r3, #5
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	f107 031c 	add.w	r3, r7, #28
 8002082:	4619      	mov	r1, r3
 8002084:	482d      	ldr	r0, [pc, #180]	; (800213c <HAL_SPI_MspInit+0x12c>)
 8002086:	f001 faed 	bl	8003664 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800208a:	e04f      	b.n	800212c <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a2b      	ldr	r2, [pc, #172]	; (8002140 <HAL_SPI_MspInit+0x130>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d14a      	bne.n	800212c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	4b27      	ldr	r3, [pc, #156]	; (8002138 <HAL_SPI_MspInit+0x128>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a26      	ldr	r2, [pc, #152]	; (8002138 <HAL_SPI_MspInit+0x128>)
 80020a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_SPI_MspInit+0x128>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_SPI_MspInit+0x128>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a1f      	ldr	r2, [pc, #124]	; (8002138 <HAL_SPI_MspInit+0x128>)
 80020bc:	f043 0304 	orr.w	r3, r3, #4
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_SPI_MspInit+0x128>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_SPI_MspInit+0x128>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a18      	ldr	r2, [pc, #96]	; (8002138 <HAL_SPI_MspInit+0x128>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <HAL_SPI_MspInit+0x128>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020ea:	2302      	movs	r3, #2
 80020ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80020fa:	2307      	movs	r3, #7
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020fe:	f107 031c 	add.w	r3, r7, #28
 8002102:	4619      	mov	r1, r3
 8002104:	480f      	ldr	r0, [pc, #60]	; (8002144 <HAL_SPI_MspInit+0x134>)
 8002106:	f001 faad 	bl	8003664 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800210a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800210e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800211c:	2305      	movs	r3, #5
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002120:	f107 031c 	add.w	r3, r7, #28
 8002124:	4619      	mov	r1, r3
 8002126:	4808      	ldr	r0, [pc, #32]	; (8002148 <HAL_SPI_MspInit+0x138>)
 8002128:	f001 fa9c 	bl	8003664 <HAL_GPIO_Init>
}
 800212c:	bf00      	nop
 800212e:	3730      	adds	r7, #48	; 0x30
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40013000 	.word	0x40013000
 8002138:	40023800 	.word	0x40023800
 800213c:	40020000 	.word	0x40020000
 8002140:	40003800 	.word	0x40003800
 8002144:	40020800 	.word	0x40020800
 8002148:	40020400 	.word	0x40020400

0800214c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216c:	d134      	bne.n	80021d8 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	4b29      	ldr	r3, [pc, #164]	; (8002218 <HAL_TIM_Base_MspInit+0xcc>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	4a28      	ldr	r2, [pc, #160]	; (8002218 <HAL_TIM_Base_MspInit+0xcc>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6413      	str	r3, [r2, #64]	; 0x40
 800217e:	4b26      	ldr	r3, [pc, #152]	; (8002218 <HAL_TIM_Base_MspInit+0xcc>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <HAL_TIM_Base_MspInit+0xcc>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a21      	ldr	r2, [pc, #132]	; (8002218 <HAL_TIM_Base_MspInit+0xcc>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b1f      	ldr	r3, [pc, #124]	; (8002218 <HAL_TIM_Base_MspInit+0xcc>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021a6:	2303      	movs	r3, #3
 80021a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021ae:	2302      	movs	r3, #2
 80021b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021b6:	2301      	movs	r3, #1
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	4816      	ldr	r0, [pc, #88]	; (800221c <HAL_TIM_Base_MspInit+0xd0>)
 80021c2:	f001 fa4f 	bl	8003664 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	201c      	movs	r0, #28
 80021cc:	f000 fe83 	bl	8002ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021d0:	201c      	movs	r0, #28
 80021d2:	f000 fe9c 	bl	8002f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021d6:	e01a      	b.n	800220e <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a10      	ldr	r2, [pc, #64]	; (8002220 <HAL_TIM_Base_MspInit+0xd4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d115      	bne.n	800220e <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <HAL_TIM_Base_MspInit+0xcc>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <HAL_TIM_Base_MspInit+0xcc>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_TIM_Base_MspInit+0xcc>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	201d      	movs	r0, #29
 8002204:	f000 fe67 	bl	8002ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002208:	201d      	movs	r0, #29
 800220a:	f000 fe80 	bl	8002f0e <HAL_NVIC_EnableIRQ>
}
 800220e:	bf00      	nop
 8002210:	3728      	adds	r7, #40	; 0x28
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	40020000 	.word	0x40020000
 8002220:	40000400 	.word	0x40000400

08002224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a1d      	ldr	r2, [pc, #116]	; (80022b8 <HAL_UART_MspInit+0x94>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d133      	bne.n	80022ae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <HAL_UART_MspInit+0x98>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <HAL_UART_MspInit+0x98>)
 8002250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002254:	6413      	str	r3, [r2, #64]	; 0x40
 8002256:	4b19      	ldr	r3, [pc, #100]	; (80022bc <HAL_UART_MspInit+0x98>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_UART_MspInit+0x98>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a14      	ldr	r2, [pc, #80]	; (80022bc <HAL_UART_MspInit+0x98>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_UART_MspInit+0x98>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800227e:	230c      	movs	r3, #12
 8002280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228a:	2303      	movs	r3, #3
 800228c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800228e:	2307      	movs	r3, #7
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002292:	f107 0314 	add.w	r3, r7, #20
 8002296:	4619      	mov	r1, r3
 8002298:	4809      	ldr	r0, [pc, #36]	; (80022c0 <HAL_UART_MspInit+0x9c>)
 800229a:	f001 f9e3 	bl	8003664 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	2026      	movs	r0, #38	; 0x26
 80022a4:	f000 fe17 	bl	8002ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022a8:	2026      	movs	r0, #38	; 0x26
 80022aa:	f000 fe30 	bl	8002f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022ae:	bf00      	nop
 80022b0:	3728      	adds	r7, #40	; 0x28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40004400 	.word	0x40004400
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40020000 	.word	0x40020000

080022c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <HardFault_Handler+0x4>

080022d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <MemManage_Handler+0x4>

080022de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e2:	e7fe      	b.n	80022e2 <BusFault_Handler+0x4>

080022e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <UsageFault_Handler+0x4>

080022ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002318:	f000 f8bc 	bl	8002494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}

08002320 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <TIM2_IRQHandler+0x10>)
 8002326:	f002 fba9 	bl	8004a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000258 	.word	0x20000258

08002334 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002338:	4802      	ldr	r0, [pc, #8]	; (8002344 <TIM3_IRQHandler+0x10>)
 800233a:	f002 fb9f 	bl	8004a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200000c4 	.word	0x200000c4

08002348 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <USART2_IRQHandler+0x10>)
 800234e:	f003 fab3 	bl	80058b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000298 	.word	0x20000298

0800235c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <DMA2_Stream0_IRQHandler+0x10>)
 8002362:	f000 ff17 	bl	8003194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000164 	.word	0x20000164

08002370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <SystemInit+0x28>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237a:	4a07      	ldr	r2, [pc, #28]	; (8002398 <SystemInit+0x28>)
 800237c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <SystemInit+0x28>)
 8002386:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800238a:	609a      	str	r2, [r3, #8]
#endif
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800239c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023a2:	e003      	b.n	80023ac <LoopCopyDataInit>

080023a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023aa:	3104      	adds	r1, #4

080023ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023ac:	480b      	ldr	r0, [pc, #44]	; (80023dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023ae:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023b4:	d3f6      	bcc.n	80023a4 <CopyDataInit>
  ldr  r2, =_sbss
 80023b6:	4a0b      	ldr	r2, [pc, #44]	; (80023e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023b8:	e002      	b.n	80023c0 <LoopFillZerobss>

080023ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023bc:	f842 3b04 	str.w	r3, [r2], #4

080023c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023c4:	d3f9      	bcc.n	80023ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023c6:	f7ff ffd3 	bl	8002370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ca:	f004 f871 	bl	80064b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ce:	f7fe fd27 	bl	8000e20 <main>
  bx  lr    
 80023d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80023d8:	08006550 	.word	0x08006550
  ldr  r0, =_sdata
 80023dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023e0:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80023e4:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80023e8:	200002dc 	.word	0x200002dc

080023ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023ec:	e7fe      	b.n	80023ec <ADC_IRQHandler>
	...

080023f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023f4:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <HAL_Init+0x40>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0d      	ldr	r2, [pc, #52]	; (8002430 <HAL_Init+0x40>)
 80023fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_Init+0x40>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <HAL_Init+0x40>)
 8002406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800240a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_Init+0x40>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a07      	ldr	r2, [pc, #28]	; (8002430 <HAL_Init+0x40>)
 8002412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002416:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002418:	2003      	movs	r0, #3
 800241a:	f000 fd51 	bl	8002ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800241e:	2000      	movs	r0, #0
 8002420:	f000 f808 	bl	8002434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002424:	f7ff fd54 	bl	8001ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40023c00 	.word	0x40023c00

08002434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_InitTick+0x54>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_InitTick+0x58>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244a:	fbb3 f3f1 	udiv	r3, r3, r1
 800244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002452:	4618      	mov	r0, r3
 8002454:	f000 fd69 	bl	8002f2a <HAL_SYSTICK_Config>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e00e      	b.n	8002480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b0f      	cmp	r3, #15
 8002466:	d80a      	bhi.n	800247e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002468:	2200      	movs	r2, #0
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f000 fd31 	bl	8002ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002474:	4a06      	ldr	r2, [pc, #24]	; (8002490 <HAL_InitTick+0x5c>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e000      	b.n	8002480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	2000000c 	.word	0x2000000c
 800248c:	20000014 	.word	0x20000014
 8002490:	20000010 	.word	0x20000010

08002494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_IncTick+0x20>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_IncTick+0x24>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4413      	add	r3, r2
 80024a4:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <HAL_IncTick+0x24>)
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000014 	.word	0x20000014
 80024b8:	200002d8 	.word	0x200002d8

080024bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return uwTick;
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <HAL_GetTick+0x14>)
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	200002d8 	.word	0x200002d8

080024d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024dc:	f7ff ffee 	bl	80024bc <HAL_GetTick>
 80024e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ec:	d005      	beq.n	80024fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_Delay+0x40>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4413      	add	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024fa:	bf00      	nop
 80024fc:	f7ff ffde 	bl	80024bc <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	429a      	cmp	r2, r3
 800250a:	d8f7      	bhi.n	80024fc <HAL_Delay+0x28>
  {
  }
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000014 	.word	0x20000014

08002518 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e033      	b.n	8002596 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff fcf2 	bl	8001f20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b00      	cmp	r3, #0
 8002554:	d118      	bne.n	8002588 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800255e:	f023 0302 	bic.w	r3, r3, #2
 8002562:	f043 0202 	orr.w	r2, r3, #2
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fa5a 	bl	8002a24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f023 0303 	bic.w	r3, r3, #3
 800257e:	f043 0201 	orr.w	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	641a      	str	r2, [r3, #64]	; 0x40
 8002586:	e001      	b.n	800258c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_ADC_Start_DMA+0x1e>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e0cc      	b.n	8002758 <HAL_ADC_Start_DMA+0x1b8>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d018      	beq.n	8002606 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025e4:	4b5e      	ldr	r3, [pc, #376]	; (8002760 <HAL_ADC_Start_DMA+0x1c0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a5e      	ldr	r2, [pc, #376]	; (8002764 <HAL_ADC_Start_DMA+0x1c4>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	0c9a      	lsrs	r2, r3, #18
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80025f8:	e002      	b.n	8002600 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f9      	bne.n	80025fa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b01      	cmp	r3, #1
 8002612:	f040 80a0 	bne.w	8002756 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800261e:	f023 0301 	bic.w	r3, r3, #1
 8002622:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	d007      	beq.n	8002648 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002640:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002654:	d106      	bne.n	8002664 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f023 0206 	bic.w	r2, r3, #6
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
 8002662:	e002      	b.n	800266a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002672:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <HAL_ADC_Start_DMA+0x1c8>)
 8002674:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267a:	4a3c      	ldr	r2, [pc, #240]	; (800276c <HAL_ADC_Start_DMA+0x1cc>)
 800267c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	4a3b      	ldr	r2, [pc, #236]	; (8002770 <HAL_ADC_Start_DMA+0x1d0>)
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	4a3a      	ldr	r2, [pc, #232]	; (8002774 <HAL_ADC_Start_DMA+0x1d4>)
 800268c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002696:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80026a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	334c      	adds	r3, #76	; 0x4c
 80026c2:	4619      	mov	r1, r3
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f000 fcea 	bl	80030a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d12a      	bne.n	800272e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a26      	ldr	r2, [pc, #152]	; (8002778 <HAL_ADC_Start_DMA+0x1d8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d015      	beq.n	800270e <HAL_ADC_Start_DMA+0x16e>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a25      	ldr	r2, [pc, #148]	; (800277c <HAL_ADC_Start_DMA+0x1dc>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d105      	bne.n	80026f8 <HAL_ADC_Start_DMA+0x158>
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <HAL_ADC_Start_DMA+0x1c8>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00a      	beq.n	800270e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a20      	ldr	r2, [pc, #128]	; (8002780 <HAL_ADC_Start_DMA+0x1e0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d129      	bne.n	8002756 <HAL_ADC_Start_DMA+0x1b6>
 8002702:	4b19      	ldr	r3, [pc, #100]	; (8002768 <HAL_ADC_Start_DMA+0x1c8>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	2b0f      	cmp	r3, #15
 800270c:	d823      	bhi.n	8002756 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d11c      	bne.n	8002756 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	e013      	b.n	8002756 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a11      	ldr	r2, [pc, #68]	; (8002778 <HAL_ADC_Start_DMA+0x1d8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d10e      	bne.n	8002756 <HAL_ADC_Start_DMA+0x1b6>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d107      	bne.n	8002756 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002754:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	2000000c 	.word	0x2000000c
 8002764:	431bde83 	.word	0x431bde83
 8002768:	40012300 	.word	0x40012300
 800276c:	08002c1d 	.word	0x08002c1d
 8002770:	08002cd7 	.word	0x08002cd7
 8002774:	08002cf3 	.word	0x08002cf3
 8002778:	40012000 	.word	0x40012000
 800277c:	40012100 	.word	0x40012100
 8002780:	40012200 	.word	0x40012200

08002784 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x1c>
 80027d8:	2302      	movs	r3, #2
 80027da:	e113      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x244>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b09      	cmp	r3, #9
 80027ea:	d925      	bls.n	8002838 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68d9      	ldr	r1, [r3, #12]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	3b1e      	subs	r3, #30
 8002802:	2207      	movs	r2, #7
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43da      	mvns	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	400a      	ands	r2, r1
 8002810:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68d9      	ldr	r1, [r3, #12]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	b29b      	uxth	r3, r3
 8002822:	4618      	mov	r0, r3
 8002824:	4603      	mov	r3, r0
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4403      	add	r3, r0
 800282a:	3b1e      	subs	r3, #30
 800282c:	409a      	lsls	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	e022      	b.n	800287e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6919      	ldr	r1, [r3, #16]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	2207      	movs	r2, #7
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43da      	mvns	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	400a      	ands	r2, r1
 800285a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6919      	ldr	r1, [r3, #16]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	b29b      	uxth	r3, r3
 800286c:	4618      	mov	r0, r3
 800286e:	4603      	mov	r3, r0
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4403      	add	r3, r0
 8002874:	409a      	lsls	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b06      	cmp	r3, #6
 8002884:	d824      	bhi.n	80028d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	3b05      	subs	r3, #5
 8002898:	221f      	movs	r2, #31
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43da      	mvns	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	400a      	ands	r2, r1
 80028a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4618      	mov	r0, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	3b05      	subs	r3, #5
 80028c2:	fa00 f203 	lsl.w	r2, r0, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	635a      	str	r2, [r3, #52]	; 0x34
 80028ce:	e04c      	b.n	800296a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b0c      	cmp	r3, #12
 80028d6:	d824      	bhi.n	8002922 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	3b23      	subs	r3, #35	; 0x23
 80028ea:	221f      	movs	r2, #31
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43da      	mvns	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	400a      	ands	r2, r1
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	4618      	mov	r0, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	3b23      	subs	r3, #35	; 0x23
 8002914:	fa00 f203 	lsl.w	r2, r0, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
 8002920:	e023      	b.n	800296a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	3b41      	subs	r3, #65	; 0x41
 8002934:	221f      	movs	r2, #31
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	400a      	ands	r2, r1
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	4618      	mov	r0, r3
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	3b41      	subs	r3, #65	; 0x41
 800295e:	fa00 f203 	lsl.w	r2, r0, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800296a:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <HAL_ADC_ConfigChannel+0x250>)
 800296c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a28      	ldr	r2, [pc, #160]	; (8002a14 <HAL_ADC_ConfigChannel+0x254>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d10f      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1d8>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b12      	cmp	r3, #18
 800297e:	d10b      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <HAL_ADC_ConfigChannel+0x254>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d12b      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x23a>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <HAL_ADC_ConfigChannel+0x258>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d003      	beq.n	80029b4 <HAL_ADC_ConfigChannel+0x1f4>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b11      	cmp	r3, #17
 80029b2:	d122      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a11      	ldr	r2, [pc, #68]	; (8002a18 <HAL_ADC_ConfigChannel+0x258>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d111      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029d6:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_ADC_ConfigChannel+0x25c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <HAL_ADC_ConfigChannel+0x260>)
 80029dc:	fba2 2303 	umull	r2, r3, r2, r3
 80029e0:	0c9a      	lsrs	r2, r3, #18
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029ec:	e002      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	3b01      	subs	r3, #1
 80029f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f9      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	40012300 	.word	0x40012300
 8002a14:	40012000 	.word	0x40012000
 8002a18:	10000012 	.word	0x10000012
 8002a1c:	2000000c 	.word	0x2000000c
 8002a20:	431bde83 	.word	0x431bde83

08002a24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a2c:	4b79      	ldr	r3, [pc, #484]	; (8002c14 <ADC_Init+0x1f0>)
 8002a2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	021a      	lsls	r2, r3, #8
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6899      	ldr	r1, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	4a58      	ldr	r2, [pc, #352]	; (8002c18 <ADC_Init+0x1f4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d022      	beq.n	8002b02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002aca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6899      	ldr	r1, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002aec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6899      	ldr	r1, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	e00f      	b.n	8002b22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0202 	bic.w	r2, r2, #2
 8002b30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6899      	ldr	r1, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	7e1b      	ldrb	r3, [r3, #24]
 8002b3c:	005a      	lsls	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01b      	beq.n	8002b88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6859      	ldr	r1, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	035a      	lsls	r2, r3, #13
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	e007      	b.n	8002b98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	051a      	lsls	r2, r3, #20
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6899      	ldr	r1, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bda:	025a      	lsls	r2, r3, #9
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6899      	ldr	r1, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	029a      	lsls	r2, r3, #10
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	609a      	str	r2, [r3, #8]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	40012300 	.word	0x40012300
 8002c18:	0f000001 	.word	0x0f000001

08002c1c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d13c      	bne.n	8002cb0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d12b      	bne.n	8002ca8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d127      	bne.n	8002ca8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d006      	beq.n	8002c74 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d119      	bne.n	8002ca8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0220 	bic.w	r2, r2, #32
 8002c82:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d105      	bne.n	8002ca8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7ff fd6b 	bl	8002784 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cae:	e00e      	b.n	8002cce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f7ff fd75 	bl	80027ac <HAL_ADC_ErrorCallback>
}
 8002cc2:	e004      	b.n	8002cce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7ff fd57 	bl	8002798 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2240      	movs	r2, #64	; 0x40
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f043 0204 	orr.w	r2, r3, #4
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f7ff fd4a 	bl	80027ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d52:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	60d3      	str	r3, [r2, #12]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <__NVIC_GetPriorityGrouping+0x18>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f003 0307 	and.w	r3, r3, #7
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	db0b      	blt.n	8002dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	f003 021f 	and.w	r2, r3, #31
 8002d9c:	4907      	ldr	r1, [pc, #28]	; (8002dbc <__NVIC_EnableIRQ+0x38>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	2001      	movs	r0, #1
 8002da6:	fa00 f202 	lsl.w	r2, r0, r2
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	e000e100 	.word	0xe000e100

08002dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	6039      	str	r1, [r7, #0]
 8002dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	db0a      	blt.n	8002dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	490c      	ldr	r1, [pc, #48]	; (8002e0c <__NVIC_SetPriority+0x4c>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	0112      	lsls	r2, r2, #4
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	440b      	add	r3, r1
 8002de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de8:	e00a      	b.n	8002e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	4908      	ldr	r1, [pc, #32]	; (8002e10 <__NVIC_SetPriority+0x50>)
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	3b04      	subs	r3, #4
 8002df8:	0112      	lsls	r2, r2, #4
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	761a      	strb	r2, [r3, #24]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000e100 	.word	0xe000e100
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f1c3 0307 	rsb	r3, r3, #7
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	bf28      	it	cs
 8002e32:	2304      	movcs	r3, #4
 8002e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	2b06      	cmp	r3, #6
 8002e3c:	d902      	bls.n	8002e44 <NVIC_EncodePriority+0x30>
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3b03      	subs	r3, #3
 8002e42:	e000      	b.n	8002e46 <NVIC_EncodePriority+0x32>
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	401a      	ands	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	43d9      	mvns	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	4313      	orrs	r3, r2
         );
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3724      	adds	r7, #36	; 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e8c:	d301      	bcc.n	8002e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e00f      	b.n	8002eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <SysTick_Config+0x40>)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e9a:	210f      	movs	r1, #15
 8002e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea0:	f7ff ff8e 	bl	8002dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <SysTick_Config+0x40>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eaa:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <SysTick_Config+0x40>)
 8002eac:	2207      	movs	r2, #7
 8002eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	e000e010 	.word	0xe000e010

08002ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ff29 	bl	8002d20 <__NVIC_SetPriorityGrouping>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b086      	sub	sp, #24
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
 8002ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee8:	f7ff ff3e 	bl	8002d68 <__NVIC_GetPriorityGrouping>
 8002eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	6978      	ldr	r0, [r7, #20]
 8002ef4:	f7ff ff8e 	bl	8002e14 <NVIC_EncodePriority>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efe:	4611      	mov	r1, r2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff5d 	bl	8002dc0 <__NVIC_SetPriority>
}
 8002f06:	bf00      	nop
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	4603      	mov	r3, r0
 8002f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ff31 	bl	8002d84 <__NVIC_EnableIRQ>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff ffa2 	bl	8002e7c <SysTick_Config>
 8002f38:	4603      	mov	r3, r0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f50:	f7ff fab4 	bl	80024bc <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e099      	b.n	8003094 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f80:	e00f      	b.n	8002fa2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f82:	f7ff fa9b 	bl	80024bc <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b05      	cmp	r3, #5
 8002f8e:	d908      	bls.n	8002fa2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e078      	b.n	8003094 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e8      	bne.n	8002f82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4b38      	ldr	r3, [pc, #224]	; (800309c <HAL_DMA_Init+0x158>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d107      	bne.n	800300c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	4313      	orrs	r3, r2
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f023 0307 	bic.w	r3, r3, #7
 8003022:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	2b04      	cmp	r3, #4
 8003034:	d117      	bne.n	8003066 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00e      	beq.n	8003066 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fa91 	bl	8003570 <DMA_CheckFifoParam>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2240      	movs	r2, #64	; 0x40
 8003058:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003062:	2301      	movs	r3, #1
 8003064:	e016      	b.n	8003094 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fa48 	bl	8003504 <DMA_CalcBaseAndBitshift>
 8003074:	4603      	mov	r3, r0
 8003076:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	223f      	movs	r2, #63	; 0x3f
 800307e:	409a      	lsls	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	f010803f 	.word	0xf010803f

080030a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_DMA_Start_IT+0x26>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e040      	b.n	8003148 <HAL_DMA_Start_IT+0xa8>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d12f      	bne.n	800313a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2202      	movs	r2, #2
 80030de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f9da 	bl	80034a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f8:	223f      	movs	r2, #63	; 0x3f
 80030fa:	409a      	lsls	r2, r3
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0216 	orr.w	r2, r2, #22
 800310e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0208 	orr.w	r2, r2, #8
 8003126:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	e005      	b.n	8003146 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003142:	2302      	movs	r3, #2
 8003144:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003146:	7dfb      	ldrb	r3, [r7, #23]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d004      	beq.n	800316e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2280      	movs	r2, #128	; 0x80
 8003168:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e00c      	b.n	8003188 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2205      	movs	r2, #5
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0201 	bic.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031a0:	4b92      	ldr	r3, [pc, #584]	; (80033ec <HAL_DMA_IRQHandler+0x258>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a92      	ldr	r2, [pc, #584]	; (80033f0 <HAL_DMA_IRQHandler+0x25c>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	0a9b      	lsrs	r3, r3, #10
 80031ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031be:	2208      	movs	r2, #8
 80031c0:	409a      	lsls	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01a      	beq.n	8003200 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d013      	beq.n	8003200 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0204 	bic.w	r2, r2, #4
 80031e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ec:	2208      	movs	r2, #8
 80031ee:	409a      	lsls	r2, r3
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	f043 0201 	orr.w	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003204:	2201      	movs	r2, #1
 8003206:	409a      	lsls	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d012      	beq.n	8003236 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003222:	2201      	movs	r2, #1
 8003224:	409a      	lsls	r2, r3
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322e:	f043 0202 	orr.w	r2, r3, #2
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323a:	2204      	movs	r2, #4
 800323c:	409a      	lsls	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4013      	ands	r3, r2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d012      	beq.n	800326c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00b      	beq.n	800326c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003258:	2204      	movs	r2, #4
 800325a:	409a      	lsls	r2, r3
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003264:	f043 0204 	orr.w	r2, r3, #4
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003270:	2210      	movs	r2, #16
 8003272:	409a      	lsls	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d043      	beq.n	8003304 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d03c      	beq.n	8003304 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328e:	2210      	movs	r2, #16
 8003290:	409a      	lsls	r2, r3
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d018      	beq.n	80032d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d108      	bne.n	80032c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d024      	beq.n	8003304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4798      	blx	r3
 80032c2:	e01f      	b.n	8003304 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d01b      	beq.n	8003304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	4798      	blx	r3
 80032d4:	e016      	b.n	8003304 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d107      	bne.n	80032f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0208 	bic.w	r2, r2, #8
 80032f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	2220      	movs	r2, #32
 800330a:	409a      	lsls	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 808e 	beq.w	8003432 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 8086 	beq.w	8003432 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	2220      	movs	r2, #32
 800332c:	409a      	lsls	r2, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b05      	cmp	r3, #5
 800333c:	d136      	bne.n	80033ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0216 	bic.w	r2, r2, #22
 800334c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800335c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d103      	bne.n	800336e <HAL_DMA_IRQHandler+0x1da>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336a:	2b00      	cmp	r3, #0
 800336c:	d007      	beq.n	800337e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0208 	bic.w	r2, r2, #8
 800337c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	223f      	movs	r2, #63	; 0x3f
 8003384:	409a      	lsls	r2, r3
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d07d      	beq.n	800349e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	4798      	blx	r3
        }
        return;
 80033aa:	e078      	b.n	800349e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01c      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d108      	bne.n	80033da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d030      	beq.n	8003432 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4798      	blx	r3
 80033d8:	e02b      	b.n	8003432 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d027      	beq.n	8003432 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	4798      	blx	r3
 80033ea:	e022      	b.n	8003432 <HAL_DMA_IRQHandler+0x29e>
 80033ec:	2000000c 	.word	0x2000000c
 80033f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10f      	bne.n	8003422 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0210 	bic.w	r2, r2, #16
 8003410:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003436:	2b00      	cmp	r3, #0
 8003438:	d032      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d022      	beq.n	800348c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2205      	movs	r2, #5
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0201 	bic.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	3301      	adds	r3, #1
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	429a      	cmp	r2, r3
 8003468:	d307      	bcc.n	800347a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f2      	bne.n	800345e <HAL_DMA_IRQHandler+0x2ca>
 8003478:	e000      	b.n	800347c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800347a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
 800349c:	e000      	b.n	80034a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800349e:	bf00      	nop
    }
  }
}
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop

080034a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b40      	cmp	r3, #64	; 0x40
 80034d4:	d108      	bne.n	80034e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034e6:	e007      	b.n	80034f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	60da      	str	r2, [r3, #12]
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	3b10      	subs	r3, #16
 8003514:	4a14      	ldr	r2, [pc, #80]	; (8003568 <DMA_CalcBaseAndBitshift+0x64>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800351e:	4a13      	ldr	r2, [pc, #76]	; (800356c <DMA_CalcBaseAndBitshift+0x68>)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4413      	add	r3, r2
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d909      	bls.n	8003546 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	1d1a      	adds	r2, r3, #4
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	659a      	str	r2, [r3, #88]	; 0x58
 8003544:	e007      	b.n	8003556 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800354e:	f023 0303 	bic.w	r3, r3, #3
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	aaaaaaab 	.word	0xaaaaaaab
 800356c:	08006538 	.word	0x08006538

08003570 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d11f      	bne.n	80035ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d855      	bhi.n	800363c <DMA_CheckFifoParam+0xcc>
 8003590:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <DMA_CheckFifoParam+0x28>)
 8003592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003596:	bf00      	nop
 8003598:	080035a9 	.word	0x080035a9
 800359c:	080035bb 	.word	0x080035bb
 80035a0:	080035a9 	.word	0x080035a9
 80035a4:	0800363d 	.word	0x0800363d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d045      	beq.n	8003640 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b8:	e042      	b.n	8003640 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035c2:	d13f      	bne.n	8003644 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c8:	e03c      	b.n	8003644 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d2:	d121      	bne.n	8003618 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d836      	bhi.n	8003648 <DMA_CheckFifoParam+0xd8>
 80035da:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <DMA_CheckFifoParam+0x70>)
 80035dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e0:	080035f1 	.word	0x080035f1
 80035e4:	080035f7 	.word	0x080035f7
 80035e8:	080035f1 	.word	0x080035f1
 80035ec:	08003609 	.word	0x08003609
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
      break;
 80035f4:	e02f      	b.n	8003656 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d024      	beq.n	800364c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003606:	e021      	b.n	800364c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003610:	d11e      	bne.n	8003650 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003616:	e01b      	b.n	8003650 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d902      	bls.n	8003624 <DMA_CheckFifoParam+0xb4>
 800361e:	2b03      	cmp	r3, #3
 8003620:	d003      	beq.n	800362a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003622:	e018      	b.n	8003656 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	73fb      	strb	r3, [r7, #15]
      break;
 8003628:	e015      	b.n	8003656 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00e      	beq.n	8003654 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
      break;
 800363a:	e00b      	b.n	8003654 <DMA_CheckFifoParam+0xe4>
      break;
 800363c:	bf00      	nop
 800363e:	e00a      	b.n	8003656 <DMA_CheckFifoParam+0xe6>
      break;
 8003640:	bf00      	nop
 8003642:	e008      	b.n	8003656 <DMA_CheckFifoParam+0xe6>
      break;
 8003644:	bf00      	nop
 8003646:	e006      	b.n	8003656 <DMA_CheckFifoParam+0xe6>
      break;
 8003648:	bf00      	nop
 800364a:	e004      	b.n	8003656 <DMA_CheckFifoParam+0xe6>
      break;
 800364c:	bf00      	nop
 800364e:	e002      	b.n	8003656 <DMA_CheckFifoParam+0xe6>
      break;   
 8003650:	bf00      	nop
 8003652:	e000      	b.n	8003656 <DMA_CheckFifoParam+0xe6>
      break;
 8003654:	bf00      	nop
    }
  } 
  
  return status; 
 8003656:	7bfb      	ldrb	r3, [r7, #15]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003664:	b480      	push	{r7}
 8003666:	b089      	sub	sp, #36	; 0x24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	e165      	b.n	800394c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003680:	2201      	movs	r2, #1
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4013      	ands	r3, r2
 8003692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	429a      	cmp	r2, r3
 800369a:	f040 8154 	bne.w	8003946 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d00b      	beq.n	80036be <HAL_GPIO_Init+0x5a>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d007      	beq.n	80036be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036b2:	2b11      	cmp	r3, #17
 80036b4:	d003      	beq.n	80036be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b12      	cmp	r3, #18
 80036bc:	d130      	bne.n	8003720 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	2203      	movs	r2, #3
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036f4:	2201      	movs	r2, #1
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 0201 	and.w	r2, r3, #1
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	2203      	movs	r2, #3
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4313      	orrs	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d003      	beq.n	8003760 <HAL_GPIO_Init+0xfc>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b12      	cmp	r3, #18
 800375e:	d123      	bne.n	80037a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	08da      	lsrs	r2, r3, #3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3208      	adds	r2, #8
 8003768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800376c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	220f      	movs	r2, #15
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	08da      	lsrs	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3208      	adds	r2, #8
 80037a2:	69b9      	ldr	r1, [r7, #24]
 80037a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	2203      	movs	r2, #3
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4013      	ands	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0203 	and.w	r2, r3, #3
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80ae 	beq.w	8003946 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	4b5c      	ldr	r3, [pc, #368]	; (8003960 <HAL_GPIO_Init+0x2fc>)
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	4a5b      	ldr	r2, [pc, #364]	; (8003960 <HAL_GPIO_Init+0x2fc>)
 80037f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f8:	6453      	str	r3, [r2, #68]	; 0x44
 80037fa:	4b59      	ldr	r3, [pc, #356]	; (8003960 <HAL_GPIO_Init+0x2fc>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003806:	4a57      	ldr	r2, [pc, #348]	; (8003964 <HAL_GPIO_Init+0x300>)
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	089b      	lsrs	r3, r3, #2
 800380c:	3302      	adds	r3, #2
 800380e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	220f      	movs	r2, #15
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a4e      	ldr	r2, [pc, #312]	; (8003968 <HAL_GPIO_Init+0x304>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d025      	beq.n	800387e <HAL_GPIO_Init+0x21a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a4d      	ldr	r2, [pc, #308]	; (800396c <HAL_GPIO_Init+0x308>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d01f      	beq.n	800387a <HAL_GPIO_Init+0x216>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a4c      	ldr	r2, [pc, #304]	; (8003970 <HAL_GPIO_Init+0x30c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d019      	beq.n	8003876 <HAL_GPIO_Init+0x212>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a4b      	ldr	r2, [pc, #300]	; (8003974 <HAL_GPIO_Init+0x310>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d013      	beq.n	8003872 <HAL_GPIO_Init+0x20e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a4a      	ldr	r2, [pc, #296]	; (8003978 <HAL_GPIO_Init+0x314>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00d      	beq.n	800386e <HAL_GPIO_Init+0x20a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a49      	ldr	r2, [pc, #292]	; (800397c <HAL_GPIO_Init+0x318>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d007      	beq.n	800386a <HAL_GPIO_Init+0x206>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a48      	ldr	r2, [pc, #288]	; (8003980 <HAL_GPIO_Init+0x31c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d101      	bne.n	8003866 <HAL_GPIO_Init+0x202>
 8003862:	2306      	movs	r3, #6
 8003864:	e00c      	b.n	8003880 <HAL_GPIO_Init+0x21c>
 8003866:	2307      	movs	r3, #7
 8003868:	e00a      	b.n	8003880 <HAL_GPIO_Init+0x21c>
 800386a:	2305      	movs	r3, #5
 800386c:	e008      	b.n	8003880 <HAL_GPIO_Init+0x21c>
 800386e:	2304      	movs	r3, #4
 8003870:	e006      	b.n	8003880 <HAL_GPIO_Init+0x21c>
 8003872:	2303      	movs	r3, #3
 8003874:	e004      	b.n	8003880 <HAL_GPIO_Init+0x21c>
 8003876:	2302      	movs	r3, #2
 8003878:	e002      	b.n	8003880 <HAL_GPIO_Init+0x21c>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <HAL_GPIO_Init+0x21c>
 800387e:	2300      	movs	r3, #0
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	f002 0203 	and.w	r2, r2, #3
 8003886:	0092      	lsls	r2, r2, #2
 8003888:	4093      	lsls	r3, r2
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003890:	4934      	ldr	r1, [pc, #208]	; (8003964 <HAL_GPIO_Init+0x300>)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	089b      	lsrs	r3, r3, #2
 8003896:	3302      	adds	r3, #2
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800389e:	4b39      	ldr	r3, [pc, #228]	; (8003984 <HAL_GPIO_Init+0x320>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038c2:	4a30      	ldr	r2, [pc, #192]	; (8003984 <HAL_GPIO_Init+0x320>)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038c8:	4b2e      	ldr	r3, [pc, #184]	; (8003984 <HAL_GPIO_Init+0x320>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038ec:	4a25      	ldr	r2, [pc, #148]	; (8003984 <HAL_GPIO_Init+0x320>)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038f2:	4b24      	ldr	r3, [pc, #144]	; (8003984 <HAL_GPIO_Init+0x320>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003916:	4a1b      	ldr	r2, [pc, #108]	; (8003984 <HAL_GPIO_Init+0x320>)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_GPIO_Init+0x320>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003940:	4a10      	ldr	r2, [pc, #64]	; (8003984 <HAL_GPIO_Init+0x320>)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3301      	adds	r3, #1
 800394a:	61fb      	str	r3, [r7, #28]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	2b0f      	cmp	r3, #15
 8003950:	f67f ae96 	bls.w	8003680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003954:	bf00      	nop
 8003956:	3724      	adds	r7, #36	; 0x24
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	40023800 	.word	0x40023800
 8003964:	40013800 	.word	0x40013800
 8003968:	40020000 	.word	0x40020000
 800396c:	40020400 	.word	0x40020400
 8003970:	40020800 	.word	0x40020800
 8003974:	40020c00 	.word	0x40020c00
 8003978:	40021000 	.word	0x40021000
 800397c:	40021400 	.word	0x40021400
 8003980:	40021800 	.word	0x40021800
 8003984:	40013c00 	.word	0x40013c00

08003988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	807b      	strh	r3, [r7, #2]
 8003994:	4613      	mov	r3, r2
 8003996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003998:	787b      	ldrb	r3, [r7, #1]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800399e:	887a      	ldrh	r2, [r7, #2]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039a4:	e003      	b.n	80039ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039a6:	887b      	ldrh	r3, [r7, #2]
 80039a8:	041a      	lsls	r2, r3, #16
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	619a      	str	r2, [r3, #24]
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	460b      	mov	r3, r1
 80039c4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	887b      	ldrh	r3, [r7, #2]
 80039cc:	401a      	ands	r2, r3
 80039ce:	887b      	ldrh	r3, [r7, #2]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d104      	bne.n	80039de <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80039d4:	887b      	ldrh	r3, [r7, #2]
 80039d6:	041a      	lsls	r2, r3, #16
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80039dc:	e002      	b.n	80039e4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80039de:	887a      	ldrh	r2, [r7, #2]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	619a      	str	r2, [r3, #24]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	603b      	str	r3, [r7, #0]
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	4a1f      	ldr	r2, [pc, #124]	; (8003a80 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a08:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a16:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x94>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a1c:	f7fe fd4e 	bl	80024bc <HAL_GetTick>
 8003a20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a22:	e009      	b.n	8003a38 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a24:	f7fe fd4a 	bl	80024bc <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a32:	d901      	bls.n	8003a38 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e01f      	b.n	8003a78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a38:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a44:	d1ee      	bne.n	8003a24 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a46:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a4c:	f7fe fd36 	bl	80024bc <HAL_GetTick>
 8003a50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a52:	e009      	b.n	8003a68 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a54:	f7fe fd32 	bl	80024bc <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a62:	d901      	bls.n	8003a68 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e007      	b.n	8003a78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a68:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a74:	d1ee      	bne.n	8003a54 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40023800 	.word	0x40023800
 8003a84:	420e0040 	.word	0x420e0040
 8003a88:	40007000 	.word	0x40007000
 8003a8c:	420e0044 	.word	0x420e0044

08003a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0cc      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa4:	4b68      	ldr	r3, [pc, #416]	; (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 030f 	and.w	r3, r3, #15
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d90c      	bls.n	8003acc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab2:	4b65      	ldr	r3, [pc, #404]	; (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b63      	ldr	r3, [pc, #396]	; (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0b8      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d020      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae4:	4b59      	ldr	r3, [pc, #356]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	4a58      	ldr	r2, [pc, #352]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003afc:	4b53      	ldr	r3, [pc, #332]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4a52      	ldr	r2, [pc, #328]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b08:	4b50      	ldr	r3, [pc, #320]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	494d      	ldr	r1, [pc, #308]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d044      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2e:	4b47      	ldr	r3, [pc, #284]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d119      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e07f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d003      	beq.n	8003b4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d107      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4e:	4b3f      	ldr	r3, [pc, #252]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d109      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e06f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5e:	4b3b      	ldr	r3, [pc, #236]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e067      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b6e:	4b37      	ldr	r3, [pc, #220]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f023 0203 	bic.w	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	4934      	ldr	r1, [pc, #208]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b80:	f7fe fc9c 	bl	80024bc <HAL_GetTick>
 8003b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	e00a      	b.n	8003b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b88:	f7fe fc98 	bl	80024bc <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e04f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	4b2b      	ldr	r3, [pc, #172]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 020c 	and.w	r2, r3, #12
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d1eb      	bne.n	8003b88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb0:	4b25      	ldr	r3, [pc, #148]	; (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d20c      	bcs.n	8003bd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bbe:	4b22      	ldr	r3, [pc, #136]	; (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc6:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e032      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be4:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4916      	ldr	r1, [pc, #88]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c02:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	490e      	ldr	r1, [pc, #56]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c16:	f000 f855 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8003c1a:	4601      	mov	r1, r0
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	4a0a      	ldr	r2, [pc, #40]	; (8003c50 <HAL_RCC_ClockConfig+0x1c0>)
 8003c28:	5cd3      	ldrb	r3, [r2, r3]
 8003c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8003c2e:	4a09      	ldr	r2, [pc, #36]	; (8003c54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c32:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fe fbfc 	bl	8002434 <HAL_InitTick>

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40023c00 	.word	0x40023c00
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	08006520 	.word	0x08006520
 8003c54:	2000000c 	.word	0x2000000c
 8003c58:	20000010 	.word	0x20000010

08003c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c60:	4b03      	ldr	r3, [pc, #12]	; (8003c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c62:	681b      	ldr	r3, [r3, #0]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	2000000c 	.word	0x2000000c

08003c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c78:	f7ff fff0 	bl	8003c5c <HAL_RCC_GetHCLKFreq>
 8003c7c:	4601      	mov	r1, r0
 8003c7e:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	0a9b      	lsrs	r3, r3, #10
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	4a03      	ldr	r2, [pc, #12]	; (8003c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c8a:	5cd3      	ldrb	r3, [r2, r3]
 8003c8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40023800 	.word	0x40023800
 8003c98:	08006530 	.word	0x08006530

08003c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ca0:	f7ff ffdc 	bl	8003c5c <HAL_RCC_GetHCLKFreq>
 8003ca4:	4601      	mov	r1, r0
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	0b5b      	lsrs	r3, r3, #13
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	4a03      	ldr	r2, [pc, #12]	; (8003cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cb2:	5cd3      	ldrb	r3, [r2, r3]
 8003cb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	08006530 	.word	0x08006530

08003cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cde:	4b9f      	ldr	r3, [pc, #636]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x298>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b0c      	cmp	r3, #12
 8003ce8:	f200 8130 	bhi.w	8003f4c <HAL_RCC_GetSysClockFreq+0x288>
 8003cec:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <HAL_RCC_GetSysClockFreq+0x30>)
 8003cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf2:	bf00      	nop
 8003cf4:	08003d29 	.word	0x08003d29
 8003cf8:	08003f4d 	.word	0x08003f4d
 8003cfc:	08003f4d 	.word	0x08003f4d
 8003d00:	08003f4d 	.word	0x08003f4d
 8003d04:	08003d2f 	.word	0x08003d2f
 8003d08:	08003f4d 	.word	0x08003f4d
 8003d0c:	08003f4d 	.word	0x08003f4d
 8003d10:	08003f4d 	.word	0x08003f4d
 8003d14:	08003d35 	.word	0x08003d35
 8003d18:	08003f4d 	.word	0x08003f4d
 8003d1c:	08003f4d 	.word	0x08003f4d
 8003d20:	08003f4d 	.word	0x08003f4d
 8003d24:	08003e43 	.word	0x08003e43
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d28:	4b8d      	ldr	r3, [pc, #564]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x29c>)
 8003d2a:	613b      	str	r3, [r7, #16]
       break;
 8003d2c:	e111      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d2e:	4b8d      	ldr	r3, [pc, #564]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003d30:	613b      	str	r3, [r7, #16]
      break;
 8003d32:	e10e      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d34:	4b89      	ldr	r3, [pc, #548]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x298>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d3c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d3e:	4b87      	ldr	r3, [pc, #540]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x298>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d023      	beq.n	8003d92 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d4a:	4b84      	ldr	r3, [pc, #528]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x298>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	099b      	lsrs	r3, r3, #6
 8003d50:	f04f 0400 	mov.w	r4, #0
 8003d54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	ea03 0501 	and.w	r5, r3, r1
 8003d60:	ea04 0602 	and.w	r6, r4, r2
 8003d64:	4a7f      	ldr	r2, [pc, #508]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003d66:	fb02 f106 	mul.w	r1, r2, r6
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	fb02 f205 	mul.w	r2, r2, r5
 8003d70:	440a      	add	r2, r1
 8003d72:	497c      	ldr	r1, [pc, #496]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003d74:	fba5 0101 	umull	r0, r1, r5, r1
 8003d78:	1853      	adds	r3, r2, r1
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f04f 0400 	mov.w	r4, #0
 8003d82:	461a      	mov	r2, r3
 8003d84:	4623      	mov	r3, r4
 8003d86:	f7fc fe7d 	bl	8000a84 <__aeabi_uldivmod>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	460c      	mov	r4, r1
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	e049      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d92:	4b72      	ldr	r3, [pc, #456]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x298>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	099b      	lsrs	r3, r3, #6
 8003d98:	f04f 0400 	mov.w	r4, #0
 8003d9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	ea03 0501 	and.w	r5, r3, r1
 8003da8:	ea04 0602 	and.w	r6, r4, r2
 8003dac:	4629      	mov	r1, r5
 8003dae:	4632      	mov	r2, r6
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	f04f 0400 	mov.w	r4, #0
 8003db8:	0154      	lsls	r4, r2, #5
 8003dba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dbe:	014b      	lsls	r3, r1, #5
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4622      	mov	r2, r4
 8003dc4:	1b49      	subs	r1, r1, r5
 8003dc6:	eb62 0206 	sbc.w	r2, r2, r6
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	f04f 0400 	mov.w	r4, #0
 8003dd2:	0194      	lsls	r4, r2, #6
 8003dd4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003dd8:	018b      	lsls	r3, r1, #6
 8003dda:	1a5b      	subs	r3, r3, r1
 8003ddc:	eb64 0402 	sbc.w	r4, r4, r2
 8003de0:	f04f 0100 	mov.w	r1, #0
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	00e2      	lsls	r2, r4, #3
 8003dea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dee:	00d9      	lsls	r1, r3, #3
 8003df0:	460b      	mov	r3, r1
 8003df2:	4614      	mov	r4, r2
 8003df4:	195b      	adds	r3, r3, r5
 8003df6:	eb44 0406 	adc.w	r4, r4, r6
 8003dfa:	f04f 0100 	mov.w	r1, #0
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	02a2      	lsls	r2, r4, #10
 8003e04:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e08:	0299      	lsls	r1, r3, #10
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4614      	mov	r4, r2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	4621      	mov	r1, r4
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f04f 0400 	mov.w	r4, #0
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4623      	mov	r3, r4
 8003e1c:	f7fc fe32 	bl	8000a84 <__aeabi_uldivmod>
 8003e20:	4603      	mov	r3, r0
 8003e22:	460c      	mov	r4, r1
 8003e24:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e26:	4b4d      	ldr	r3, [pc, #308]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x298>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	0c1b      	lsrs	r3, r3, #16
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	3301      	adds	r3, #1
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3e:	613b      	str	r3, [r7, #16]
      break;
 8003e40:	e087      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e42:	4b46      	ldr	r3, [pc, #280]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x298>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e4a:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e4c:	4b43      	ldr	r3, [pc, #268]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x298>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d023      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e58:	4b40      	ldr	r3, [pc, #256]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x298>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	099b      	lsrs	r3, r3, #6
 8003e5e:	f04f 0400 	mov.w	r4, #0
 8003e62:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	ea03 0501 	and.w	r5, r3, r1
 8003e6e:	ea04 0602 	and.w	r6, r4, r2
 8003e72:	4a3c      	ldr	r2, [pc, #240]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003e74:	fb02 f106 	mul.w	r1, r2, r6
 8003e78:	2200      	movs	r2, #0
 8003e7a:	fb02 f205 	mul.w	r2, r2, r5
 8003e7e:	440a      	add	r2, r1
 8003e80:	4938      	ldr	r1, [pc, #224]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003e82:	fba5 0101 	umull	r0, r1, r5, r1
 8003e86:	1853      	adds	r3, r2, r1
 8003e88:	4619      	mov	r1, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f04f 0400 	mov.w	r4, #0
 8003e90:	461a      	mov	r2, r3
 8003e92:	4623      	mov	r3, r4
 8003e94:	f7fc fdf6 	bl	8000a84 <__aeabi_uldivmod>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	e049      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea0:	4b2e      	ldr	r3, [pc, #184]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x298>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	099b      	lsrs	r3, r3, #6
 8003ea6:	f04f 0400 	mov.w	r4, #0
 8003eaa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	ea03 0501 	and.w	r5, r3, r1
 8003eb6:	ea04 0602 	and.w	r6, r4, r2
 8003eba:	4629      	mov	r1, r5
 8003ebc:	4632      	mov	r2, r6
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	f04f 0400 	mov.w	r4, #0
 8003ec6:	0154      	lsls	r4, r2, #5
 8003ec8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ecc:	014b      	lsls	r3, r1, #5
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4622      	mov	r2, r4
 8003ed2:	1b49      	subs	r1, r1, r5
 8003ed4:	eb62 0206 	sbc.w	r2, r2, r6
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	f04f 0400 	mov.w	r4, #0
 8003ee0:	0194      	lsls	r4, r2, #6
 8003ee2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ee6:	018b      	lsls	r3, r1, #6
 8003ee8:	1a5b      	subs	r3, r3, r1
 8003eea:	eb64 0402 	sbc.w	r4, r4, r2
 8003eee:	f04f 0100 	mov.w	r1, #0
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	00e2      	lsls	r2, r4, #3
 8003ef8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003efc:	00d9      	lsls	r1, r3, #3
 8003efe:	460b      	mov	r3, r1
 8003f00:	4614      	mov	r4, r2
 8003f02:	195b      	adds	r3, r3, r5
 8003f04:	eb44 0406 	adc.w	r4, r4, r6
 8003f08:	f04f 0100 	mov.w	r1, #0
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	02a2      	lsls	r2, r4, #10
 8003f12:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f16:	0299      	lsls	r1, r3, #10
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4614      	mov	r4, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	4621      	mov	r1, r4
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f04f 0400 	mov.w	r4, #0
 8003f26:	461a      	mov	r2, r3
 8003f28:	4623      	mov	r3, r4
 8003f2a:	f7fc fdab 	bl	8000a84 <__aeabi_uldivmod>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	460c      	mov	r4, r1
 8003f32:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f34:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x298>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	0f1b      	lsrs	r3, r3, #28
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f48:	613b      	str	r3, [r7, #16]
      break;
 8003f4a:	e002      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f4c:	4b04      	ldr	r3, [pc, #16]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x29c>)
 8003f4e:	613b      	str	r3, [r7, #16]
      break;
 8003f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f52:	693b      	ldr	r3, [r7, #16]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	00f42400 	.word	0x00f42400
 8003f64:	017d7840 	.word	0x017d7840

08003f68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8083 	beq.w	8004088 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f82:	4b95      	ldr	r3, [pc, #596]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d019      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f8e:	4b92      	ldr	r3, [pc, #584]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d106      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f9a:	4b8f      	ldr	r3, [pc, #572]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fa8:	4b8b      	ldr	r3, [pc, #556]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fb0:	2b0c      	cmp	r3, #12
 8003fb2:	d112      	bne.n	8003fda <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb4:	4b88      	ldr	r3, [pc, #544]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc0:	d10b      	bne.n	8003fda <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc2:	4b85      	ldr	r3, [pc, #532]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d05b      	beq.n	8004086 <HAL_RCC_OscConfig+0x11e>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d157      	bne.n	8004086 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e216      	b.n	8004408 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe2:	d106      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x8a>
 8003fe4:	4b7c      	ldr	r3, [pc, #496]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a7b      	ldr	r2, [pc, #492]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8003fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	e01d      	b.n	800402e <HAL_RCC_OscConfig+0xc6>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ffa:	d10c      	bne.n	8004016 <HAL_RCC_OscConfig+0xae>
 8003ffc:	4b76      	ldr	r3, [pc, #472]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a75      	ldr	r2, [pc, #468]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8004002:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4b73      	ldr	r3, [pc, #460]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a72      	ldr	r2, [pc, #456]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 800400e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	e00b      	b.n	800402e <HAL_RCC_OscConfig+0xc6>
 8004016:	4b70      	ldr	r3, [pc, #448]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a6f      	ldr	r2, [pc, #444]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 800401c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	4b6d      	ldr	r3, [pc, #436]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a6c      	ldr	r2, [pc, #432]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8004028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800402c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d013      	beq.n	800405e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004036:	f7fe fa41 	bl	80024bc <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800403e:	f7fe fa3d 	bl	80024bc <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b64      	cmp	r3, #100	; 0x64
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e1db      	b.n	8004408 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004050:	4b61      	ldr	r3, [pc, #388]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0f0      	beq.n	800403e <HAL_RCC_OscConfig+0xd6>
 800405c:	e014      	b.n	8004088 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405e:	f7fe fa2d 	bl	80024bc <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004066:	f7fe fa29 	bl	80024bc <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b64      	cmp	r3, #100	; 0x64
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e1c7      	b.n	8004408 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004078:	4b57      	ldr	r3, [pc, #348]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f0      	bne.n	8004066 <HAL_RCC_OscConfig+0xfe>
 8004084:	e000      	b.n	8004088 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004086:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d06f      	beq.n	8004174 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004094:	4b50      	ldr	r3, [pc, #320]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 030c 	and.w	r3, r3, #12
 800409c:	2b00      	cmp	r3, #0
 800409e:	d017      	beq.n	80040d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040a0:	4b4d      	ldr	r3, [pc, #308]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d105      	bne.n	80040b8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040ac:	4b4a      	ldr	r3, [pc, #296]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00b      	beq.n	80040d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040b8:	4b47      	ldr	r3, [pc, #284]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040c0:	2b0c      	cmp	r3, #12
 80040c2:	d11c      	bne.n	80040fe <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040c4:	4b44      	ldr	r3, [pc, #272]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d116      	bne.n	80040fe <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d0:	4b41      	ldr	r3, [pc, #260]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_OscConfig+0x180>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e18f      	b.n	8004408 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e8:	4b3b      	ldr	r3, [pc, #236]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	4938      	ldr	r1, [pc, #224]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040fc:	e03a      	b.n	8004174 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d020      	beq.n	8004148 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004106:	4b35      	ldr	r3, [pc, #212]	; (80041dc <HAL_RCC_OscConfig+0x274>)
 8004108:	2201      	movs	r2, #1
 800410a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7fe f9d6 	bl	80024bc <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004114:	f7fe f9d2 	bl	80024bc <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e170      	b.n	8004408 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004126:	4b2c      	ldr	r3, [pc, #176]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004132:	4b29      	ldr	r3, [pc, #164]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4925      	ldr	r1, [pc, #148]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8004142:	4313      	orrs	r3, r2
 8004144:	600b      	str	r3, [r1, #0]
 8004146:	e015      	b.n	8004174 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004148:	4b24      	ldr	r3, [pc, #144]	; (80041dc <HAL_RCC_OscConfig+0x274>)
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414e:	f7fe f9b5 	bl	80024bc <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004156:	f7fe f9b1 	bl	80024bc <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e14f      	b.n	8004408 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004168:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1f0      	bne.n	8004156 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b00      	cmp	r3, #0
 800417e:	d037      	beq.n	80041f0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d016      	beq.n	80041b6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004188:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <HAL_RCC_OscConfig+0x278>)
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418e:	f7fe f995 	bl	80024bc <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004196:	f7fe f991 	bl	80024bc <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e12f      	b.n	8004408 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 80041aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x22e>
 80041b4:	e01c      	b.n	80041f0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b6:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <HAL_RCC_OscConfig+0x278>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041bc:	f7fe f97e 	bl	80024bc <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c2:	e00f      	b.n	80041e4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041c4:	f7fe f97a 	bl	80024bc <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d908      	bls.n	80041e4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e118      	b.n	8004408 <HAL_RCC_OscConfig+0x4a0>
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800
 80041dc:	42470000 	.word	0x42470000
 80041e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e4:	4b8a      	ldr	r3, [pc, #552]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 80041e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e9      	bne.n	80041c4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 8097 	beq.w	800432c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041fe:	2300      	movs	r3, #0
 8004200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004202:	4b83      	ldr	r3, [pc, #524]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10f      	bne.n	800422e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	4b7f      	ldr	r3, [pc, #508]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	4a7e      	ldr	r2, [pc, #504]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 8004218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421c:	6413      	str	r3, [r2, #64]	; 0x40
 800421e:	4b7c      	ldr	r3, [pc, #496]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800422a:	2301      	movs	r3, #1
 800422c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422e:	4b79      	ldr	r3, [pc, #484]	; (8004414 <HAL_RCC_OscConfig+0x4ac>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d118      	bne.n	800426c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800423a:	4b76      	ldr	r3, [pc, #472]	; (8004414 <HAL_RCC_OscConfig+0x4ac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a75      	ldr	r2, [pc, #468]	; (8004414 <HAL_RCC_OscConfig+0x4ac>)
 8004240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004246:	f7fe f939 	bl	80024bc <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424e:	f7fe f935 	bl	80024bc <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e0d3      	b.n	8004408 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004260:	4b6c      	ldr	r3, [pc, #432]	; (8004414 <HAL_RCC_OscConfig+0x4ac>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d106      	bne.n	8004282 <HAL_RCC_OscConfig+0x31a>
 8004274:	4b66      	ldr	r3, [pc, #408]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	4a65      	ldr	r2, [pc, #404]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	6713      	str	r3, [r2, #112]	; 0x70
 8004280:	e01c      	b.n	80042bc <HAL_RCC_OscConfig+0x354>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b05      	cmp	r3, #5
 8004288:	d10c      	bne.n	80042a4 <HAL_RCC_OscConfig+0x33c>
 800428a:	4b61      	ldr	r3, [pc, #388]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4a60      	ldr	r2, [pc, #384]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 8004290:	f043 0304 	orr.w	r3, r3, #4
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
 8004296:	4b5e      	ldr	r3, [pc, #376]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	4a5d      	ldr	r2, [pc, #372]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	6713      	str	r3, [r2, #112]	; 0x70
 80042a2:	e00b      	b.n	80042bc <HAL_RCC_OscConfig+0x354>
 80042a4:	4b5a      	ldr	r3, [pc, #360]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 80042a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a8:	4a59      	ldr	r2, [pc, #356]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	6713      	str	r3, [r2, #112]	; 0x70
 80042b0:	4b57      	ldr	r3, [pc, #348]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 80042b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b4:	4a56      	ldr	r2, [pc, #344]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 80042b6:	f023 0304 	bic.w	r3, r3, #4
 80042ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d015      	beq.n	80042f0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c4:	f7fe f8fa 	bl	80024bc <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ca:	e00a      	b.n	80042e2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042cc:	f7fe f8f6 	bl	80024bc <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e092      	b.n	8004408 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e2:	4b4b      	ldr	r3, [pc, #300]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0ee      	beq.n	80042cc <HAL_RCC_OscConfig+0x364>
 80042ee:	e014      	b.n	800431a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f0:	f7fe f8e4 	bl	80024bc <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f6:	e00a      	b.n	800430e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f8:	f7fe f8e0 	bl	80024bc <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	f241 3288 	movw	r2, #5000	; 0x1388
 8004306:	4293      	cmp	r3, r2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e07c      	b.n	8004408 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430e:	4b40      	ldr	r3, [pc, #256]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1ee      	bne.n	80042f8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800431a:	7dfb      	ldrb	r3, [r7, #23]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d105      	bne.n	800432c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004320:	4b3b      	ldr	r3, [pc, #236]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	4a3a      	ldr	r2, [pc, #232]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 8004326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800432a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d068      	beq.n	8004406 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004334:	4b36      	ldr	r3, [pc, #216]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 030c 	and.w	r3, r3, #12
 800433c:	2b08      	cmp	r3, #8
 800433e:	d060      	beq.n	8004402 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d145      	bne.n	80043d4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004348:	4b33      	ldr	r3, [pc, #204]	; (8004418 <HAL_RCC_OscConfig+0x4b0>)
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434e:	f7fe f8b5 	bl	80024bc <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004356:	f7fe f8b1 	bl	80024bc <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e04f      	b.n	8004408 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004368:	4b29      	ldr	r3, [pc, #164]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1f0      	bne.n	8004356 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69da      	ldr	r2, [r3, #28]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	019b      	lsls	r3, r3, #6
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	3b01      	subs	r3, #1
 800438e:	041b      	lsls	r3, r3, #16
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	061b      	lsls	r3, r3, #24
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	071b      	lsls	r3, r3, #28
 80043a0:	491b      	ldr	r1, [pc, #108]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a6:	4b1c      	ldr	r3, [pc, #112]	; (8004418 <HAL_RCC_OscConfig+0x4b0>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ac:	f7fe f886 	bl	80024bc <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b4:	f7fe f882 	bl	80024bc <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e020      	b.n	8004408 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f0      	beq.n	80043b4 <HAL_RCC_OscConfig+0x44c>
 80043d2:	e018      	b.n	8004406 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d4:	4b10      	ldr	r3, [pc, #64]	; (8004418 <HAL_RCC_OscConfig+0x4b0>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043da:	f7fe f86f 	bl	80024bc <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e2:	f7fe f86b 	bl	80024bc <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e009      	b.n	8004408 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f4:	4b06      	ldr	r3, [pc, #24]	; (8004410 <HAL_RCC_OscConfig+0x4a8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1f0      	bne.n	80043e2 <HAL_RCC_OscConfig+0x47a>
 8004400:	e001      	b.n	8004406 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3718      	adds	r7, #24
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40023800 	.word	0x40023800
 8004414:	40007000 	.word	0x40007000
 8004418:	42470060 	.word	0x42470060

0800441c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e056      	b.n	80044dc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d106      	bne.n	800444e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7fd fde1 	bl	8002010 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004464:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	ea42 0103 	orr.w	r1, r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	0c1b      	lsrs	r3, r3, #16
 80044ac:	f003 0104 	and.w	r1, r3, #4
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	69da      	ldr	r2, [r3, #28]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_SPI_Transmit+0x22>
 8004502:	2302      	movs	r3, #2
 8004504:	e11e      	b.n	8004744 <HAL_SPI_Transmit+0x260>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800450e:	f7fd ffd5 	bl	80024bc <HAL_GetTick>
 8004512:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b01      	cmp	r3, #1
 8004522:	d002      	beq.n	800452a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004524:	2302      	movs	r3, #2
 8004526:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004528:	e103      	b.n	8004732 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <HAL_SPI_Transmit+0x52>
 8004530:	88fb      	ldrh	r3, [r7, #6]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d102      	bne.n	800453c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	77fb      	strb	r3, [r7, #31]
    goto error;
 800453a:	e0fa      	b.n	8004732 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2203      	movs	r2, #3
 8004540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	88fa      	ldrh	r2, [r7, #6]
 800455a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004582:	d107      	bne.n	8004594 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004592:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459e:	2b40      	cmp	r3, #64	; 0x40
 80045a0:	d007      	beq.n	80045b2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ba:	d14b      	bne.n	8004654 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_SPI_Transmit+0xe6>
 80045c4:	8afb      	ldrh	r3, [r7, #22]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d13e      	bne.n	8004648 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	881a      	ldrh	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	1c9a      	adds	r2, r3, #2
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045ee:	e02b      	b.n	8004648 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d112      	bne.n	8004624 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	881a      	ldrh	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	1c9a      	adds	r2, r3, #2
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	86da      	strh	r2, [r3, #54]	; 0x36
 8004622:	e011      	b.n	8004648 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004624:	f7fd ff4a 	bl	80024bc <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d803      	bhi.n	800463c <HAL_SPI_Transmit+0x158>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463a:	d102      	bne.n	8004642 <HAL_SPI_Transmit+0x15e>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d102      	bne.n	8004648 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004646:	e074      	b.n	8004732 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1ce      	bne.n	80045f0 <HAL_SPI_Transmit+0x10c>
 8004652:	e04c      	b.n	80046ee <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_SPI_Transmit+0x17e>
 800465c:	8afb      	ldrh	r3, [r7, #22]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d140      	bne.n	80046e4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	7812      	ldrb	r2, [r2, #0]
 800466e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004688:	e02c      	b.n	80046e4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b02      	cmp	r3, #2
 8004696:	d113      	bne.n	80046c0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	330c      	adds	r3, #12
 80046a2:	7812      	ldrb	r2, [r2, #0]
 80046a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80046be:	e011      	b.n	80046e4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046c0:	f7fd fefc 	bl	80024bc <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d803      	bhi.n	80046d8 <HAL_SPI_Transmit+0x1f4>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d6:	d102      	bne.n	80046de <HAL_SPI_Transmit+0x1fa>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d102      	bne.n	80046e4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046e2:	e026      	b.n	8004732 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1cd      	bne.n	800468a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	6839      	ldr	r1, [r7, #0]
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f894 	bl	8004820 <SPI_EndRxTxTransaction>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	613b      	str	r3, [r7, #16]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	77fb      	strb	r3, [r7, #31]
 800472e:	e000      	b.n	8004732 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004730:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004742:	7ffb      	ldrb	r3, [r7, #31]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3720      	adds	r7, #32
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	4613      	mov	r3, r2
 800475a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800475c:	e04c      	b.n	80047f8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004764:	d048      	beq.n	80047f8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004766:	f7fd fea9 	bl	80024bc <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d902      	bls.n	800477c <SPI_WaitFlagStateUntilTimeout+0x30>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d13d      	bne.n	80047f8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800478a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004794:	d111      	bne.n	80047ba <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800479e:	d004      	beq.n	80047aa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a8:	d107      	bne.n	80047ba <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c2:	d10f      	bne.n	80047e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e00f      	b.n	8004818 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4013      	ands	r3, r2
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	429a      	cmp	r2, r3
 8004806:	bf0c      	ite	eq
 8004808:	2301      	moveq	r3, #1
 800480a:	2300      	movne	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	79fb      	ldrb	r3, [r7, #7]
 8004812:	429a      	cmp	r2, r3
 8004814:	d1a3      	bne.n	800475e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af02      	add	r7, sp, #8
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800482c:	4b1b      	ldr	r3, [pc, #108]	; (800489c <SPI_EndRxTxTransaction+0x7c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a1b      	ldr	r2, [pc, #108]	; (80048a0 <SPI_EndRxTxTransaction+0x80>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	0d5b      	lsrs	r3, r3, #21
 8004838:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800483c:	fb02 f303 	mul.w	r3, r2, r3
 8004840:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800484a:	d112      	bne.n	8004872 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2200      	movs	r2, #0
 8004854:	2180      	movs	r1, #128	; 0x80
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f7ff ff78 	bl	800474c <SPI_WaitFlagStateUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004866:	f043 0220 	orr.w	r2, r3, #32
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e00f      	b.n	8004892 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	3b01      	subs	r3, #1
 800487c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004888:	2b80      	cmp	r3, #128	; 0x80
 800488a:	d0f2      	beq.n	8004872 <SPI_EndRxTxTransaction+0x52>
 800488c:	e000      	b.n	8004890 <SPI_EndRxTxTransaction+0x70>
        break;
 800488e:	bf00      	nop
  }

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	2000000c 	.word	0x2000000c
 80048a0:	165e9f81 	.word	0x165e9f81

080048a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e01d      	b.n	80048f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fd fc3e 	bl	800214c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f000 fb92 	bl	800500c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b085      	sub	sp, #20
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0201 	orr.w	r2, r2, #1
 8004910:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b06      	cmp	r3, #6
 8004922:	d007      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b082      	sub	sp, #8
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e01d      	b.n	8004990 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d106      	bne.n	800496e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f815 	bl	8004998 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2202      	movs	r2, #2
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3304      	adds	r3, #4
 800497e:	4619      	mov	r1, r3
 8004980:	4610      	mov	r0, r2
 8004982:	f000 fb43 	bl	800500c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b0c      	cmp	r3, #12
 80049ba:	d841      	bhi.n	8004a40 <HAL_TIM_IC_Start_IT+0x94>
 80049bc:	a201      	add	r2, pc, #4	; (adr r2, 80049c4 <HAL_TIM_IC_Start_IT+0x18>)
 80049be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c2:	bf00      	nop
 80049c4:	080049f9 	.word	0x080049f9
 80049c8:	08004a41 	.word	0x08004a41
 80049cc:	08004a41 	.word	0x08004a41
 80049d0:	08004a41 	.word	0x08004a41
 80049d4:	08004a0b 	.word	0x08004a0b
 80049d8:	08004a41 	.word	0x08004a41
 80049dc:	08004a41 	.word	0x08004a41
 80049e0:	08004a41 	.word	0x08004a41
 80049e4:	08004a1d 	.word	0x08004a1d
 80049e8:	08004a41 	.word	0x08004a41
 80049ec:	08004a41 	.word	0x08004a41
 80049f0:	08004a41 	.word	0x08004a41
 80049f4:	08004a2f 	.word	0x08004a2f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0202 	orr.w	r2, r2, #2
 8004a06:	60da      	str	r2, [r3, #12]
      break;
 8004a08:	e01b      	b.n	8004a42 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0204 	orr.w	r2, r2, #4
 8004a18:	60da      	str	r2, [r3, #12]
      break;
 8004a1a:	e012      	b.n	8004a42 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0208 	orr.w	r2, r2, #8
 8004a2a:	60da      	str	r2, [r3, #12]
      break;
 8004a2c:	e009      	b.n	8004a42 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0210 	orr.w	r2, r2, #16
 8004a3c:	60da      	str	r2, [r3, #12]
      break;
 8004a3e:	e000      	b.n	8004a42 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004a40:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2201      	movs	r2, #1
 8004a48:	6839      	ldr	r1, [r7, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fd42 	bl	80054d4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b06      	cmp	r3, #6
 8004a60:	d007      	beq.n	8004a72 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0201 	orr.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d122      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d11b      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0202 	mvn.w	r2, #2
 8004aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fd f826 	bl	8001b10 <HAL_TIM_IC_CaptureCallback>
 8004ac4:	e005      	b.n	8004ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fa82 	bl	8004fd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fa89 	bl	8004fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d122      	bne.n	8004b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d11b      	bne.n	8004b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0204 	mvn.w	r2, #4
 8004afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2202      	movs	r2, #2
 8004b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fc fffc 	bl	8001b10 <HAL_TIM_IC_CaptureCallback>
 8004b18:	e005      	b.n	8004b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fa58 	bl	8004fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fa5f 	bl	8004fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d122      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d11b      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0208 	mvn.w	r2, #8
 8004b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2204      	movs	r2, #4
 8004b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fc ffd2 	bl	8001b10 <HAL_TIM_IC_CaptureCallback>
 8004b6c:	e005      	b.n	8004b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fa2e 	bl	8004fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fa35 	bl	8004fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b10      	cmp	r3, #16
 8004b8c:	d122      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d11b      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0210 	mvn.w	r2, #16
 8004ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2208      	movs	r2, #8
 8004baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fc ffa8 	bl	8001b10 <HAL_TIM_IC_CaptureCallback>
 8004bc0:	e005      	b.n	8004bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa04 	bl	8004fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 fa0b 	bl	8004fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d10e      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d107      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0201 	mvn.w	r2, #1
 8004bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f9de 	bl	8004fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	2b80      	cmp	r3, #128	; 0x80
 8004c0c:	d10e      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c18:	2b80      	cmp	r3, #128	; 0x80
 8004c1a:	d107      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fd00 	bl	800562c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b40      	cmp	r3, #64	; 0x40
 8004c38:	d10e      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b40      	cmp	r3, #64	; 0x40
 8004c46:	d107      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f9d0 	bl	8004ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d10e      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0320 	and.w	r3, r3, #32
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d107      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0220 	mvn.w	r2, #32
 8004c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fcca 	bl	8005618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c84:	bf00      	nop
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e08a      	b.n	8004dbc <HAL_TIM_IC_ConfigChannel+0x130>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d11b      	bne.n	8004cf4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	6819      	ldr	r1, [r3, #0]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f000 fa3e 	bl	800514c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 020c 	bic.w	r2, r2, #12
 8004cde:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6999      	ldr	r1, [r3, #24]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	619a      	str	r2, [r3, #24]
 8004cf2:	e05a      	b.n	8004daa <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d11c      	bne.n	8004d34 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	6819      	ldr	r1, [r3, #0]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f000 fac2 	bl	8005292 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699a      	ldr	r2, [r3, #24]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d1c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6999      	ldr	r1, [r3, #24]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	021a      	lsls	r2, r3, #8
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	619a      	str	r2, [r3, #24]
 8004d32:	e03a      	b.n	8004daa <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d11b      	bne.n	8004d72 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6818      	ldr	r0, [r3, #0]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	6819      	ldr	r1, [r3, #0]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f000 fb0f 	bl	800536c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69da      	ldr	r2, [r3, #28]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 020c 	bic.w	r2, r2, #12
 8004d5c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69d9      	ldr	r1, [r3, #28]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	61da      	str	r2, [r3, #28]
 8004d70:	e01b      	b.n	8004daa <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	6819      	ldr	r1, [r3, #0]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f000 fb2f 	bl	80053e4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d94:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69d9      	ldr	r1, [r3, #28]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	021a      	lsls	r2, r3, #8
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_TIM_ConfigClockSource+0x18>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e0a6      	b.n	8004f2a <HAL_TIM_ConfigClockSource+0x166>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b40      	cmp	r3, #64	; 0x40
 8004e12:	d067      	beq.n	8004ee4 <HAL_TIM_ConfigClockSource+0x120>
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	d80b      	bhi.n	8004e30 <HAL_TIM_ConfigClockSource+0x6c>
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d073      	beq.n	8004f04 <HAL_TIM_ConfigClockSource+0x140>
 8004e1c:	2b10      	cmp	r3, #16
 8004e1e:	d802      	bhi.n	8004e26 <HAL_TIM_ConfigClockSource+0x62>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d06f      	beq.n	8004f04 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004e24:	e078      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	d06c      	beq.n	8004f04 <HAL_TIM_ConfigClockSource+0x140>
 8004e2a:	2b30      	cmp	r3, #48	; 0x30
 8004e2c:	d06a      	beq.n	8004f04 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004e2e:	e073      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e30:	2b70      	cmp	r3, #112	; 0x70
 8004e32:	d00d      	beq.n	8004e50 <HAL_TIM_ConfigClockSource+0x8c>
 8004e34:	2b70      	cmp	r3, #112	; 0x70
 8004e36:	d804      	bhi.n	8004e42 <HAL_TIM_ConfigClockSource+0x7e>
 8004e38:	2b50      	cmp	r3, #80	; 0x50
 8004e3a:	d033      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0xe0>
 8004e3c:	2b60      	cmp	r3, #96	; 0x60
 8004e3e:	d041      	beq.n	8004ec4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004e40:	e06a      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e46:	d066      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x152>
 8004e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e4c:	d017      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004e4e:	e063      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	6899      	ldr	r1, [r3, #8]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f000 fb18 	bl	8005494 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e72:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	609a      	str	r2, [r3, #8]
      break;
 8004e7c:	e04c      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6899      	ldr	r1, [r3, #8]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f000 fb01 	bl	8005494 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ea0:	609a      	str	r2, [r3, #8]
      break;
 8004ea2:	e039      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	6859      	ldr	r1, [r3, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	f000 f9bf 	bl	8005234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2150      	movs	r1, #80	; 0x50
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 face 	bl	800545e <TIM_ITRx_SetConfig>
      break;
 8004ec2:	e029      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6818      	ldr	r0, [r3, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	6859      	ldr	r1, [r3, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f000 fa1b 	bl	800530c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2160      	movs	r1, #96	; 0x60
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fabe 	bl	800545e <TIM_ITRx_SetConfig>
      break;
 8004ee2:	e019      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	6859      	ldr	r1, [r3, #4]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f000 f99f 	bl	8005234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2140      	movs	r1, #64	; 0x40
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 faae 	bl	800545e <TIM_ITRx_SetConfig>
      break;
 8004f02:	e009      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	f000 faa5 	bl	800545e <TIM_ITRx_SetConfig>
      break;
 8004f14:	e000      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004f16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b0c      	cmp	r3, #12
 8004f46:	d831      	bhi.n	8004fac <HAL_TIM_ReadCapturedValue+0x78>
 8004f48:	a201      	add	r2, pc, #4	; (adr r2, 8004f50 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4e:	bf00      	nop
 8004f50:	08004f85 	.word	0x08004f85
 8004f54:	08004fad 	.word	0x08004fad
 8004f58:	08004fad 	.word	0x08004fad
 8004f5c:	08004fad 	.word	0x08004fad
 8004f60:	08004f8f 	.word	0x08004f8f
 8004f64:	08004fad 	.word	0x08004fad
 8004f68:	08004fad 	.word	0x08004fad
 8004f6c:	08004fad 	.word	0x08004fad
 8004f70:	08004f99 	.word	0x08004f99
 8004f74:	08004fad 	.word	0x08004fad
 8004f78:	08004fad 	.word	0x08004fad
 8004f7c:	08004fad 	.word	0x08004fad
 8004f80:	08004fa3 	.word	0x08004fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8a:	60fb      	str	r3, [r7, #12]

      break;
 8004f8c:	e00f      	b.n	8004fae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	60fb      	str	r3, [r7, #12]

      break;
 8004f96:	e00a      	b.n	8004fae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9e:	60fb      	str	r3, [r7, #12]

      break;
 8004fa0:	e005      	b.n	8004fae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	60fb      	str	r3, [r7, #12]

      break;
 8004faa:	e000      	b.n	8004fae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004fac:	bf00      	nop
  }

  return tmpreg;
 8004fae:	68fb      	ldr	r3, [r7, #12]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a40      	ldr	r2, [pc, #256]	; (8005120 <TIM_Base_SetConfig+0x114>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d013      	beq.n	800504c <TIM_Base_SetConfig+0x40>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502a:	d00f      	beq.n	800504c <TIM_Base_SetConfig+0x40>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a3d      	ldr	r2, [pc, #244]	; (8005124 <TIM_Base_SetConfig+0x118>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00b      	beq.n	800504c <TIM_Base_SetConfig+0x40>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a3c      	ldr	r2, [pc, #240]	; (8005128 <TIM_Base_SetConfig+0x11c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d007      	beq.n	800504c <TIM_Base_SetConfig+0x40>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a3b      	ldr	r2, [pc, #236]	; (800512c <TIM_Base_SetConfig+0x120>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d003      	beq.n	800504c <TIM_Base_SetConfig+0x40>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a3a      	ldr	r2, [pc, #232]	; (8005130 <TIM_Base_SetConfig+0x124>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d108      	bne.n	800505e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a2f      	ldr	r2, [pc, #188]	; (8005120 <TIM_Base_SetConfig+0x114>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d02b      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506c:	d027      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a2c      	ldr	r2, [pc, #176]	; (8005124 <TIM_Base_SetConfig+0x118>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d023      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a2b      	ldr	r2, [pc, #172]	; (8005128 <TIM_Base_SetConfig+0x11c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d01f      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2a      	ldr	r2, [pc, #168]	; (800512c <TIM_Base_SetConfig+0x120>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01b      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a29      	ldr	r2, [pc, #164]	; (8005130 <TIM_Base_SetConfig+0x124>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d017      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a28      	ldr	r2, [pc, #160]	; (8005134 <TIM_Base_SetConfig+0x128>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a27      	ldr	r2, [pc, #156]	; (8005138 <TIM_Base_SetConfig+0x12c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00f      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a26      	ldr	r2, [pc, #152]	; (800513c <TIM_Base_SetConfig+0x130>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00b      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a25      	ldr	r2, [pc, #148]	; (8005140 <TIM_Base_SetConfig+0x134>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d007      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a24      	ldr	r2, [pc, #144]	; (8005144 <TIM_Base_SetConfig+0x138>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d003      	beq.n	80050be <TIM_Base_SetConfig+0xb2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a23      	ldr	r2, [pc, #140]	; (8005148 <TIM_Base_SetConfig+0x13c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d108      	bne.n	80050d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a0a      	ldr	r2, [pc, #40]	; (8005120 <TIM_Base_SetConfig+0x114>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <TIM_Base_SetConfig+0xf8>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a0c      	ldr	r2, [pc, #48]	; (8005130 <TIM_Base_SetConfig+0x124>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d103      	bne.n	800510c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	615a      	str	r2, [r3, #20]
}
 8005112:	bf00      	nop
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40010000 	.word	0x40010000
 8005124:	40000400 	.word	0x40000400
 8005128:	40000800 	.word	0x40000800
 800512c:	40000c00 	.word	0x40000c00
 8005130:	40010400 	.word	0x40010400
 8005134:	40014000 	.word	0x40014000
 8005138:	40014400 	.word	0x40014400
 800513c:	40014800 	.word	0x40014800
 8005140:	40001800 	.word	0x40001800
 8005144:	40001c00 	.word	0x40001c00
 8005148:	40002000 	.word	0x40002000

0800514c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	f023 0201 	bic.w	r2, r3, #1
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4a28      	ldr	r2, [pc, #160]	; (8005218 <TIM_TI1_SetConfig+0xcc>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d01b      	beq.n	80051b2 <TIM_TI1_SetConfig+0x66>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005180:	d017      	beq.n	80051b2 <TIM_TI1_SetConfig+0x66>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4a25      	ldr	r2, [pc, #148]	; (800521c <TIM_TI1_SetConfig+0xd0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d013      	beq.n	80051b2 <TIM_TI1_SetConfig+0x66>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4a24      	ldr	r2, [pc, #144]	; (8005220 <TIM_TI1_SetConfig+0xd4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00f      	beq.n	80051b2 <TIM_TI1_SetConfig+0x66>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4a23      	ldr	r2, [pc, #140]	; (8005224 <TIM_TI1_SetConfig+0xd8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00b      	beq.n	80051b2 <TIM_TI1_SetConfig+0x66>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4a22      	ldr	r2, [pc, #136]	; (8005228 <TIM_TI1_SetConfig+0xdc>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d007      	beq.n	80051b2 <TIM_TI1_SetConfig+0x66>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4a21      	ldr	r2, [pc, #132]	; (800522c <TIM_TI1_SetConfig+0xe0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_TI1_SetConfig+0x66>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4a20      	ldr	r2, [pc, #128]	; (8005230 <TIM_TI1_SetConfig+0xe4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d101      	bne.n	80051b6 <TIM_TI1_SetConfig+0x6a>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <TIM_TI1_SetConfig+0x6c>
 80051b6:	2300      	movs	r3, #0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f023 0303 	bic.w	r3, r3, #3
 80051c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	e003      	b.n	80051d6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f023 030a 	bic.w	r3, r3, #10
 80051f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f003 030a 	and.w	r3, r3, #10
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	621a      	str	r2, [r3, #32]
}
 800520a:	bf00      	nop
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40010000 	.word	0x40010000
 800521c:	40000400 	.word	0x40000400
 8005220:	40000800 	.word	0x40000800
 8005224:	40000c00 	.word	0x40000c00
 8005228:	40010400 	.word	0x40010400
 800522c:	40014000 	.word	0x40014000
 8005230:	40001800 	.word	0x40001800

08005234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	f023 0201 	bic.w	r2, r3, #1
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800525e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f023 030a 	bic.w	r3, r3, #10
 8005270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	621a      	str	r2, [r3, #32]
}
 8005286:	bf00      	nop
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005292:	b480      	push	{r7}
 8005294:	b087      	sub	sp, #28
 8005296:	af00      	add	r7, sp, #0
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	607a      	str	r2, [r7, #4]
 800529e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	f023 0210 	bic.w	r2, r3, #16
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	031b      	lsls	r3, r3, #12
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	621a      	str	r2, [r3, #32]
}
 8005300:	bf00      	nop
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	f023 0210 	bic.w	r2, r3, #16
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005336:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	031b      	lsls	r3, r3, #12
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005348:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	621a      	str	r2, [r3, #32]
}
 8005360:	bf00      	nop
 8005362:	371c      	adds	r7, #28
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f023 0303 	bic.w	r3, r3, #3
 8005398:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80053bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	621a      	str	r2, [r3, #32]
}
 80053d8:	bf00      	nop
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005410:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005422:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	031b      	lsls	r3, r3, #12
 8005428:	b29b      	uxth	r3, r3
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005436:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	031b      	lsls	r3, r3, #12
 800543c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4313      	orrs	r3, r2
 8005444:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	f043 0307 	orr.w	r3, r3, #7
 8005480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	609a      	str	r2, [r3, #8]
}
 8005488:	bf00      	nop
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	021a      	lsls	r2, r3, #8
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	431a      	orrs	r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	609a      	str	r2, [r3, #8]
}
 80054c8:	bf00      	nop
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 031f 	and.w	r3, r3, #31
 80054e6:	2201      	movs	r2, #1
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a1a      	ldr	r2, [r3, #32]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	43db      	mvns	r3, r3
 80054f6:	401a      	ands	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a1a      	ldr	r2, [r3, #32]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	fa01 f303 	lsl.w	r3, r1, r3
 800550c:	431a      	orrs	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	621a      	str	r2, [r3, #32]
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
	...

08005520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005534:	2302      	movs	r3, #2
 8005536:	e05a      	b.n	80055ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a21      	ldr	r2, [pc, #132]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d022      	beq.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005584:	d01d      	beq.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1d      	ldr	r2, [pc, #116]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d018      	beq.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1b      	ldr	r2, [pc, #108]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d013      	beq.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1a      	ldr	r2, [pc, #104]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00e      	beq.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a18      	ldr	r2, [pc, #96]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d009      	beq.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a17      	ldr	r2, [pc, #92]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d004      	beq.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a15      	ldr	r2, [pc, #84]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d10c      	bne.n	80055dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40010000 	.word	0x40010000
 8005600:	40000400 	.word	0x40000400
 8005604:	40000800 	.word	0x40000800
 8005608:	40000c00 	.word	0x40000c00
 800560c:	40010400 	.word	0x40010400
 8005610:	40014000 	.word	0x40014000
 8005614:	40001800 	.word	0x40001800

08005618 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e03f      	b.n	80056d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fc fddc 	bl	8002224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2224      	movs	r2, #36	; 0x24
 8005670:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fb97 	bl	8005db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695a      	ldr	r2, [r3, #20]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b088      	sub	sp, #32
 80056de:	af02      	add	r7, sp, #8
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	603b      	str	r3, [r7, #0]
 80056e6:	4613      	mov	r3, r2
 80056e8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	f040 8083 	bne.w	8005802 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <HAL_UART_Transmit+0x2e>
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e07b      	b.n	8005804 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_UART_Transmit+0x40>
 8005716:	2302      	movs	r3, #2
 8005718:	e074      	b.n	8005804 <HAL_UART_Transmit+0x12a>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2221      	movs	r2, #33	; 0x21
 800572c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005730:	f7fc fec4 	bl	80024bc <HAL_GetTick>
 8005734:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	88fa      	ldrh	r2, [r7, #6]
 800573a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	88fa      	ldrh	r2, [r7, #6]
 8005740:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800574a:	e042      	b.n	80057d2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005762:	d122      	bne.n	80057aa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2200      	movs	r2, #0
 800576c:	2180      	movs	r1, #128	; 0x80
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 f9b6 	bl	8005ae0 <UART_WaitOnFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e042      	b.n	8005804 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005790:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d103      	bne.n	80057a2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	3302      	adds	r3, #2
 800579e:	60bb      	str	r3, [r7, #8]
 80057a0:	e017      	b.n	80057d2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	3301      	adds	r3, #1
 80057a6:	60bb      	str	r3, [r7, #8]
 80057a8:	e013      	b.n	80057d2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2200      	movs	r2, #0
 80057b2:	2180      	movs	r1, #128	; 0x80
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f993 	bl	8005ae0 <UART_WaitOnFlagUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e01f      	b.n	8005804 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	60ba      	str	r2, [r7, #8]
 80057ca:	781a      	ldrb	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1b7      	bne.n	800574c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2200      	movs	r2, #0
 80057e4:	2140      	movs	r1, #64	; 0x40
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f97a 	bl	8005ae0 <UART_WaitOnFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e006      	b.n	8005804 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	e000      	b.n	8005804 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005802:	2302      	movs	r3, #2
  }
}
 8005804:	4618      	mov	r0, r3
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	4613      	mov	r3, r2
 8005818:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b20      	cmp	r3, #32
 8005824:	d140      	bne.n	80058a8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_UART_Receive_IT+0x26>
 800582c:	88fb      	ldrh	r3, [r7, #6]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e039      	b.n	80058aa <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_UART_Receive_IT+0x38>
 8005840:	2302      	movs	r3, #2
 8005842:	e032      	b.n	80058aa <HAL_UART_Receive_IT+0x9e>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	88fa      	ldrh	r2, [r7, #6]
 8005856:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	88fa      	ldrh	r2, [r7, #6]
 800585c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2222      	movs	r2, #34	; 0x22
 8005868:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005882:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695a      	ldr	r2, [r3, #20]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0220 	orr.w	r2, r2, #32
 80058a2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	e000      	b.n	80058aa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80058a8:	2302      	movs	r3, #2
  }
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
	...

080058b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80058d8:	2300      	movs	r3, #0
 80058da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10d      	bne.n	800590a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f003 0320 	and.w	r3, r3, #32
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <HAL_UART_IRQHandler+0x52>
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f9d6 	bl	8005cb4 <UART_Receive_IT>
      return;
 8005908:	e0d1      	b.n	8005aae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 80b0 	beq.w	8005a72 <HAL_UART_IRQHandler+0x1ba>
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d105      	bne.n	8005928 <HAL_UART_IRQHandler+0x70>
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 80a5 	beq.w	8005a72 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <HAL_UART_IRQHandler+0x90>
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005940:	f043 0201 	orr.w	r2, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <HAL_UART_IRQHandler+0xb0>
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005960:	f043 0202 	orr.w	r2, r3, #2
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <HAL_UART_IRQHandler+0xd0>
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005980:	f043 0204 	orr.w	r2, r3, #4
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00f      	beq.n	80059b2 <HAL_UART_IRQHandler+0xfa>
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	2b00      	cmp	r3, #0
 800599a:	d104      	bne.n	80059a6 <HAL_UART_IRQHandler+0xee>
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d005      	beq.n	80059b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	f043 0208 	orr.w	r2, r3, #8
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d078      	beq.n	8005aac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d007      	beq.n	80059d4 <HAL_UART_IRQHandler+0x11c>
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f970 	bl	8005cb4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	bf0c      	ite	eq
 80059e2:	2301      	moveq	r3, #1
 80059e4:	2300      	movne	r3, #0
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d102      	bne.n	80059fc <HAL_UART_IRQHandler+0x144>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d031      	beq.n	8005a60 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f8b9 	bl	8005b74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0c:	2b40      	cmp	r3, #64	; 0x40
 8005a0e:	d123      	bne.n	8005a58 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695a      	ldr	r2, [r3, #20]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a1e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d013      	beq.n	8005a50 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2c:	4a21      	ldr	r2, [pc, #132]	; (8005ab4 <HAL_UART_IRQHandler+0x1fc>)
 8005a2e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fd fb8b 	bl	8003150 <HAL_DMA_Abort_IT>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d016      	beq.n	8005a6e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4e:	e00e      	b.n	8005a6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f83b 	bl	8005acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a56:	e00a      	b.n	8005a6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f837 	bl	8005acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5e:	e006      	b.n	8005a6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f833 	bl	8005acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005a6c:	e01e      	b.n	8005aac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a6e:	bf00      	nop
    return;
 8005a70:	e01c      	b.n	8005aac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_UART_IRQHandler+0x1d6>
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f8a6 	bl	8005bd8 <UART_Transmit_IT>
    return;
 8005a8c:	e00f      	b.n	8005aae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <HAL_UART_IRQHandler+0x1f6>
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f8ee 	bl	8005c84 <UART_EndTransmit_IT>
    return;
 8005aa8:	bf00      	nop
 8005aaa:	e000      	b.n	8005aae <HAL_UART_IRQHandler+0x1f6>
    return;
 8005aac:	bf00      	nop
  }
}
 8005aae:	3720      	adds	r7, #32
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	08005bb1 	.word	0x08005bb1

08005ab8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	603b      	str	r3, [r7, #0]
 8005aec:	4613      	mov	r3, r2
 8005aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af0:	e02c      	b.n	8005b4c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af8:	d028      	beq.n	8005b4c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d007      	beq.n	8005b10 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b00:	f7fc fcdc 	bl	80024bc <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d21d      	bcs.n	8005b4c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b1e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695a      	ldr	r2, [r3, #20]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0201 	bic.w	r2, r2, #1
 8005b2e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e00f      	b.n	8005b6c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	4013      	ands	r3, r2
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	bf0c      	ite	eq
 8005b5c:	2301      	moveq	r3, #1
 8005b5e:	2300      	movne	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	461a      	mov	r2, r3
 8005b64:	79fb      	ldrb	r3, [r7, #7]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d0c3      	beq.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b8a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	695a      	ldr	r2, [r3, #20]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0201 	bic.w	r2, r2, #1
 8005b9a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7ff ff7e 	bl	8005acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bd0:	bf00      	nop
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b21      	cmp	r3, #33	; 0x21
 8005bea:	d144      	bne.n	8005c76 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf4:	d11a      	bne.n	8005c2c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c0a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d105      	bne.n	8005c20 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	1c9a      	adds	r2, r3, #2
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	621a      	str	r2, [r3, #32]
 8005c1e:	e00e      	b.n	8005c3e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	621a      	str	r2, [r3, #32]
 8005c2a:	e008      	b.n	8005c3e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	1c59      	adds	r1, r3, #1
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6211      	str	r1, [r2, #32]
 8005c36:	781a      	ldrb	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	3b01      	subs	r3, #1
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10f      	bne.n	8005c72 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	e000      	b.n	8005c78 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005c76:	2302      	movs	r3, #2
  }
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c9a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff ff07 	bl	8005ab8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b22      	cmp	r3, #34	; 0x22
 8005cc6:	d171      	bne.n	8005dac <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd0:	d123      	bne.n	8005d1a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10e      	bne.n	8005cfe <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf6:	1c9a      	adds	r2, r3, #2
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	629a      	str	r2, [r3, #40]	; 0x28
 8005cfc:	e029      	b.n	8005d52 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	629a      	str	r2, [r3, #40]	; 0x28
 8005d18:	e01b      	b.n	8005d52 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6858      	ldr	r0, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2c:	1c59      	adds	r1, r3, #1
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6291      	str	r1, [r2, #40]	; 0x28
 8005d32:	b2c2      	uxtb	r2, r0
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	e00c      	b.n	8005d52 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d44:	1c58      	adds	r0, r3, #1
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	6288      	str	r0, [r1, #40]	; 0x28
 8005d4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	4619      	mov	r1, r3
 8005d60:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d120      	bne.n	8005da8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0220 	bic.w	r2, r2, #32
 8005d74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	695a      	ldr	r2, [r3, #20]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0201 	bic.w	r2, r2, #1
 8005d94:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7fb ff00 	bl	8001ba4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	e002      	b.n	8005dae <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	e000      	b.n	8005dae <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005dac:	2302      	movs	r3, #2
  }
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dbc:	b085      	sub	sp, #20
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005dfa:	f023 030c 	bic.w	r3, r3, #12
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6812      	ldr	r2, [r2, #0]
 8005e02:	68f9      	ldr	r1, [r7, #12]
 8005e04:	430b      	orrs	r3, r1
 8005e06:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e26:	f040 818b 	bne.w	8006140 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4ac1      	ldr	r2, [pc, #772]	; (8006134 <UART_SetConfig+0x37c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d005      	beq.n	8005e40 <UART_SetConfig+0x88>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4abf      	ldr	r2, [pc, #764]	; (8006138 <UART_SetConfig+0x380>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	f040 80bd 	bne.w	8005fba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e40:	f7fd ff2c 	bl	8003c9c <HAL_RCC_GetPCLK2Freq>
 8005e44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	461d      	mov	r5, r3
 8005e4a:	f04f 0600 	mov.w	r6, #0
 8005e4e:	46a8      	mov	r8, r5
 8005e50:	46b1      	mov	r9, r6
 8005e52:	eb18 0308 	adds.w	r3, r8, r8
 8005e56:	eb49 0409 	adc.w	r4, r9, r9
 8005e5a:	4698      	mov	r8, r3
 8005e5c:	46a1      	mov	r9, r4
 8005e5e:	eb18 0805 	adds.w	r8, r8, r5
 8005e62:	eb49 0906 	adc.w	r9, r9, r6
 8005e66:	f04f 0100 	mov.w	r1, #0
 8005e6a:	f04f 0200 	mov.w	r2, #0
 8005e6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e7a:	4688      	mov	r8, r1
 8005e7c:	4691      	mov	r9, r2
 8005e7e:	eb18 0005 	adds.w	r0, r8, r5
 8005e82:	eb49 0106 	adc.w	r1, r9, r6
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	461d      	mov	r5, r3
 8005e8c:	f04f 0600 	mov.w	r6, #0
 8005e90:	196b      	adds	r3, r5, r5
 8005e92:	eb46 0406 	adc.w	r4, r6, r6
 8005e96:	461a      	mov	r2, r3
 8005e98:	4623      	mov	r3, r4
 8005e9a:	f7fa fdf3 	bl	8000a84 <__aeabi_uldivmod>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	460c      	mov	r4, r1
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	4ba5      	ldr	r3, [pc, #660]	; (800613c <UART_SetConfig+0x384>)
 8005ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	461d      	mov	r5, r3
 8005eb4:	f04f 0600 	mov.w	r6, #0
 8005eb8:	46a9      	mov	r9, r5
 8005eba:	46b2      	mov	sl, r6
 8005ebc:	eb19 0309 	adds.w	r3, r9, r9
 8005ec0:	eb4a 040a 	adc.w	r4, sl, sl
 8005ec4:	4699      	mov	r9, r3
 8005ec6:	46a2      	mov	sl, r4
 8005ec8:	eb19 0905 	adds.w	r9, r9, r5
 8005ecc:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ed0:	f04f 0100 	mov.w	r1, #0
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005edc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ee0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ee4:	4689      	mov	r9, r1
 8005ee6:	4692      	mov	sl, r2
 8005ee8:	eb19 0005 	adds.w	r0, r9, r5
 8005eec:	eb4a 0106 	adc.w	r1, sl, r6
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	461d      	mov	r5, r3
 8005ef6:	f04f 0600 	mov.w	r6, #0
 8005efa:	196b      	adds	r3, r5, r5
 8005efc:	eb46 0406 	adc.w	r4, r6, r6
 8005f00:	461a      	mov	r2, r3
 8005f02:	4623      	mov	r3, r4
 8005f04:	f7fa fdbe 	bl	8000a84 <__aeabi_uldivmod>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	4b8b      	ldr	r3, [pc, #556]	; (800613c <UART_SetConfig+0x384>)
 8005f10:	fba3 1302 	umull	r1, r3, r3, r2
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	2164      	movs	r1, #100	; 0x64
 8005f18:	fb01 f303 	mul.w	r3, r1, r3
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	3332      	adds	r3, #50	; 0x32
 8005f22:	4a86      	ldr	r2, [pc, #536]	; (800613c <UART_SetConfig+0x384>)
 8005f24:	fba2 2303 	umull	r2, r3, r2, r3
 8005f28:	095b      	lsrs	r3, r3, #5
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f30:	4498      	add	r8, r3
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	461d      	mov	r5, r3
 8005f36:	f04f 0600 	mov.w	r6, #0
 8005f3a:	46a9      	mov	r9, r5
 8005f3c:	46b2      	mov	sl, r6
 8005f3e:	eb19 0309 	adds.w	r3, r9, r9
 8005f42:	eb4a 040a 	adc.w	r4, sl, sl
 8005f46:	4699      	mov	r9, r3
 8005f48:	46a2      	mov	sl, r4
 8005f4a:	eb19 0905 	adds.w	r9, r9, r5
 8005f4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f52:	f04f 0100 	mov.w	r1, #0
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f66:	4689      	mov	r9, r1
 8005f68:	4692      	mov	sl, r2
 8005f6a:	eb19 0005 	adds.w	r0, r9, r5
 8005f6e:	eb4a 0106 	adc.w	r1, sl, r6
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	461d      	mov	r5, r3
 8005f78:	f04f 0600 	mov.w	r6, #0
 8005f7c:	196b      	adds	r3, r5, r5
 8005f7e:	eb46 0406 	adc.w	r4, r6, r6
 8005f82:	461a      	mov	r2, r3
 8005f84:	4623      	mov	r3, r4
 8005f86:	f7fa fd7d 	bl	8000a84 <__aeabi_uldivmod>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	461a      	mov	r2, r3
 8005f90:	4b6a      	ldr	r3, [pc, #424]	; (800613c <UART_SetConfig+0x384>)
 8005f92:	fba3 1302 	umull	r1, r3, r3, r2
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	2164      	movs	r1, #100	; 0x64
 8005f9a:	fb01 f303 	mul.w	r3, r1, r3
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	00db      	lsls	r3, r3, #3
 8005fa2:	3332      	adds	r3, #50	; 0x32
 8005fa4:	4a65      	ldr	r2, [pc, #404]	; (800613c <UART_SetConfig+0x384>)
 8005fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	f003 0207 	and.w	r2, r3, #7
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4442      	add	r2, r8
 8005fb6:	609a      	str	r2, [r3, #8]
 8005fb8:	e26f      	b.n	800649a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fba:	f7fd fe5b 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8005fbe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	461d      	mov	r5, r3
 8005fc4:	f04f 0600 	mov.w	r6, #0
 8005fc8:	46a8      	mov	r8, r5
 8005fca:	46b1      	mov	r9, r6
 8005fcc:	eb18 0308 	adds.w	r3, r8, r8
 8005fd0:	eb49 0409 	adc.w	r4, r9, r9
 8005fd4:	4698      	mov	r8, r3
 8005fd6:	46a1      	mov	r9, r4
 8005fd8:	eb18 0805 	adds.w	r8, r8, r5
 8005fdc:	eb49 0906 	adc.w	r9, r9, r6
 8005fe0:	f04f 0100 	mov.w	r1, #0
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005fec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ff0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ff4:	4688      	mov	r8, r1
 8005ff6:	4691      	mov	r9, r2
 8005ff8:	eb18 0005 	adds.w	r0, r8, r5
 8005ffc:	eb49 0106 	adc.w	r1, r9, r6
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	461d      	mov	r5, r3
 8006006:	f04f 0600 	mov.w	r6, #0
 800600a:	196b      	adds	r3, r5, r5
 800600c:	eb46 0406 	adc.w	r4, r6, r6
 8006010:	461a      	mov	r2, r3
 8006012:	4623      	mov	r3, r4
 8006014:	f7fa fd36 	bl	8000a84 <__aeabi_uldivmod>
 8006018:	4603      	mov	r3, r0
 800601a:	460c      	mov	r4, r1
 800601c:	461a      	mov	r2, r3
 800601e:	4b47      	ldr	r3, [pc, #284]	; (800613c <UART_SetConfig+0x384>)
 8006020:	fba3 2302 	umull	r2, r3, r3, r2
 8006024:	095b      	lsrs	r3, r3, #5
 8006026:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	461d      	mov	r5, r3
 800602e:	f04f 0600 	mov.w	r6, #0
 8006032:	46a9      	mov	r9, r5
 8006034:	46b2      	mov	sl, r6
 8006036:	eb19 0309 	adds.w	r3, r9, r9
 800603a:	eb4a 040a 	adc.w	r4, sl, sl
 800603e:	4699      	mov	r9, r3
 8006040:	46a2      	mov	sl, r4
 8006042:	eb19 0905 	adds.w	r9, r9, r5
 8006046:	eb4a 0a06 	adc.w	sl, sl, r6
 800604a:	f04f 0100 	mov.w	r1, #0
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006056:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800605a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800605e:	4689      	mov	r9, r1
 8006060:	4692      	mov	sl, r2
 8006062:	eb19 0005 	adds.w	r0, r9, r5
 8006066:	eb4a 0106 	adc.w	r1, sl, r6
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	461d      	mov	r5, r3
 8006070:	f04f 0600 	mov.w	r6, #0
 8006074:	196b      	adds	r3, r5, r5
 8006076:	eb46 0406 	adc.w	r4, r6, r6
 800607a:	461a      	mov	r2, r3
 800607c:	4623      	mov	r3, r4
 800607e:	f7fa fd01 	bl	8000a84 <__aeabi_uldivmod>
 8006082:	4603      	mov	r3, r0
 8006084:	460c      	mov	r4, r1
 8006086:	461a      	mov	r2, r3
 8006088:	4b2c      	ldr	r3, [pc, #176]	; (800613c <UART_SetConfig+0x384>)
 800608a:	fba3 1302 	umull	r1, r3, r3, r2
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	2164      	movs	r1, #100	; 0x64
 8006092:	fb01 f303 	mul.w	r3, r1, r3
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	3332      	adds	r3, #50	; 0x32
 800609c:	4a27      	ldr	r2, [pc, #156]	; (800613c <UART_SetConfig+0x384>)
 800609e:	fba2 2303 	umull	r2, r3, r2, r3
 80060a2:	095b      	lsrs	r3, r3, #5
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060aa:	4498      	add	r8, r3
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	461d      	mov	r5, r3
 80060b0:	f04f 0600 	mov.w	r6, #0
 80060b4:	46a9      	mov	r9, r5
 80060b6:	46b2      	mov	sl, r6
 80060b8:	eb19 0309 	adds.w	r3, r9, r9
 80060bc:	eb4a 040a 	adc.w	r4, sl, sl
 80060c0:	4699      	mov	r9, r3
 80060c2:	46a2      	mov	sl, r4
 80060c4:	eb19 0905 	adds.w	r9, r9, r5
 80060c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80060cc:	f04f 0100 	mov.w	r1, #0
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060e0:	4689      	mov	r9, r1
 80060e2:	4692      	mov	sl, r2
 80060e4:	eb19 0005 	adds.w	r0, r9, r5
 80060e8:	eb4a 0106 	adc.w	r1, sl, r6
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	461d      	mov	r5, r3
 80060f2:	f04f 0600 	mov.w	r6, #0
 80060f6:	196b      	adds	r3, r5, r5
 80060f8:	eb46 0406 	adc.w	r4, r6, r6
 80060fc:	461a      	mov	r2, r3
 80060fe:	4623      	mov	r3, r4
 8006100:	f7fa fcc0 	bl	8000a84 <__aeabi_uldivmod>
 8006104:	4603      	mov	r3, r0
 8006106:	460c      	mov	r4, r1
 8006108:	461a      	mov	r2, r3
 800610a:	4b0c      	ldr	r3, [pc, #48]	; (800613c <UART_SetConfig+0x384>)
 800610c:	fba3 1302 	umull	r1, r3, r3, r2
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	2164      	movs	r1, #100	; 0x64
 8006114:	fb01 f303 	mul.w	r3, r1, r3
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	3332      	adds	r3, #50	; 0x32
 800611e:	4a07      	ldr	r2, [pc, #28]	; (800613c <UART_SetConfig+0x384>)
 8006120:	fba2 2303 	umull	r2, r3, r2, r3
 8006124:	095b      	lsrs	r3, r3, #5
 8006126:	f003 0207 	and.w	r2, r3, #7
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4442      	add	r2, r8
 8006130:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006132:	e1b2      	b.n	800649a <UART_SetConfig+0x6e2>
 8006134:	40011000 	.word	0x40011000
 8006138:	40011400 	.word	0x40011400
 800613c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4ad7      	ldr	r2, [pc, #860]	; (80064a4 <UART_SetConfig+0x6ec>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d005      	beq.n	8006156 <UART_SetConfig+0x39e>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4ad6      	ldr	r2, [pc, #856]	; (80064a8 <UART_SetConfig+0x6f0>)
 8006150:	4293      	cmp	r3, r2
 8006152:	f040 80d1 	bne.w	80062f8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006156:	f7fd fda1 	bl	8003c9c <HAL_RCC_GetPCLK2Freq>
 800615a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	469a      	mov	sl, r3
 8006160:	f04f 0b00 	mov.w	fp, #0
 8006164:	46d0      	mov	r8, sl
 8006166:	46d9      	mov	r9, fp
 8006168:	eb18 0308 	adds.w	r3, r8, r8
 800616c:	eb49 0409 	adc.w	r4, r9, r9
 8006170:	4698      	mov	r8, r3
 8006172:	46a1      	mov	r9, r4
 8006174:	eb18 080a 	adds.w	r8, r8, sl
 8006178:	eb49 090b 	adc.w	r9, r9, fp
 800617c:	f04f 0100 	mov.w	r1, #0
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006188:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800618c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006190:	4688      	mov	r8, r1
 8006192:	4691      	mov	r9, r2
 8006194:	eb1a 0508 	adds.w	r5, sl, r8
 8006198:	eb4b 0609 	adc.w	r6, fp, r9
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	4619      	mov	r1, r3
 80061a2:	f04f 0200 	mov.w	r2, #0
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	f04f 0400 	mov.w	r4, #0
 80061ae:	0094      	lsls	r4, r2, #2
 80061b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061b4:	008b      	lsls	r3, r1, #2
 80061b6:	461a      	mov	r2, r3
 80061b8:	4623      	mov	r3, r4
 80061ba:	4628      	mov	r0, r5
 80061bc:	4631      	mov	r1, r6
 80061be:	f7fa fc61 	bl	8000a84 <__aeabi_uldivmod>
 80061c2:	4603      	mov	r3, r0
 80061c4:	460c      	mov	r4, r1
 80061c6:	461a      	mov	r2, r3
 80061c8:	4bb8      	ldr	r3, [pc, #736]	; (80064ac <UART_SetConfig+0x6f4>)
 80061ca:	fba3 2302 	umull	r2, r3, r3, r2
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	469b      	mov	fp, r3
 80061d8:	f04f 0c00 	mov.w	ip, #0
 80061dc:	46d9      	mov	r9, fp
 80061de:	46e2      	mov	sl, ip
 80061e0:	eb19 0309 	adds.w	r3, r9, r9
 80061e4:	eb4a 040a 	adc.w	r4, sl, sl
 80061e8:	4699      	mov	r9, r3
 80061ea:	46a2      	mov	sl, r4
 80061ec:	eb19 090b 	adds.w	r9, r9, fp
 80061f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061f4:	f04f 0100 	mov.w	r1, #0
 80061f8:	f04f 0200 	mov.w	r2, #0
 80061fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006200:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006204:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006208:	4689      	mov	r9, r1
 800620a:	4692      	mov	sl, r2
 800620c:	eb1b 0509 	adds.w	r5, fp, r9
 8006210:	eb4c 060a 	adc.w	r6, ip, sl
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	4619      	mov	r1, r3
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	f04f 0300 	mov.w	r3, #0
 8006222:	f04f 0400 	mov.w	r4, #0
 8006226:	0094      	lsls	r4, r2, #2
 8006228:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800622c:	008b      	lsls	r3, r1, #2
 800622e:	461a      	mov	r2, r3
 8006230:	4623      	mov	r3, r4
 8006232:	4628      	mov	r0, r5
 8006234:	4631      	mov	r1, r6
 8006236:	f7fa fc25 	bl	8000a84 <__aeabi_uldivmod>
 800623a:	4603      	mov	r3, r0
 800623c:	460c      	mov	r4, r1
 800623e:	461a      	mov	r2, r3
 8006240:	4b9a      	ldr	r3, [pc, #616]	; (80064ac <UART_SetConfig+0x6f4>)
 8006242:	fba3 1302 	umull	r1, r3, r3, r2
 8006246:	095b      	lsrs	r3, r3, #5
 8006248:	2164      	movs	r1, #100	; 0x64
 800624a:	fb01 f303 	mul.w	r3, r1, r3
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	3332      	adds	r3, #50	; 0x32
 8006254:	4a95      	ldr	r2, [pc, #596]	; (80064ac <UART_SetConfig+0x6f4>)
 8006256:	fba2 2303 	umull	r2, r3, r2, r3
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006260:	4498      	add	r8, r3
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	469b      	mov	fp, r3
 8006266:	f04f 0c00 	mov.w	ip, #0
 800626a:	46d9      	mov	r9, fp
 800626c:	46e2      	mov	sl, ip
 800626e:	eb19 0309 	adds.w	r3, r9, r9
 8006272:	eb4a 040a 	adc.w	r4, sl, sl
 8006276:	4699      	mov	r9, r3
 8006278:	46a2      	mov	sl, r4
 800627a:	eb19 090b 	adds.w	r9, r9, fp
 800627e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006282:	f04f 0100 	mov.w	r1, #0
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800628e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006292:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006296:	4689      	mov	r9, r1
 8006298:	4692      	mov	sl, r2
 800629a:	eb1b 0509 	adds.w	r5, fp, r9
 800629e:	eb4c 060a 	adc.w	r6, ip, sl
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	4619      	mov	r1, r3
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	f04f 0300 	mov.w	r3, #0
 80062b0:	f04f 0400 	mov.w	r4, #0
 80062b4:	0094      	lsls	r4, r2, #2
 80062b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062ba:	008b      	lsls	r3, r1, #2
 80062bc:	461a      	mov	r2, r3
 80062be:	4623      	mov	r3, r4
 80062c0:	4628      	mov	r0, r5
 80062c2:	4631      	mov	r1, r6
 80062c4:	f7fa fbde 	bl	8000a84 <__aeabi_uldivmod>
 80062c8:	4603      	mov	r3, r0
 80062ca:	460c      	mov	r4, r1
 80062cc:	461a      	mov	r2, r3
 80062ce:	4b77      	ldr	r3, [pc, #476]	; (80064ac <UART_SetConfig+0x6f4>)
 80062d0:	fba3 1302 	umull	r1, r3, r3, r2
 80062d4:	095b      	lsrs	r3, r3, #5
 80062d6:	2164      	movs	r1, #100	; 0x64
 80062d8:	fb01 f303 	mul.w	r3, r1, r3
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	011b      	lsls	r3, r3, #4
 80062e0:	3332      	adds	r3, #50	; 0x32
 80062e2:	4a72      	ldr	r2, [pc, #456]	; (80064ac <UART_SetConfig+0x6f4>)
 80062e4:	fba2 2303 	umull	r2, r3, r2, r3
 80062e8:	095b      	lsrs	r3, r3, #5
 80062ea:	f003 020f 	and.w	r2, r3, #15
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4442      	add	r2, r8
 80062f4:	609a      	str	r2, [r3, #8]
 80062f6:	e0d0      	b.n	800649a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80062f8:	f7fd fcbc 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 80062fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	469a      	mov	sl, r3
 8006302:	f04f 0b00 	mov.w	fp, #0
 8006306:	46d0      	mov	r8, sl
 8006308:	46d9      	mov	r9, fp
 800630a:	eb18 0308 	adds.w	r3, r8, r8
 800630e:	eb49 0409 	adc.w	r4, r9, r9
 8006312:	4698      	mov	r8, r3
 8006314:	46a1      	mov	r9, r4
 8006316:	eb18 080a 	adds.w	r8, r8, sl
 800631a:	eb49 090b 	adc.w	r9, r9, fp
 800631e:	f04f 0100 	mov.w	r1, #0
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800632a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800632e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006332:	4688      	mov	r8, r1
 8006334:	4691      	mov	r9, r2
 8006336:	eb1a 0508 	adds.w	r5, sl, r8
 800633a:	eb4b 0609 	adc.w	r6, fp, r9
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	4619      	mov	r1, r3
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	f04f 0300 	mov.w	r3, #0
 800634c:	f04f 0400 	mov.w	r4, #0
 8006350:	0094      	lsls	r4, r2, #2
 8006352:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006356:	008b      	lsls	r3, r1, #2
 8006358:	461a      	mov	r2, r3
 800635a:	4623      	mov	r3, r4
 800635c:	4628      	mov	r0, r5
 800635e:	4631      	mov	r1, r6
 8006360:	f7fa fb90 	bl	8000a84 <__aeabi_uldivmod>
 8006364:	4603      	mov	r3, r0
 8006366:	460c      	mov	r4, r1
 8006368:	461a      	mov	r2, r3
 800636a:	4b50      	ldr	r3, [pc, #320]	; (80064ac <UART_SetConfig+0x6f4>)
 800636c:	fba3 2302 	umull	r2, r3, r3, r2
 8006370:	095b      	lsrs	r3, r3, #5
 8006372:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	469b      	mov	fp, r3
 800637a:	f04f 0c00 	mov.w	ip, #0
 800637e:	46d9      	mov	r9, fp
 8006380:	46e2      	mov	sl, ip
 8006382:	eb19 0309 	adds.w	r3, r9, r9
 8006386:	eb4a 040a 	adc.w	r4, sl, sl
 800638a:	4699      	mov	r9, r3
 800638c:	46a2      	mov	sl, r4
 800638e:	eb19 090b 	adds.w	r9, r9, fp
 8006392:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006396:	f04f 0100 	mov.w	r1, #0
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063aa:	4689      	mov	r9, r1
 80063ac:	4692      	mov	sl, r2
 80063ae:	eb1b 0509 	adds.w	r5, fp, r9
 80063b2:	eb4c 060a 	adc.w	r6, ip, sl
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	4619      	mov	r1, r3
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	f04f 0300 	mov.w	r3, #0
 80063c4:	f04f 0400 	mov.w	r4, #0
 80063c8:	0094      	lsls	r4, r2, #2
 80063ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063ce:	008b      	lsls	r3, r1, #2
 80063d0:	461a      	mov	r2, r3
 80063d2:	4623      	mov	r3, r4
 80063d4:	4628      	mov	r0, r5
 80063d6:	4631      	mov	r1, r6
 80063d8:	f7fa fb54 	bl	8000a84 <__aeabi_uldivmod>
 80063dc:	4603      	mov	r3, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	461a      	mov	r2, r3
 80063e2:	4b32      	ldr	r3, [pc, #200]	; (80064ac <UART_SetConfig+0x6f4>)
 80063e4:	fba3 1302 	umull	r1, r3, r3, r2
 80063e8:	095b      	lsrs	r3, r3, #5
 80063ea:	2164      	movs	r1, #100	; 0x64
 80063ec:	fb01 f303 	mul.w	r3, r1, r3
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	3332      	adds	r3, #50	; 0x32
 80063f6:	4a2d      	ldr	r2, [pc, #180]	; (80064ac <UART_SetConfig+0x6f4>)
 80063f8:	fba2 2303 	umull	r2, r3, r2, r3
 80063fc:	095b      	lsrs	r3, r3, #5
 80063fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006402:	4498      	add	r8, r3
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	469b      	mov	fp, r3
 8006408:	f04f 0c00 	mov.w	ip, #0
 800640c:	46d9      	mov	r9, fp
 800640e:	46e2      	mov	sl, ip
 8006410:	eb19 0309 	adds.w	r3, r9, r9
 8006414:	eb4a 040a 	adc.w	r4, sl, sl
 8006418:	4699      	mov	r9, r3
 800641a:	46a2      	mov	sl, r4
 800641c:	eb19 090b 	adds.w	r9, r9, fp
 8006420:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006424:	f04f 0100 	mov.w	r1, #0
 8006428:	f04f 0200 	mov.w	r2, #0
 800642c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006430:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006434:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006438:	4689      	mov	r9, r1
 800643a:	4692      	mov	sl, r2
 800643c:	eb1b 0509 	adds.w	r5, fp, r9
 8006440:	eb4c 060a 	adc.w	r6, ip, sl
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	4619      	mov	r1, r3
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	f04f 0300 	mov.w	r3, #0
 8006452:	f04f 0400 	mov.w	r4, #0
 8006456:	0094      	lsls	r4, r2, #2
 8006458:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800645c:	008b      	lsls	r3, r1, #2
 800645e:	461a      	mov	r2, r3
 8006460:	4623      	mov	r3, r4
 8006462:	4628      	mov	r0, r5
 8006464:	4631      	mov	r1, r6
 8006466:	f7fa fb0d 	bl	8000a84 <__aeabi_uldivmod>
 800646a:	4603      	mov	r3, r0
 800646c:	460c      	mov	r4, r1
 800646e:	461a      	mov	r2, r3
 8006470:	4b0e      	ldr	r3, [pc, #56]	; (80064ac <UART_SetConfig+0x6f4>)
 8006472:	fba3 1302 	umull	r1, r3, r3, r2
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	2164      	movs	r1, #100	; 0x64
 800647a:	fb01 f303 	mul.w	r3, r1, r3
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	3332      	adds	r3, #50	; 0x32
 8006484:	4a09      	ldr	r2, [pc, #36]	; (80064ac <UART_SetConfig+0x6f4>)
 8006486:	fba2 2303 	umull	r2, r3, r2, r3
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	f003 020f 	and.w	r2, r3, #15
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4442      	add	r2, r8
 8006496:	609a      	str	r2, [r3, #8]
}
 8006498:	e7ff      	b.n	800649a <UART_SetConfig+0x6e2>
 800649a:	bf00      	nop
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a4:	40011000 	.word	0x40011000
 80064a8:	40011400 	.word	0x40011400
 80064ac:	51eb851f 	.word	0x51eb851f

080064b0 <__libc_init_array>:
 80064b0:	b570      	push	{r4, r5, r6, lr}
 80064b2:	4e0d      	ldr	r6, [pc, #52]	; (80064e8 <__libc_init_array+0x38>)
 80064b4:	4c0d      	ldr	r4, [pc, #52]	; (80064ec <__libc_init_array+0x3c>)
 80064b6:	1ba4      	subs	r4, r4, r6
 80064b8:	10a4      	asrs	r4, r4, #2
 80064ba:	2500      	movs	r5, #0
 80064bc:	42a5      	cmp	r5, r4
 80064be:	d109      	bne.n	80064d4 <__libc_init_array+0x24>
 80064c0:	4e0b      	ldr	r6, [pc, #44]	; (80064f0 <__libc_init_array+0x40>)
 80064c2:	4c0c      	ldr	r4, [pc, #48]	; (80064f4 <__libc_init_array+0x44>)
 80064c4:	f000 f820 	bl	8006508 <_init>
 80064c8:	1ba4      	subs	r4, r4, r6
 80064ca:	10a4      	asrs	r4, r4, #2
 80064cc:	2500      	movs	r5, #0
 80064ce:	42a5      	cmp	r5, r4
 80064d0:	d105      	bne.n	80064de <__libc_init_array+0x2e>
 80064d2:	bd70      	pop	{r4, r5, r6, pc}
 80064d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064d8:	4798      	blx	r3
 80064da:	3501      	adds	r5, #1
 80064dc:	e7ee      	b.n	80064bc <__libc_init_array+0xc>
 80064de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064e2:	4798      	blx	r3
 80064e4:	3501      	adds	r5, #1
 80064e6:	e7f2      	b.n	80064ce <__libc_init_array+0x1e>
 80064e8:	08006548 	.word	0x08006548
 80064ec:	08006548 	.word	0x08006548
 80064f0:	08006548 	.word	0x08006548
 80064f4:	0800654c 	.word	0x0800654c

080064f8 <memset>:
 80064f8:	4402      	add	r2, r0
 80064fa:	4603      	mov	r3, r0
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d100      	bne.n	8006502 <memset+0xa>
 8006500:	4770      	bx	lr
 8006502:	f803 1b01 	strb.w	r1, [r3], #1
 8006506:	e7f9      	b.n	80064fc <memset+0x4>

08006508 <_init>:
 8006508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650a:	bf00      	nop
 800650c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800650e:	bc08      	pop	{r3}
 8006510:	469e      	mov	lr, r3
 8006512:	4770      	bx	lr

08006514 <_fini>:
 8006514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006516:	bf00      	nop
 8006518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800651a:	bc08      	pop	{r3}
 800651c:	469e      	mov	lr, r3
 800651e:	4770      	bx	lr

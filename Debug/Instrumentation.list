
Instrumentation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006228  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080063f0  080063f0  000163f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006410  08006410  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006410  08006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006418  08006418  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006418  08006418  00016418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800641c  0800641c  0001641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000007c  0800649c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  0800649c  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102d2  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023ac  00000000  00000000  0003037e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001008  00000000  00000000  00032730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef8  00000000  00000000  00033738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022c44  00000000  00000000  00034630  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c4b6  00000000  00000000  00057274  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d631c  00000000  00000000  0006372a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00139a46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c0  00000000  00000000  00139ac4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000007c 	.word	0x2000007c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080063d8 	.word	0x080063d8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000080 	.word	0x20000080
 8000204:	080063d8 	.word	0x080063d8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b972 	b.w	8000d40 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9e08      	ldr	r6, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	4688      	mov	r8, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14b      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a82:	428a      	cmp	r2, r1
 8000a84:	4615      	mov	r5, r2
 8000a86:	d967      	bls.n	8000b58 <__udivmoddi4+0xe4>
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	b14a      	cbz	r2, 8000aa2 <__udivmoddi4+0x2e>
 8000a8e:	f1c2 0720 	rsb	r7, r2, #32
 8000a92:	fa01 f302 	lsl.w	r3, r1, r2
 8000a96:	fa20 f707 	lsr.w	r7, r0, r7
 8000a9a:	4095      	lsls	r5, r2
 8000a9c:	ea47 0803 	orr.w	r8, r7, r3
 8000aa0:	4094      	lsls	r4, r2
 8000aa2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aa6:	0c23      	lsrs	r3, r4, #16
 8000aa8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000aac:	fa1f fc85 	uxth.w	ip, r5
 8000ab0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ab4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ab8:	fb07 f10c 	mul.w	r1, r7, ip
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d909      	bls.n	8000ad4 <__udivmoddi4+0x60>
 8000ac0:	18eb      	adds	r3, r5, r3
 8000ac2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ac6:	f080 811b 	bcs.w	8000d00 <__udivmoddi4+0x28c>
 8000aca:	4299      	cmp	r1, r3
 8000acc:	f240 8118 	bls.w	8000d00 <__udivmoddi4+0x28c>
 8000ad0:	3f02      	subs	r7, #2
 8000ad2:	442b      	add	r3, r5
 8000ad4:	1a5b      	subs	r3, r3, r1
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000adc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ae0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ae8:	45a4      	cmp	ip, r4
 8000aea:	d909      	bls.n	8000b00 <__udivmoddi4+0x8c>
 8000aec:	192c      	adds	r4, r5, r4
 8000aee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af2:	f080 8107 	bcs.w	8000d04 <__udivmoddi4+0x290>
 8000af6:	45a4      	cmp	ip, r4
 8000af8:	f240 8104 	bls.w	8000d04 <__udivmoddi4+0x290>
 8000afc:	3802      	subs	r0, #2
 8000afe:	442c      	add	r4, r5
 8000b00:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b04:	eba4 040c 	sub.w	r4, r4, ip
 8000b08:	2700      	movs	r7, #0
 8000b0a:	b11e      	cbz	r6, 8000b14 <__udivmoddi4+0xa0>
 8000b0c:	40d4      	lsrs	r4, r2
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e9c6 4300 	strd	r4, r3, [r6]
 8000b14:	4639      	mov	r1, r7
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d909      	bls.n	8000b32 <__udivmoddi4+0xbe>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	f000 80eb 	beq.w	8000cfa <__udivmoddi4+0x286>
 8000b24:	2700      	movs	r7, #0
 8000b26:	e9c6 0100 	strd	r0, r1, [r6]
 8000b2a:	4638      	mov	r0, r7
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	fab3 f783 	clz	r7, r3
 8000b36:	2f00      	cmp	r7, #0
 8000b38:	d147      	bne.n	8000bca <__udivmoddi4+0x156>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d302      	bcc.n	8000b44 <__udivmoddi4+0xd0>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	f200 80fa 	bhi.w	8000d38 <__udivmoddi4+0x2c4>
 8000b44:	1a84      	subs	r4, r0, r2
 8000b46:	eb61 0303 	sbc.w	r3, r1, r3
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	4698      	mov	r8, r3
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d0e0      	beq.n	8000b14 <__udivmoddi4+0xa0>
 8000b52:	e9c6 4800 	strd	r4, r8, [r6]
 8000b56:	e7dd      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000b58:	b902      	cbnz	r2, 8000b5c <__udivmoddi4+0xe8>
 8000b5a:	deff      	udf	#255	; 0xff
 8000b5c:	fab2 f282 	clz	r2, r2
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	f040 808f 	bne.w	8000c84 <__udivmoddi4+0x210>
 8000b66:	1b49      	subs	r1, r1, r5
 8000b68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6c:	fa1f f885 	uxth.w	r8, r5
 8000b70:	2701      	movs	r7, #1
 8000b72:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b76:	0c23      	lsrs	r3, r4, #16
 8000b78:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b80:	fb08 f10c 	mul.w	r1, r8, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x124>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x122>
 8000b90:	4299      	cmp	r1, r3
 8000b92:	f200 80cd 	bhi.w	8000d30 <__udivmoddi4+0x2bc>
 8000b96:	4684      	mov	ip, r0
 8000b98:	1a59      	subs	r1, r3, r1
 8000b9a:	b2a3      	uxth	r3, r4
 8000b9c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ba0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ba4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ba8:	fb08 f800 	mul.w	r8, r8, r0
 8000bac:	45a0      	cmp	r8, r4
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x14c>
 8000bb0:	192c      	adds	r4, r5, r4
 8000bb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x14a>
 8000bb8:	45a0      	cmp	r8, r4
 8000bba:	f200 80b6 	bhi.w	8000d2a <__udivmoddi4+0x2b6>
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	eba4 0408 	sub.w	r4, r4, r8
 8000bc4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc8:	e79f      	b.n	8000b0a <__udivmoddi4+0x96>
 8000bca:	f1c7 0c20 	rsb	ip, r7, #32
 8000bce:	40bb      	lsls	r3, r7
 8000bd0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bd4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bd8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bdc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000be0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000be4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000be8:	4325      	orrs	r5, r4
 8000bea:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bee:	0c2c      	lsrs	r4, r5, #16
 8000bf0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bf4:	fa1f fa8e 	uxth.w	sl, lr
 8000bf8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bfc:	fb09 f40a 	mul.w	r4, r9, sl
 8000c00:	429c      	cmp	r4, r3
 8000c02:	fa02 f207 	lsl.w	r2, r2, r7
 8000c06:	fa00 f107 	lsl.w	r1, r0, r7
 8000c0a:	d90b      	bls.n	8000c24 <__udivmoddi4+0x1b0>
 8000c0c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c10:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c14:	f080 8087 	bcs.w	8000d26 <__udivmoddi4+0x2b2>
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	f240 8084 	bls.w	8000d26 <__udivmoddi4+0x2b2>
 8000c1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c22:	4473      	add	r3, lr
 8000c24:	1b1b      	subs	r3, r3, r4
 8000c26:	b2ad      	uxth	r5, r5
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c34:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c38:	45a2      	cmp	sl, r4
 8000c3a:	d908      	bls.n	8000c4e <__udivmoddi4+0x1da>
 8000c3c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	d26b      	bcs.n	8000d1e <__udivmoddi4+0x2aa>
 8000c46:	45a2      	cmp	sl, r4
 8000c48:	d969      	bls.n	8000d1e <__udivmoddi4+0x2aa>
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	4474      	add	r4, lr
 8000c4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c52:	fba0 8902 	umull	r8, r9, r0, r2
 8000c56:	eba4 040a 	sub.w	r4, r4, sl
 8000c5a:	454c      	cmp	r4, r9
 8000c5c:	46c2      	mov	sl, r8
 8000c5e:	464b      	mov	r3, r9
 8000c60:	d354      	bcc.n	8000d0c <__udivmoddi4+0x298>
 8000c62:	d051      	beq.n	8000d08 <__udivmoddi4+0x294>
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d069      	beq.n	8000d3c <__udivmoddi4+0x2c8>
 8000c68:	ebb1 050a 	subs.w	r5, r1, sl
 8000c6c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c70:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c74:	40fd      	lsrs	r5, r7
 8000c76:	40fc      	lsrs	r4, r7
 8000c78:	ea4c 0505 	orr.w	r5, ip, r5
 8000c7c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c80:	2700      	movs	r7, #0
 8000c82:	e747      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000c84:	f1c2 0320 	rsb	r3, r2, #32
 8000c88:	fa20 f703 	lsr.w	r7, r0, r3
 8000c8c:	4095      	lsls	r5, r2
 8000c8e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c92:	fa21 f303 	lsr.w	r3, r1, r3
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	4338      	orrs	r0, r7
 8000c9c:	0c01      	lsrs	r1, r0, #16
 8000c9e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ca2:	fa1f f885 	uxth.w	r8, r5
 8000ca6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000caa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cae:	fb07 f308 	mul.w	r3, r7, r8
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb8:	d907      	bls.n	8000cca <__udivmoddi4+0x256>
 8000cba:	1869      	adds	r1, r5, r1
 8000cbc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cc0:	d22f      	bcs.n	8000d22 <__udivmoddi4+0x2ae>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d92d      	bls.n	8000d22 <__udivmoddi4+0x2ae>
 8000cc6:	3f02      	subs	r7, #2
 8000cc8:	4429      	add	r1, r5
 8000cca:	1acb      	subs	r3, r1, r3
 8000ccc:	b281      	uxth	r1, r0
 8000cce:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cda:	fb00 f308 	mul.w	r3, r0, r8
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x27e>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ce8:	d217      	bcs.n	8000d1a <__udivmoddi4+0x2a6>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d915      	bls.n	8000d1a <__udivmoddi4+0x2a6>
 8000cee:	3802      	subs	r0, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1ac9      	subs	r1, r1, r3
 8000cf4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cf8:	e73b      	b.n	8000b72 <__udivmoddi4+0xfe>
 8000cfa:	4637      	mov	r7, r6
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	e709      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000d00:	4607      	mov	r7, r0
 8000d02:	e6e7      	b.n	8000ad4 <__udivmoddi4+0x60>
 8000d04:	4618      	mov	r0, r3
 8000d06:	e6fb      	b.n	8000b00 <__udivmoddi4+0x8c>
 8000d08:	4541      	cmp	r1, r8
 8000d0a:	d2ab      	bcs.n	8000c64 <__udivmoddi4+0x1f0>
 8000d0c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d10:	eb69 020e 	sbc.w	r2, r9, lr
 8000d14:	3801      	subs	r0, #1
 8000d16:	4613      	mov	r3, r2
 8000d18:	e7a4      	b.n	8000c64 <__udivmoddi4+0x1f0>
 8000d1a:	4660      	mov	r0, ip
 8000d1c:	e7e9      	b.n	8000cf2 <__udivmoddi4+0x27e>
 8000d1e:	4618      	mov	r0, r3
 8000d20:	e795      	b.n	8000c4e <__udivmoddi4+0x1da>
 8000d22:	4667      	mov	r7, ip
 8000d24:	e7d1      	b.n	8000cca <__udivmoddi4+0x256>
 8000d26:	4681      	mov	r9, r0
 8000d28:	e77c      	b.n	8000c24 <__udivmoddi4+0x1b0>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	442c      	add	r4, r5
 8000d2e:	e747      	b.n	8000bc0 <__udivmoddi4+0x14c>
 8000d30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d34:	442b      	add	r3, r5
 8000d36:	e72f      	b.n	8000b98 <__udivmoddi4+0x124>
 8000d38:	4638      	mov	r0, r7
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xda>
 8000d3c:	4637      	mov	r7, r6
 8000d3e:	e6e9      	b.n	8000b14 <__udivmoddi4+0xa0>

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <AD9833CalculateRegister>:
 */
#include "ad9833.h"
#include "main.h"


void AD9833CalculateRegister(long frequency, int waveform){
 8000d44:	b480      	push	{r7}
 8000d46:	b087      	sub	sp, #28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]

	float steps_per_Hz = (float)(0x10000000) / refFreq;
 8000d4e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000dd0 <AD9833CalculateRegister+0x8c>
 8000d52:	eddf 6a20 	vldr	s13, [pc, #128]	; 8000dd4 <AD9833CalculateRegister+0x90>
 8000d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d5a:	edc7 7a05 	vstr	s15, [r7, #20]

	unsigned long int FreqWord = frequency * steps_per_Hz;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	ee07 3a90 	vmov	s15, r3
 8000d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d68:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d74:	ee17 3a90 	vmov	r3, s15
 8000d78:	613b      	str	r3, [r7, #16]

	int MSB = ((FreqWord & 0xFFFC000) >> 14);    //Only lower 14 bits are used for data
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	0b9b      	lsrs	r3, r3, #14
 8000d7e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000d82:	60fb      	str	r3, [r7, #12]
	int LSB = (FreqWord & 0x3FFF);
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000d8a:	60bb      	str	r3, [r7, #8]

	//Set control bits 15 and 14 to 0 and 1, respectively, for frequency register 0
	LSB |= 0x4000;
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d92:	60bb      	str	r3, [r7, #8]
	MSB |= 0x4000;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9a:	60fb      	str	r3, [r7, #12]

	registerValues[0] = 0x2100;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <AD9833CalculateRegister+0x94>)
 8000d9e:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 8000da2:	801a      	strh	r2, [r3, #0]
	registerValues[1] = LSB;
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <AD9833CalculateRegister+0x94>)
 8000daa:	805a      	strh	r2, [r3, #2]
	registerValues[2] = MSB;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <AD9833CalculateRegister+0x94>)
 8000db2:	809a      	strh	r2, [r3, #4]
	registerValues[3] = 0xC000;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <AD9833CalculateRegister+0x94>)
 8000db6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000dba:	80da      	strh	r2, [r3, #6]
	registerValues[4] = waveform; // TODO waveform error check
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <AD9833CalculateRegister+0x94>)
 8000dc2:	811a      	strh	r2, [r3, #8]
}
 8000dc4:	bf00      	nop
 8000dc6:	371c      	adds	r7, #28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	4bbebc20 	.word	0x4bbebc20
 8000dd4:	4d800000 	.word	0x4d800000
 8000dd8:	20000124 	.word	0x20000124
 8000ddc:	00000000 	.word	0x00000000

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de6:	f001 f9bd 	bl	8002164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dea:	f000 f9a5 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dee:	f000 fc07 	bl	8001600 <MX_GPIO_Init>
  MX_DMA_Init();
 8000df2:	f000 fbe5 	bl	80015c0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000df6:	f000 fa81 	bl	80012fc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000dfa:	f000 fbb7 	bl	800156c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000dfe:	f000 faed 	bl	80013dc <MX_TIM2_Init>
  MX_ADC1_Init();
 8000e02:	f000 fa0b 	bl	800121c <MX_ADC1_Init>
  MX_SPI2_Init();
 8000e06:	f000 fab1 	bl	800136c <MX_SPI2_Init>
  MX_TIM3_Init();
 8000e0a:	f000 fb61 	bl	80014d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Set All SPI Periperal CS High
  HAL_GPIO_WritePin(PGA_CS_GPIO_Port, PGA_CS_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	48b1      	ldr	r0, [pc, #708]	; (80010d8 <main+0x2f8>)
 8000e14:	f002 fc72 	bl	80036fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2140      	movs	r1, #64	; 0x40
 8000e1c:	48af      	ldr	r0, [pc, #700]	; (80010dc <main+0x2fc>)
 8000e1e:	f002 fc6d 	bl	80036fc <HAL_GPIO_WritePin>

  // Reset AD9833
  HAL_Delay(10);
 8000e22:	200a      	movs	r0, #10
 8000e24:	f001 fa10 	bl	8002248 <HAL_Delay>
  uint16_t resetValue = 0x100;
 8000e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2c:	81fb      	strh	r3, [r7, #14]
  HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2140      	movs	r1, #64	; 0x40
 8000e32:	48aa      	ldr	r0, [pc, #680]	; (80010dc <main+0x2fc>)
 8000e34:	f002 fc62 	bl	80036fc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t*)resetValue, sizeof(resetValue)/sizeof(uint16_t), HAL_MAX_DELAY);
 8000e38:	89fb      	ldrh	r3, [r7, #14]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e40:	2201      	movs	r2, #1
 8000e42:	48a7      	ldr	r0, [pc, #668]	; (80010e0 <main+0x300>)
 8000e44:	f003 fa08 	bl	8004258 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2140      	movs	r1, #64	; 0x40
 8000e4c:	48a3      	ldr	r0, [pc, #652]	; (80010dc <main+0x2fc>)
 8000e4e:	f002 fc55 	bl	80036fc <HAL_GPIO_WritePin>

  // Reset LEDS
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e58:	48a2      	ldr	r0, [pc, #648]	; (80010e4 <main+0x304>)
 8000e5a:	f002 fc4f 	bl	80036fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GRN_LED_GPIO_Port, GRN_LED_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e64:	489f      	ldr	r0, [pc, #636]	; (80010e4 <main+0x304>)
 8000e66:	f002 fc49 	bl	80036fc <HAL_GPIO_WritePin>

  // UART interrupts
  HAL_UART_Receive_IT(&huart2, (uint8_t*)uartRxBytes, 12);
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	499e      	ldr	r1, [pc, #632]	; (80010e8 <main+0x308>)
 8000e6e:	489f      	ldr	r0, [pc, #636]	; (80010ec <main+0x30c>)
 8000e70:	f004 fb86 	bl	8005580 <HAL_UART_Receive_IT>
  //HAL_UART_Receive_DMA(&huart2, (uint8_t*)uartRxBytes, 1);

  // Start timer interrupts
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000e74:	2100      	movs	r1, #0
 8000e76:	489e      	ldr	r0, [pc, #632]	; (80010f0 <main+0x310>)
 8000e78:	f003 fc52 	bl	8004720 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000e7c:	2104      	movs	r1, #4
 8000e7e:	489c      	ldr	r0, [pc, #624]	; (80010f0 <main+0x310>)
 8000e80:	f003 fc4e 	bl	8004720 <HAL_TIM_IC_Start_IT>

  // Start ADC DMA thing
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, 3*ADC_BUF_LEN);
 8000e84:	221e      	movs	r2, #30
 8000e86:	499b      	ldr	r1, [pc, #620]	; (80010f4 <main+0x314>)
 8000e88:	489b      	ldr	r0, [pc, #620]	; (80010f8 <main+0x318>)
 8000e8a:	f001 fa43 	bl	8002314 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim3);
 8000e8e:	489b      	ldr	r0, [pc, #620]	; (80010fc <main+0x31c>)
 8000e90:	f003 fbed 	bl	800466e <HAL_TIM_Base_Start_IT>

  // Set relays low

  HAL_GPIO_WritePin(FB_SW6_GPIO_Port, FB_SW6_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e9a:	488f      	ldr	r0, [pc, #572]	; (80010d8 <main+0x2f8>)
 8000e9c:	f002 fc2e 	bl	80036fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FB_SW5_GPIO_Port, FB_SW5_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea6:	488c      	ldr	r0, [pc, #560]	; (80010d8 <main+0x2f8>)
 8000ea8:	f002 fc28 	bl	80036fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FB_SW4_GPIO_Port, FB_SW4_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb2:	488c      	ldr	r0, [pc, #560]	; (80010e4 <main+0x304>)
 8000eb4:	f002 fc22 	bl	80036fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FB_SW3_GPIO_Port, FB_SW3_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ebe:	4886      	ldr	r0, [pc, #536]	; (80010d8 <main+0x2f8>)
 8000ec0:	f002 fc1c 	bl	80036fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FB_SW2_GPIO_Port, FB_SW2_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2108      	movs	r1, #8
 8000ec8:	4883      	ldr	r0, [pc, #524]	; (80010d8 <main+0x2f8>)
 8000eca:	f002 fc17 	bl	80036fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FB_SW1_GPIO_Port, FB_SW1_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	4881      	ldr	r0, [pc, #516]	; (80010d8 <main+0x2f8>)
 8000ed4:	f002 fc12 	bl	80036fc <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TIM3->CNT = 0;
 8000ed8:	4b89      	ldr	r3, [pc, #548]	; (8001100 <main+0x320>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
	  // Start loop timer

	  rawADC = adc_buf[0][0];
 8000ede:	4b85      	ldr	r3, [pc, #532]	; (80010f4 <main+0x314>)
 8000ee0:	881a      	ldrh	r2, [r3, #0]
 8000ee2:	4b88      	ldr	r3, [pc, #544]	; (8001104 <main+0x324>)
 8000ee4:	801a      	strh	r2, [r3, #0]

	  if (newCaptureValue){
 8000ee6:	4b88      	ldr	r3, [pc, #544]	; (8001108 <main+0x328>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d002      	beq.n	8000ef4 <main+0x114>
		 newCaptureValue = false;
 8000eee:	4b86      	ldr	r3, [pc, #536]	; (8001108 <main+0x328>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
	  }

	  // Send Data Packets to AD9833
	  if(updateSignalFreqFlag == true){
 8000ef4:	4b85      	ldr	r3, [pc, #532]	; (800110c <main+0x32c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00a      	beq.n	8000f12 <main+0x132>
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f02:	4878      	ldr	r0, [pc, #480]	; (80010e4 <main+0x304>)
 8000f04:	f002 fbfa 	bl	80036fc <HAL_GPIO_WritePin>
		  AD9833_Set_Output();
 8000f08:	f000 fdac 	bl	8001a64 <AD9833_Set_Output>
		  updateSignalFreqFlag = false;
 8000f0c:	4b7f      	ldr	r3, [pc, #508]	; (800110c <main+0x32c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
	  }
	  // Update PGA Gain
	  if(updatePGAGainFlag == true){
 8000f12:	4b7f      	ldr	r3, [pc, #508]	; (8001110 <main+0x330>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d00a      	beq.n	8000f30 <main+0x150>
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f20:	4870      	ldr	r0, [pc, #448]	; (80010e4 <main+0x304>)
 8000f22:	f002 fbeb 	bl	80036fc <HAL_GPIO_WritePin>
		  PGA_Set_Gain();
 8000f26:	f000 fdcb 	bl	8001ac0 <PGA_Set_Gain>
		  updatePGAGainFlag = false;
 8000f2a:	4b79      	ldr	r3, [pc, #484]	; (8001110 <main+0x330>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
	  }

	  if(measureFlag == true){
 8000f30:	4b78      	ldr	r3, [pc, #480]	; (8001114 <main+0x334>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d11a      	bne.n	8000f6e <main+0x18e>
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f3e:	4869      	ldr	r0, [pc, #420]	; (80010e4 <main+0x304>)
 8000f40:	f002 fbdc 	bl	80036fc <HAL_GPIO_WritePin>
		  impedanceMag = measureImpedanceMagnitude();
 8000f44:	f000 fbda 	bl	80016fc <measureImpedanceMagnitude>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	4b73      	ldr	r3, [pc, #460]	; (8001118 <main+0x338>)
 8000f4c:	601a      	str	r2, [r3, #0]
		  impedancePhase = measureImpedancePhase();
 8000f4e:	f000 fbed 	bl	800172c <measureImpedancePhase>
 8000f52:	4602      	mov	r2, r0
 8000f54:	4b71      	ldr	r3, [pc, #452]	; (800111c <main+0x33c>)
 8000f56:	601a      	str	r2, [r3, #0]
		  sendImpedanceMessage(impedanceMag, impedancePhase);
 8000f58:	4b6f      	ldr	r3, [pc, #444]	; (8001118 <main+0x338>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b6f      	ldr	r3, [pc, #444]	; (800111c <main+0x33c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4610      	mov	r0, r2
 8000f64:	f000 fbfc 	bl	8001760 <sendImpedanceMessage>
		  measureFlag = false;
 8000f68:	4b6a      	ldr	r3, [pc, #424]	; (8001114 <main+0x334>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
	  }

	  // Toggle LED pin to show we're alive
	  if (loopCounter % 1000 == 0) {
 8000f6e:	4b6c      	ldr	r3, [pc, #432]	; (8001120 <main+0x340>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	4b6c      	ldr	r3, [pc, #432]	; (8001124 <main+0x344>)
 8000f74:	fba3 1302 	umull	r1, r3, r3, r2
 8000f78:	099b      	lsrs	r3, r3, #6
 8000f7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f7e:	fb01 f303 	mul.w	r3, r1, r3
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10a      	bne.n	8000f9e <main+0x1be>
		  HAL_GPIO_TogglePin(GRN_LED_GPIO_Port, GRN_LED_Pin);
 8000f88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f8c:	4855      	ldr	r0, [pc, #340]	; (80010e4 <main+0x304>)
 8000f8e:	f002 fbce 	bl	800372e <HAL_GPIO_TogglePin>
		  sysCount++;
 8000f92:	4b65      	ldr	r3, [pc, #404]	; (8001128 <main+0x348>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4b63      	ldr	r3, [pc, #396]	; (8001128 <main+0x348>)
 8000f9c:	701a      	strb	r2, [r3, #0]
	  }

	  if (loopCounter % 2000 == 0) {
 8000f9e:	4b60      	ldr	r3, [pc, #384]	; (8001120 <main+0x340>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b60      	ldr	r3, [pc, #384]	; (8001124 <main+0x344>)
 8000fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8000fa8:	09db      	lsrs	r3, r3, #7
 8000faa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000fae:	fb01 f303 	mul.w	r3, r1, r3
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d176      	bne.n	80010a6 <main+0x2c6>
		  // Send message
		  float avgADCtemp = 0;
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
		  for (int i = 0; i < ADC_BUF_LEN; i++) {
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	e015      	b.n	8000ff0 <main+0x210>
			  avgADCtemp += adc_buf[i][2];
 8000fc4:	494b      	ldr	r1, [pc, #300]	; (80010f4 <main+0x314>)
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fde:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	edc7 7a05 	vstr	s15, [r7, #20]
		  for (int i = 0; i < ADC_BUF_LEN; i++) {
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	3301      	adds	r3, #1
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2b09      	cmp	r3, #9
 8000ff4:	dde6      	ble.n	8000fc4 <main+0x1e4>
		  }
		  float vTemp = ((3.3*(avgADCtemp / ADC_BUF_LEN)/4096 - 0.76) / 25 + 25);
 8000ff6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ffa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000ffe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001002:	ee16 0a90 	vmov	r0, s13
 8001006:	f7ff fa63 	bl	80004d0 <__aeabi_f2d>
 800100a:	a32f      	add	r3, pc, #188	; (adr r3, 80010c8 <main+0x2e8>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	f7ff fab6 	bl	8000580 <__aeabi_dmul>
 8001014:	4603      	mov	r3, r0
 8001016:	460c      	mov	r4, r1
 8001018:	4618      	mov	r0, r3
 800101a:	4621      	mov	r1, r4
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	4b42      	ldr	r3, [pc, #264]	; (800112c <main+0x34c>)
 8001022:	f7ff fbd7 	bl	80007d4 <__aeabi_ddiv>
 8001026:	4603      	mov	r3, r0
 8001028:	460c      	mov	r4, r1
 800102a:	4618      	mov	r0, r3
 800102c:	4621      	mov	r1, r4
 800102e:	a328      	add	r3, pc, #160	; (adr r3, 80010d0 <main+0x2f0>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff f8ec 	bl	8000210 <__aeabi_dsub>
 8001038:	4603      	mov	r3, r0
 800103a:	460c      	mov	r4, r1
 800103c:	4618      	mov	r0, r3
 800103e:	4621      	mov	r1, r4
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	4b3a      	ldr	r3, [pc, #232]	; (8001130 <main+0x350>)
 8001046:	f7ff fbc5 	bl	80007d4 <__aeabi_ddiv>
 800104a:	4603      	mov	r3, r0
 800104c:	460c      	mov	r4, r1
 800104e:	4618      	mov	r0, r3
 8001050:	4621      	mov	r1, r4
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	4b36      	ldr	r3, [pc, #216]	; (8001130 <main+0x350>)
 8001058:	f7ff f8dc 	bl	8000214 <__adddf3>
 800105c:	4603      	mov	r3, r0
 800105e:	460c      	mov	r4, r1
 8001060:	4618      	mov	r0, r3
 8001062:	4621      	mov	r1, r4
 8001064:	f7ff fc9e 	bl	80009a4 <__aeabi_d2f>
 8001068:	4603      	mov	r3, r0
 800106a:	60bb      	str	r3, [r7, #8]
		  asm("NOP");
 800106c:	bf00      	nop
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800106e:	2201      	movs	r2, #1
 8001070:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001074:	481b      	ldr	r0, [pc, #108]	; (80010e4 <main+0x304>)
 8001076:	f002 fb41 	bl	80036fc <HAL_GPIO_WritePin>
		  uartTxBytes[1] = 0x01;
 800107a:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <main+0x354>)
 800107c:	2201      	movs	r2, #1
 800107e:	705a      	strb	r2, [r3, #1]
		  uartTxBytes[3] = sysCount;
 8001080:	4b29      	ldr	r3, [pc, #164]	; (8001128 <main+0x348>)
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <main+0x354>)
 8001086:	70da      	strb	r2, [r3, #3]
		  uint8_t checksum = makeCheckSum();
 8001088:	f000 fca6 	bl	80019d8 <makeCheckSum>
 800108c:	4603      	mov	r3, r0
 800108e:	71fb      	strb	r3, [r7, #7]
		  uartTxBytes[11] = checksum;
 8001090:	4a28      	ldr	r2, [pc, #160]	; (8001134 <main+0x354>)
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	72d3      	strb	r3, [r2, #11]
		  HAL_UART_Transmit(&huart2, (uint8_t *)uartTxBytes, 12, 1);
 8001096:	2301      	movs	r3, #1
 8001098:	220c      	movs	r2, #12
 800109a:	4926      	ldr	r1, [pc, #152]	; (8001134 <main+0x354>)
 800109c:	4813      	ldr	r0, [pc, #76]	; (80010ec <main+0x30c>)
 800109e:	f004 f9d6 	bl	800544e <HAL_UART_Transmit>


	  // Arbitrary Loop Delay To stop spamming everything
	  //HAL_Delay(10);

	  while (TIM3->CNT < 1000) {
 80010a2:	e000      	b.n	80010a6 <main+0x2c6>
		  // Do nothing
		  asm("NOP");
 80010a4:	bf00      	nop
	  while (TIM3->CNT < 1000) {
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <main+0x320>)
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ae:	d3f9      	bcc.n	80010a4 <main+0x2c4>
	  }
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b6:	480b      	ldr	r0, [pc, #44]	; (80010e4 <main+0x304>)
 80010b8:	f002 fb20 	bl	80036fc <HAL_GPIO_WritePin>
	  loopCounter++;
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <main+0x340>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	4a17      	ldr	r2, [pc, #92]	; (8001120 <main+0x340>)
 80010c4:	6013      	str	r3, [r2, #0]
	  TIM3->CNT = 0;
 80010c6:	e707      	b.n	8000ed8 <main+0xf8>
 80010c8:	66666666 	.word	0x66666666
 80010cc:	400a6666 	.word	0x400a6666
 80010d0:	851eb852 	.word	0x851eb852
 80010d4:	3fe851eb 	.word	0x3fe851eb
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020400 	.word	0x40020400
 80010e0:	20000230 	.word	0x20000230
 80010e4:	40020000 	.word	0x40020000
 80010e8:	200001bc 	.word	0x200001bc
 80010ec:	20000304 	.word	0x20000304
 80010f0:	200002c4 	.word	0x200002c4
 80010f4:	20000288 	.word	0x20000288
 80010f8:	20000174 	.word	0x20000174
 80010fc:	20000130 	.word	0x20000130
 8001100:	40000400 	.word	0x40000400
 8001104:	200001c8 	.word	0x200001c8
 8001108:	200000aa 	.word	0x200000aa
 800110c:	20000098 	.word	0x20000098
 8001110:	20000099 	.word	0x20000099
 8001114:	200000ac 	.word	0x200000ac
 8001118:	200000b0 	.word	0x200000b0
 800111c:	200000b4 	.word	0x200000b4
 8001120:	200000b8 	.word	0x200000b8
 8001124:	10624dd3 	.word	0x10624dd3
 8001128:	200000bc 	.word	0x200000bc
 800112c:	40b00000 	.word	0x40b00000
 8001130:	40390000 	.word	0x40390000
 8001134:	20000000 	.word	0x20000000

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b094      	sub	sp, #80	; 0x50
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	2234      	movs	r2, #52	; 0x34
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f005 f896 	bl	8006278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <SystemClock_Config+0xdc>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	4a2b      	ldr	r2, [pc, #172]	; (8001214 <SystemClock_Config+0xdc>)
 8001166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116a:	6413      	str	r3, [r2, #64]	; 0x40
 800116c:	4b29      	ldr	r3, [pc, #164]	; (8001214 <SystemClock_Config+0xdc>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001178:	2300      	movs	r3, #0
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <SystemClock_Config+0xe0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a25      	ldr	r2, [pc, #148]	; (8001218 <SystemClock_Config+0xe0>)
 8001182:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <SystemClock_Config+0xe0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001194:	2302      	movs	r3, #2
 8001196:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001198:	2301      	movs	r3, #1
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800119c:	2310      	movs	r3, #16
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a0:	2302      	movs	r3, #2
 80011a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a4:	2300      	movs	r3, #0
 80011a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011a8:	2308      	movs	r3, #8
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80011ac:	23b4      	movs	r3, #180	; 0xb4
 80011ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 fd8b 	bl	8003cdc <HAL_RCC_OscConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011cc:	f000 fd06 	bl	8001bdc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011d0:	f002 fac8 	bl	8003764 <HAL_PWREx_EnableOverDrive>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011da:	f000 fcff 	bl	8001bdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011de:	230f      	movs	r3, #15
 80011e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e2:	2302      	movs	r3, #2
 80011e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	2105      	movs	r1, #5
 80011fc:	4618      	mov	r0, r3
 80011fe:	f002 fb01 	bl	8003804 <HAL_RCC_ClockConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001208:	f000 fce8 	bl	8001bdc <Error_Handler>
  }
}
 800120c:	bf00      	nop
 800120e:	3750      	adds	r7, #80	; 0x50
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800
 8001218:	40007000 	.word	0x40007000

0800121c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001222:	463b      	mov	r3, r7
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800122e:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <MX_ADC1_Init+0xd0>)
 8001230:	4a2f      	ldr	r2, [pc, #188]	; (80012f0 <MX_ADC1_Init+0xd4>)
 8001232:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001234:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <MX_ADC1_Init+0xd0>)
 8001236:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800123a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800123c:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <MX_ADC1_Init+0xd0>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001242:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <MX_ADC1_Init+0xd0>)
 8001244:	2201      	movs	r2, #1
 8001246:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001248:	4b28      	ldr	r3, [pc, #160]	; (80012ec <MX_ADC1_Init+0xd0>)
 800124a:	2201      	movs	r2, #1
 800124c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800124e:	4b27      	ldr	r3, [pc, #156]	; (80012ec <MX_ADC1_Init+0xd0>)
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001256:	4b25      	ldr	r3, [pc, #148]	; (80012ec <MX_ADC1_Init+0xd0>)
 8001258:	2200      	movs	r2, #0
 800125a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800125c:	4b23      	ldr	r3, [pc, #140]	; (80012ec <MX_ADC1_Init+0xd0>)
 800125e:	4a25      	ldr	r2, [pc, #148]	; (80012f4 <MX_ADC1_Init+0xd8>)
 8001260:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001262:	4b22      	ldr	r3, [pc, #136]	; (80012ec <MX_ADC1_Init+0xd0>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001268:	4b20      	ldr	r3, [pc, #128]	; (80012ec <MX_ADC1_Init+0xd0>)
 800126a:	2203      	movs	r2, #3
 800126c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800126e:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <MX_ADC1_Init+0xd0>)
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <MX_ADC1_Init+0xd0>)
 8001278:	2201      	movs	r2, #1
 800127a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800127c:	481b      	ldr	r0, [pc, #108]	; (80012ec <MX_ADC1_Init+0xd0>)
 800127e:	f001 f805 	bl	800228c <HAL_ADC_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001288:	f000 fca8 	bl	8001bdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800128c:	2304      	movs	r3, #4
 800128e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001290:	2301      	movs	r3, #1
 8001292:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001298:	463b      	mov	r3, r7
 800129a:	4619      	mov	r1, r3
 800129c:	4813      	ldr	r0, [pc, #76]	; (80012ec <MX_ADC1_Init+0xd0>)
 800129e:	f001 f949 	bl	8002534 <HAL_ADC_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012a8:	f000 fc98 	bl	8001bdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012ac:	2306      	movs	r3, #6
 80012ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b4:	463b      	mov	r3, r7
 80012b6:	4619      	mov	r1, r3
 80012b8:	480c      	ldr	r0, [pc, #48]	; (80012ec <MX_ADC1_Init+0xd0>)
 80012ba:	f001 f93b 	bl	8002534 <HAL_ADC_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012c4:	f000 fc8a 	bl	8001bdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <MX_ADC1_Init+0xdc>)
 80012ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80012cc:	2303      	movs	r3, #3
 80012ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_ADC1_Init+0xd0>)
 80012d6:	f001 f92d 	bl	8002534 <HAL_ADC_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80012e0:	f000 fc7c 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000174 	.word	0x20000174
 80012f0:	40012000 	.word	0x40012000
 80012f4:	0f000001 	.word	0x0f000001
 80012f8:	10000012 	.word	0x10000012

080012fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_SPI1_Init+0x68>)
 8001302:	4a19      	ldr	r2, [pc, #100]	; (8001368 <MX_SPI1_Init+0x6c>)
 8001304:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_SPI1_Init+0x68>)
 8001308:	f44f 7282 	mov.w	r2, #260	; 0x104
 800130c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_SPI1_Init+0x68>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <MX_SPI1_Init+0x68>)
 8001316:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800131a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_SPI1_Init+0x68>)
 800131e:	2202      	movs	r2, #2
 8001320:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <MX_SPI1_Init+0x68>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_SPI1_Init+0x68>)
 800132a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_SPI1_Init+0x68>)
 8001332:	2238      	movs	r2, #56	; 0x38
 8001334:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <MX_SPI1_Init+0x68>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_SPI1_Init+0x68>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <MX_SPI1_Init+0x68>)
 8001344:	2200      	movs	r2, #0
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_SPI1_Init+0x68>)
 800134a:	220a      	movs	r2, #10
 800134c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_SPI1_Init+0x68>)
 8001350:	f002 ff1e 	bl	8004190 <HAL_SPI_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800135a:	f000 fc3f 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000230 	.word	0x20000230
 8001368:	40013000 	.word	0x40013000

0800136c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_SPI2_Init+0x68>)
 8001372:	4a19      	ldr	r2, [pc, #100]	; (80013d8 <MX_SPI2_Init+0x6c>)
 8001374:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_SPI2_Init+0x68>)
 8001378:	f44f 7282 	mov.w	r2, #260	; 0x104
 800137c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <MX_SPI2_Init+0x68>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_SPI2_Init+0x68>)
 8001386:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800138a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_SPI2_Init+0x68>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <MX_SPI2_Init+0x68>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_SPI2_Init+0x68>)
 800139a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800139e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_SPI2_Init+0x68>)
 80013a2:	2238      	movs	r2, #56	; 0x38
 80013a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_SPI2_Init+0x68>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_SPI2_Init+0x68>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_SPI2_Init+0x68>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_SPI2_Init+0x68>)
 80013ba:	220a      	movs	r2, #10
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_SPI2_Init+0x68>)
 80013c0:	f002 fee6 	bl	8004190 <HAL_SPI_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80013ca:	f000 fc07 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200000cc 	.word	0x200000cc
 80013d8:	40003800 	.word	0x40003800

080013dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	f107 0318 	add.w	r3, r7, #24
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013fa:	463b      	mov	r3, r7
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001406:	4b31      	ldr	r3, [pc, #196]	; (80014cc <MX_TIM2_Init+0xf0>)
 8001408:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800140c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800140e:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <MX_TIM2_Init+0xf0>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <MX_TIM2_Init+0xf0>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800141a:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <MX_TIM2_Init+0xf0>)
 800141c:	f04f 32ff 	mov.w	r2, #4294967295
 8001420:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b2a      	ldr	r3, [pc, #168]	; (80014cc <MX_TIM2_Init+0xf0>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	4b28      	ldr	r3, [pc, #160]	; (80014cc <MX_TIM2_Init+0xf0>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800142e:	4827      	ldr	r0, [pc, #156]	; (80014cc <MX_TIM2_Init+0xf0>)
 8001430:	f003 f8f2 	bl	8004618 <HAL_TIM_Base_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800143a:	f000 fbcf 	bl	8001bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001444:	f107 0318 	add.w	r3, r7, #24
 8001448:	4619      	mov	r1, r3
 800144a:	4820      	ldr	r0, [pc, #128]	; (80014cc <MX_TIM2_Init+0xf0>)
 800144c:	f003 fb74 	bl	8004b38 <HAL_TIM_ConfigClockSource>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001456:	f000 fbc1 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800145a:	481c      	ldr	r0, [pc, #112]	; (80014cc <MX_TIM2_Init+0xf0>)
 800145c:	f003 f92b 	bl	80046b6 <HAL_TIM_IC_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001466:	f000 fbb9 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	4619      	mov	r1, r3
 8001478:	4814      	ldr	r0, [pc, #80]	; (80014cc <MX_TIM2_Init+0xf0>)
 800147a:	f003 ff0b 	bl	8005294 <HAL_TIMEx_MasterConfigSynchronization>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001484:	f000 fbaa 	bl	8001bdc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001488:	2300      	movs	r3, #0
 800148a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800148c:	2301      	movs	r3, #1
 800148e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001494:	230f      	movs	r3, #15
 8001496:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	480b      	ldr	r0, [pc, #44]	; (80014cc <MX_TIM2_Init+0xf0>)
 80014a0:	f003 faae 	bl	8004a00 <HAL_TIM_IC_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80014aa:	f000 fb97 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014ae:	463b      	mov	r3, r7
 80014b0:	2204      	movs	r2, #4
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_TIM2_Init+0xf0>)
 80014b6:	f003 faa3 	bl	8004a00 <HAL_TIM_IC_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80014c0:	f000 fb8c 	bl	8001bdc <Error_Handler>
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200002c4 	.word	0x200002c4

080014d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e4:	463b      	mov	r3, r7
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <MX_TIM3_Init+0x94>)
 80014ee:	4a1e      	ldr	r2, [pc, #120]	; (8001568 <MX_TIM3_Init+0x98>)
 80014f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 89;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <MX_TIM3_Init+0x94>)
 80014f4:	2259      	movs	r2, #89	; 0x59
 80014f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_TIM3_Init+0x94>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65335;
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <MX_TIM3_Init+0x94>)
 8001500:	f64f 7237 	movw	r2, #65335	; 0xff37
 8001504:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <MX_TIM3_Init+0x94>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <MX_TIM3_Init+0x94>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001512:	4814      	ldr	r0, [pc, #80]	; (8001564 <MX_TIM3_Init+0x94>)
 8001514:	f003 f880 	bl	8004618 <HAL_TIM_Base_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800151e:	f000 fb5d 	bl	8001bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001526:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	4619      	mov	r1, r3
 800152e:	480d      	ldr	r0, [pc, #52]	; (8001564 <MX_TIM3_Init+0x94>)
 8001530:	f003 fb02 	bl	8004b38 <HAL_TIM_ConfigClockSource>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800153a:	f000 fb4f 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001546:	463b      	mov	r3, r7
 8001548:	4619      	mov	r1, r3
 800154a:	4806      	ldr	r0, [pc, #24]	; (8001564 <MX_TIM3_Init+0x94>)
 800154c:	f003 fea2 	bl	8005294 <HAL_TIMEx_MasterConfigSynchronization>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001556:	f000 fb41 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000130 	.word	0x20000130
 8001568:	40000400 	.word	0x40000400

0800156c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <MX_USART2_UART_Init+0x50>)
 8001574:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800157c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001592:	220c      	movs	r2, #12
 8001594:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 80015a4:	f003 ff06 	bl	80053b4 <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ae:	f000 fb15 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000304 	.word	0x20000304
 80015bc:	40004400 	.word	0x40004400

080015c0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_DMA_Init+0x3c>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <MX_DMA_Init+0x3c>)
 80015d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_DMA_Init+0x3c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	2038      	movs	r0, #56	; 0x38
 80015e8:	f001 fb2f 	bl	8002c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015ec:	2038      	movs	r0, #56	; 0x38
 80015ee:	f001 fb48 	bl	8002c82 <HAL_NVIC_EnableIRQ>

}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800

08001600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b34      	ldr	r3, [pc, #208]	; (80016ec <MX_GPIO_Init+0xec>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a33      	ldr	r2, [pc, #204]	; (80016ec <MX_GPIO_Init+0xec>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b31      	ldr	r3, [pc, #196]	; (80016ec <MX_GPIO_Init+0xec>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <MX_GPIO_Init+0xec>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a2c      	ldr	r2, [pc, #176]	; (80016ec <MX_GPIO_Init+0xec>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b2a      	ldr	r3, [pc, #168]	; (80016ec <MX_GPIO_Init+0xec>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4b26      	ldr	r3, [pc, #152]	; (80016ec <MX_GPIO_Init+0xec>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a25      	ldr	r2, [pc, #148]	; (80016ec <MX_GPIO_Init+0xec>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b23      	ldr	r3, [pc, #140]	; (80016ec <MX_GPIO_Init+0xec>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FB_SW3_Pin|FB_SW1_Pin|FB_SW2_Pin|PGA_CS_Pin 
 800166a:	2200      	movs	r2, #0
 800166c:	f243 418c 	movw	r1, #13452	; 0x348c
 8001670:	481f      	ldr	r0, [pc, #124]	; (80016f0 <MX_GPIO_Init+0xf0>)
 8001672:	f002 f843 	bl	80036fc <HAL_GPIO_WritePin>
                          |FB_SW6_Pin|FB_SW5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LED_Pin|GRN_LED_Pin|FB_SW4_Pin, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 800167c:	481d      	ldr	r0, [pc, #116]	; (80016f4 <MX_GPIO_Init+0xf4>)
 800167e:	f002 f83d 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	2140      	movs	r1, #64	; 0x40
 8001686:	481c      	ldr	r0, [pc, #112]	; (80016f8 <MX_GPIO_Init+0xf8>)
 8001688:	f002 f838 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FB_SW3_Pin FB_SW1_Pin FB_SW2_Pin PGA_CS_Pin 
                           FB_SW6_Pin FB_SW5_Pin */
  GPIO_InitStruct.Pin = FB_SW3_Pin|FB_SW1_Pin|FB_SW2_Pin|PGA_CS_Pin 
 800168c:	f243 438c 	movw	r3, #13452	; 0x348c
 8001690:	60fb      	str	r3, [r7, #12]
                          |FB_SW6_Pin|FB_SW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	2301      	movs	r3, #1
 8001694:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169e:	f107 030c 	add.w	r3, r7, #12
 80016a2:	4619      	mov	r1, r3
 80016a4:	4812      	ldr	r0, [pc, #72]	; (80016f0 <MX_GPIO_Init+0xf0>)
 80016a6:	f001 fe97 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GRN_LED_Pin FB_SW4_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GRN_LED_Pin|FB_SW4_Pin;
 80016aa:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 80016ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	4619      	mov	r1, r3
 80016c2:	480c      	ldr	r0, [pc, #48]	; (80016f4 <MX_GPIO_Init+0xf4>)
 80016c4:	f001 fe88 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : AD9833_CS_Pin */
  GPIO_InitStruct.Pin = AD9833_CS_Pin;
 80016c8:	2340      	movs	r3, #64	; 0x40
 80016ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AD9833_CS_GPIO_Port, &GPIO_InitStruct);
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	4619      	mov	r1, r3
 80016de:	4806      	ldr	r0, [pc, #24]	; (80016f8 <MX_GPIO_Init+0xf8>)
 80016e0:	f001 fe7a 	bl	80033d8 <HAL_GPIO_Init>

}
 80016e4:	bf00      	nop
 80016e6:	3720      	adds	r7, #32
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020800 	.word	0x40020800
 80016f4:	40020000 	.word	0x40020000
 80016f8:	40020400 	.word	0x40020400

080016fc <measureImpedanceMagnitude>:

/* USER CODE BEGIN 4 */

uint32_t measureImpedanceMagnitude(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
	int x = rand() % 100;
 8001702:	f004 fdc1 	bl	8006288 <rand>
 8001706:	4603      	mov	r3, r0
 8001708:	4a07      	ldr	r2, [pc, #28]	; (8001728 <measureImpedanceMagnitude+0x2c>)
 800170a:	fb82 1203 	smull	r1, r2, r2, r3
 800170e:	1151      	asrs	r1, r2, #5
 8001710:	17da      	asrs	r2, r3, #31
 8001712:	1a8a      	subs	r2, r1, r2
 8001714:	2164      	movs	r1, #100	; 0x64
 8001716:	fb01 f202 	mul.w	r2, r1, r2
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	607b      	str	r3, [r7, #4]
	return x;
 800171e:	687b      	ldr	r3, [r7, #4]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	51eb851f 	.word	0x51eb851f

0800172c <measureImpedancePhase>:

uint32_t measureImpedancePhase(void) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
	int x = rand() % 90;
 8001732:	f004 fda9 	bl	8006288 <rand>
 8001736:	4603      	mov	r3, r0
 8001738:	4a08      	ldr	r2, [pc, #32]	; (800175c <measureImpedancePhase+0x30>)
 800173a:	fb82 1203 	smull	r1, r2, r2, r3
 800173e:	441a      	add	r2, r3
 8001740:	1191      	asrs	r1, r2, #6
 8001742:	17da      	asrs	r2, r3, #31
 8001744:	1a8a      	subs	r2, r1, r2
 8001746:	215a      	movs	r1, #90	; 0x5a
 8001748:	fb01 f202 	mul.w	r2, r1, r2
 800174c:	1a9b      	subs	r3, r3, r2
 800174e:	607b      	str	r3, [r7, #4]
	return x;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	b60b60b7 	.word	0xb60b60b7

08001760 <sendImpedanceMessage>:

void sendImpedanceMessage(uint32_t mag, uint32_t phase) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
	uartTxBytes[1] = 0x03;
 800176a:	4b31      	ldr	r3, [pc, #196]	; (8001830 <sendImpedanceMessage+0xd0>)
 800176c:	2203      	movs	r2, #3
 800176e:	705a      	strb	r2, [r3, #1]


	uartTxBytes[3] = mag & 0xFF;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	b2da      	uxtb	r2, r3
 8001774:	4b2e      	ldr	r3, [pc, #184]	; (8001830 <sendImpedanceMessage+0xd0>)
 8001776:	70da      	strb	r2, [r3, #3]
	uartTxBytes[4] = (mag & 0xFF00) / 0xFF;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800177e:	4a2d      	ldr	r2, [pc, #180]	; (8001834 <sendImpedanceMessage+0xd4>)
 8001780:	fba2 2303 	umull	r2, r3, r2, r3
 8001784:	09db      	lsrs	r3, r3, #7
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b29      	ldr	r3, [pc, #164]	; (8001830 <sendImpedanceMessage+0xd0>)
 800178a:	711a      	strb	r2, [r3, #4]
	uartTxBytes[5] = (mag & 0xFF0000) / 0xFFFF;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001792:	4a29      	ldr	r2, [pc, #164]	; (8001838 <sendImpedanceMessage+0xd8>)
 8001794:	fba2 2303 	umull	r2, r3, r2, r3
 8001798:	0bdb      	lsrs	r3, r3, #15
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <sendImpedanceMessage+0xd0>)
 800179e:	715a      	strb	r2, [r3, #5]
	uartTxBytes[6] = (mag & 0xFF000000) / 0xFFFFFF;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80017a6:	f240 1301 	movw	r3, #257	; 0x101
 80017aa:	fba3 1302 	umull	r1, r3, r3, r2
 80017ae:	1ad2      	subs	r2, r2, r3
 80017b0:	0852      	lsrs	r2, r2, #1
 80017b2:	4413      	add	r3, r2
 80017b4:	0ddb      	lsrs	r3, r3, #23
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <sendImpedanceMessage+0xd0>)
 80017ba:	719a      	strb	r2, [r3, #6]

	uartTxBytes[7] = phase & 0xFF;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <sendImpedanceMessage+0xd0>)
 80017c2:	71da      	strb	r2, [r3, #7]
	uartTxBytes[8] = (phase & 0xFF00) / 0xFF;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80017ca:	4a1a      	ldr	r2, [pc, #104]	; (8001834 <sendImpedanceMessage+0xd4>)
 80017cc:	fba2 2303 	umull	r2, r3, r2, r3
 80017d0:	09db      	lsrs	r3, r3, #7
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <sendImpedanceMessage+0xd0>)
 80017d6:	721a      	strb	r2, [r3, #8]
	uartTxBytes[9] = (phase & 0xFF0000) / 0xFFFF;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80017de:	4a16      	ldr	r2, [pc, #88]	; (8001838 <sendImpedanceMessage+0xd8>)
 80017e0:	fba2 2303 	umull	r2, r3, r2, r3
 80017e4:	0bdb      	lsrs	r3, r3, #15
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <sendImpedanceMessage+0xd0>)
 80017ea:	725a      	strb	r2, [r3, #9]
	uartTxBytes[10] = (phase & 0xFF000000) / 0xFFFFFF;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80017f2:	f240 1301 	movw	r3, #257	; 0x101
 80017f6:	fba3 1302 	umull	r1, r3, r3, r2
 80017fa:	1ad2      	subs	r2, r2, r3
 80017fc:	0852      	lsrs	r2, r2, #1
 80017fe:	4413      	add	r3, r2
 8001800:	0ddb      	lsrs	r3, r3, #23
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <sendImpedanceMessage+0xd0>)
 8001806:	729a      	strb	r2, [r3, #10]

	uint8_t checksum = makeCheckSum();
 8001808:	f000 f8e6 	bl	80019d8 <makeCheckSum>
 800180c:	4603      	mov	r3, r0
 800180e:	73fb      	strb	r3, [r7, #15]
	uartTxBytes[11] = checksum;
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <sendImpedanceMessage+0xd0>)
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	72d3      	strb	r3, [r2, #11]
	HAL_UART_Transmit(&huart2, (uint8_t *)uartTxBytes, 12, 1);
 8001816:	2301      	movs	r3, #1
 8001818:	220c      	movs	r2, #12
 800181a:	4905      	ldr	r1, [pc, #20]	; (8001830 <sendImpedanceMessage+0xd0>)
 800181c:	4807      	ldr	r0, [pc, #28]	; (800183c <sendImpedanceMessage+0xdc>)
 800181e:	f003 fe16 	bl	800544e <HAL_UART_Transmit>
	measureFlag = false;
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <sendImpedanceMessage+0xe0>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
}
 8001828:	bf00      	nop
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000000 	.word	0x20000000
 8001834:	80808081 	.word	0x80808081
 8001838:	80008001 	.word	0x80008001
 800183c:	20000304 	.word	0x20000304
 8001840:	200000ac 	.word	0x200000ac

08001844 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if (htim->Instance==TIM2) {
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001854:	d131      	bne.n	80018ba <HAL_TIM_IC_CaptureCallback+0x76>
	/*
		This works if you set channel 1 then channel 2 of the timer.
		You can set channel 1 twice but then the difference will be wrong.
		The reading will be 0xFFFFFFFF - CounterOneValue since CounterTwoValue = 0.
	*/
	if(startedCounting == 0) {
 8001856:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10a      	bne.n	8001874 <HAL_TIM_IC_CaptureCallback+0x30>
      // Get the 1st Input Capture value
      CounterOneValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800185e:	2100      	movs	r1, #0
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f003 fa21 	bl	8004ca8 <HAL_TIM_ReadCapturedValue>
 8001866:	4602      	mov	r2, r0
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_TIM_IC_CaptureCallback+0x84>)
 800186a:	601a      	str	r2, [r3, #0]
      startedCounting = 1;
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x80>)
 800186e:	2201      	movs	r2, #1
 8001870:	801a      	strh	r2, [r3, #0]
	  // Set flags
	  startedCounting = 0;
	  newCaptureValue = true;
    }
  }
}
 8001872:	e022      	b.n	80018ba <HAL_TIM_IC_CaptureCallback+0x76>
      CounterTwoValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001874:	2104      	movs	r1, #4
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f003 fa16 	bl	8004ca8 <HAL_TIM_ReadCapturedValue>
 800187c:	4602      	mov	r2, r0
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HAL_TIM_IC_CaptureCallback+0x88>)
 8001880:	601a      	str	r2, [r3, #0]
	  if (CounterTwoValue > CounterOneValue) {
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_TIM_IC_CaptureCallback+0x88>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d907      	bls.n	800189e <HAL_TIM_IC_CaptureCallback+0x5a>
		counterDifference = (CounterTwoValue - CounterOneValue);
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_TIM_IC_CaptureCallback+0x88>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	4a0d      	ldr	r2, [pc, #52]	; (80018d0 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	e007      	b.n	80018ae <HAL_TIM_IC_CaptureCallback+0x6a>
		counterDifference = ((0xFFFFFFFF - CounterOneValue) + CounterTwoValue);
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_TIM_IC_CaptureCallback+0x88>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_TIM_IC_CaptureCallback+0x84>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	3b01      	subs	r3, #1
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80018ac:	6013      	str	r3, [r2, #0]
	  startedCounting = 0;
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x80>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	801a      	strh	r2, [r3, #0]
	  newCaptureValue = true;
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <HAL_TIM_IC_CaptureCallback+0x90>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200000a8 	.word	0x200000a8
 80018c8:	2000009c 	.word	0x2000009c
 80018cc:	200000a0 	.word	0x200000a0
 80018d0:	200000a4 	.word	0x200000a4
 80018d4:	200000aa 	.word	0x200000aa

080018d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	// Handle Recieved Message
	UART_Rx_Handler();
 80018e0:	f000 f80e 	bl	8001900 <UART_Rx_Handler>

	// Stage Rx of Next UART Message
	HAL_UART_Receive_IT(&huart2, (uint8_t*)uartRxBytes, 12);
 80018e4:	220c      	movs	r2, #12
 80018e6:	4904      	ldr	r1, [pc, #16]	; (80018f8 <HAL_UART_RxCpltCallback+0x20>)
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <HAL_UART_RxCpltCallback+0x24>)
 80018ea:	f003 fe49 	bl	8005580 <HAL_UART_Receive_IT>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200001bc 	.word	0x200001bc
 80018fc:	20000304 	.word	0x20000304

08001900 <UART_Rx_Handler>:

void UART_Rx_Handler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0

	if(uartRxBytes[0] != 0xFF) 	// If header byte is not first byte abandon
 8001906:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <UART_Rx_Handler+0xc4>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2bff      	cmp	r3, #255	; 0xff
 800190c:	d152      	bne.n	80019b4 <UART_Rx_Handler+0xb4>
		return;

	//Calculate Checksum to Check Data is Valid
	if(!CalculateRxDataChecksum())
 800190e:	f000 f881 	bl	8001a14 <CalculateRxDataChecksum>
 8001912:	4603      	mov	r3, r0
 8001914:	f083 0301 	eor.w	r3, r3, #1
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d14c      	bne.n	80019b8 <UART_Rx_Handler+0xb8>
		return;

	// Data is valid so handle it

	int freq = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
	int signal = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	603b      	str	r3, [r7, #0]
	// Switch on Data ID
	switch(uartRxBytes[1])
 8001926:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <UART_Rx_Handler+0xc4>)
 8001928:	785b      	ldrb	r3, [r3, #1]
 800192a:	2b05      	cmp	r3, #5
 800192c:	d846      	bhi.n	80019bc <UART_Rx_Handler+0xbc>
 800192e:	a201      	add	r2, pc, #4	; (adr r2, 8001934 <UART_Rx_Handler+0x34>)
 8001930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001934:	080019bd 	.word	0x080019bd
 8001938:	080019bd 	.word	0x080019bd
 800193c:	0800194d 	.word	0x0800194d
 8001940:	080019bd 	.word	0x080019bd
 8001944:	08001953 	.word	0x08001953
 8001948:	080019a3 	.word	0x080019a3
	case(0x00):
			break;
	case(0x01):
			break;
	case(0x02):
			measureFlag = true;
 800194c:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <UART_Rx_Handler+0xc8>)
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]
	case(0x04): // frequency change message
			freq = uartRxBytes[6] | ((int)uartRxBytes[5] << 8) | ((int)uartRxBytes[4] << 16) | ((int)uartRxBytes[3] << 24);
 8001952:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <UART_Rx_Handler+0xc4>)
 8001954:	799b      	ldrb	r3, [r3, #6]
 8001956:	461a      	mov	r2, r3
 8001958:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <UART_Rx_Handler+0xc4>)
 800195a:	795b      	ldrb	r3, [r3, #5]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	431a      	orrs	r2, r3
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <UART_Rx_Handler+0xc4>)
 8001962:	791b      	ldrb	r3, [r3, #4]
 8001964:	041b      	lsls	r3, r3, #16
 8001966:	431a      	orrs	r2, r3
 8001968:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <UART_Rx_Handler+0xc4>)
 800196a:	78db      	ldrb	r3, [r3, #3]
 800196c:	061b      	lsls	r3, r3, #24
 800196e:	4313      	orrs	r3, r2
 8001970:	607b      	str	r3, [r7, #4]
			signal = uartRxBytes[10] | ((int)uartRxBytes[9] << 8) | ((int)uartRxBytes[8] << 16) | ((int)uartRxBytes[7] << 24);
 8001972:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <UART_Rx_Handler+0xc4>)
 8001974:	7a9b      	ldrb	r3, [r3, #10]
 8001976:	461a      	mov	r2, r3
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <UART_Rx_Handler+0xc4>)
 800197a:	7a5b      	ldrb	r3, [r3, #9]
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	431a      	orrs	r2, r3
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <UART_Rx_Handler+0xc4>)
 8001982:	7a1b      	ldrb	r3, [r3, #8]
 8001984:	041b      	lsls	r3, r3, #16
 8001986:	431a      	orrs	r2, r3
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <UART_Rx_Handler+0xc4>)
 800198a:	79db      	ldrb	r3, [r3, #7]
 800198c:	061b      	lsls	r3, r3, #24
 800198e:	4313      	orrs	r3, r2
 8001990:	603b      	str	r3, [r7, #0]
			AD9833CalculateRegister(freq, signal);
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff f9d5 	bl	8000d44 <AD9833CalculateRegister>
			// Set Update Frequency Flag so AD9833 updates in main task loop
			updateSignalFreqFlag = true;
 800199a:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <UART_Rx_Handler+0xcc>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
			break;
 80019a0:	e00d      	b.n	80019be <UART_Rx_Handler+0xbe>
	case(0x05): // set PGA gain message
			pgaGainValue = uartRxBytes[3];
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <UART_Rx_Handler+0xc4>)
 80019a4:	78da      	ldrb	r2, [r3, #3]
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <UART_Rx_Handler+0xd0>)
 80019a8:	701a      	strb	r2, [r3, #0]
			updatePGAGainFlag = true;
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <UART_Rx_Handler+0xd4>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
	default:
		break;
 80019b0:	bf00      	nop
 80019b2:	e003      	b.n	80019bc <UART_Rx_Handler+0xbc>
		return;
 80019b4:	bf00      	nop
 80019b6:	e002      	b.n	80019be <UART_Rx_Handler+0xbe>
		return;
 80019b8:	bf00      	nop
 80019ba:	e000      	b.n	80019be <UART_Rx_Handler+0xbe>
		break;
 80019bc:	bf00      	nop
	}
}
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200001bc 	.word	0x200001bc
 80019c8:	200000ac 	.word	0x200000ac
 80019cc:	20000098 	.word	0x20000098
 80019d0:	20000170 	.word	0x20000170
 80019d4:	20000099 	.word	0x20000099

080019d8 <makeCheckSum>:

uint8_t makeCheckSum(void) {
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	71fb      	strb	r3, [r7, #7]

	int i;
	// Checksum is bitwise xor of all bytes except checksum
	for(i = 0; i < (sizeof(uartTxBytes)/sizeof(uint8_t) - 1); i++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	e009      	b.n	80019fc <makeCheckSum+0x24>
		result = result ^ uartTxBytes[i];
 80019e8:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <makeCheckSum+0x38>)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	4413      	add	r3, r2
 80019ee:	781a      	ldrb	r2, [r3, #0]
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	4053      	eors	r3, r2
 80019f4:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < (sizeof(uartTxBytes)/sizeof(uint8_t) - 1); i++)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2b0a      	cmp	r3, #10
 8001a00:	d9f2      	bls.n	80019e8 <makeCheckSum+0x10>
	return result;
 8001a02:	79fb      	ldrb	r3, [r7, #7]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	20000000 	.word	0x20000000

08001a14 <CalculateRxDataChecksum>:

bool CalculateRxDataChecksum(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	71fb      	strb	r3, [r7, #7]

	int i;
	// Checksum is bitwise xor of all bytes except checksum
	for(i = 0; i < (sizeof(uartRxBytes)/sizeof(uint8_t) - 1); i++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	e009      	b.n	8001a38 <CalculateRxDataChecksum+0x24>
		result = result ^ uartRxBytes[i];
 8001a24:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <CalculateRxDataChecksum+0x4c>)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	4413      	add	r3, r2
 8001a2a:	781a      	ldrb	r2, [r3, #0]
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	4053      	eors	r3, r2
 8001a30:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < (sizeof(uartRxBytes)/sizeof(uint8_t) - 1); i++)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	2b0a      	cmp	r3, #10
 8001a3c:	d9f2      	bls.n	8001a24 <CalculateRxDataChecksum+0x10>

	if(result == uartRxBytes[i])
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <CalculateRxDataChecksum+0x4c>)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	79fa      	ldrb	r2, [r7, #7]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d101      	bne.n	8001a50 <CalculateRxDataChecksum+0x3c>
		return true;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <CalculateRxDataChecksum+0x3e>
	else
		return false;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	200001bc 	.word	0x200001bc

08001a64 <AD9833_Set_Output>:

void AD9833_Set_Output(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2140      	movs	r1, #64	; 0x40
 8001a6e:	4811      	ldr	r0, [pc, #68]	; (8001ab4 <AD9833_Set_Output+0x50>)
 8001a70:	f001 fe44 	bl	80036fc <HAL_GPIO_WritePin>
	uint16_t size = 1;
 8001a74:	2301      	movs	r3, #1
 8001a76:	817b      	strh	r3, [r7, #10]
	uint8_t * base = (uint8_t*)registerValues;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <AD9833_Set_Output+0x54>)
 8001a7a:	607b      	str	r3, [r7, #4]
	uint8_t * dataPointer = (uint8_t*)registerValues;
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <AD9833_Set_Output+0x54>)
 8001a7e:	60fb      	str	r3, [r7, #12]
	while(dataPointer < base + sizeof(registerValues))
 8001a80:	e009      	b.n	8001a96 <AD9833_Set_Output+0x32>
	{
		//HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_RESET);
		HAL_SPI_Transmit(&hspi1, dataPointer, size, HAL_MAX_DELAY);
 8001a82:	897a      	ldrh	r2, [r7, #10]
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295
 8001a88:	68f9      	ldr	r1, [r7, #12]
 8001a8a:	480c      	ldr	r0, [pc, #48]	; (8001abc <AD9833_Set_Output+0x58>)
 8001a8c:	f002 fbe4 	bl	8004258 <HAL_SPI_Transmit>
		//HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_SET);
		dataPointer += sizeof(uint16_t);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3302      	adds	r3, #2
 8001a94:	60fb      	str	r3, [r7, #12]
	while(dataPointer < base + sizeof(registerValues))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	330a      	adds	r3, #10
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d3f0      	bcc.n	8001a82 <AD9833_Set_Output+0x1e>
	}
	HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_SET);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	2140      	movs	r1, #64	; 0x40
 8001aa4:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <AD9833_Set_Output+0x50>)
 8001aa6:	f001 fe29 	bl	80036fc <HAL_GPIO_WritePin>
}
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	20000124 	.word	0x20000124
 8001abc:	20000230 	.word	0x20000230

08001ac0 <PGA_Set_Gain>:

void PGA_Set_Gain(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
	// 8 bit values for seperate instruction and control registers
	// Channel select register is not needed as single channel device used
	uint8_t instructionReg = 0x40; // write to gain register
 8001ac6:	2340      	movs	r3, #64	; 0x40
 8001ac8:	73bb      	strb	r3, [r7, #14]
	uint8_t controlReg;

	// Switch on allowable gain values, and set relevant bits in control reg
	switch(pgaGainValue){
 8001aca:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <PGA_Set_Gain+0x110>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b20      	cmp	r3, #32
 8001ad0:	d87a      	bhi.n	8001bc8 <PGA_Set_Gain+0x108>
 8001ad2:	a201      	add	r2, pc, #4	; (adr r2, 8001ad8 <PGA_Set_Gain+0x18>)
 8001ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad8:	08001b8d 	.word	0x08001b8d
 8001adc:	08001b5d 	.word	0x08001b5d
 8001ae0:	08001b63 	.word	0x08001b63
 8001ae4:	08001bc9 	.word	0x08001bc9
 8001ae8:	08001b69 	.word	0x08001b69
 8001aec:	08001b6f 	.word	0x08001b6f
 8001af0:	08001bc9 	.word	0x08001bc9
 8001af4:	08001bc9 	.word	0x08001bc9
 8001af8:	08001b75 	.word	0x08001b75
 8001afc:	08001bc9 	.word	0x08001bc9
 8001b00:	08001b7b 	.word	0x08001b7b
 8001b04:	08001bc9 	.word	0x08001bc9
 8001b08:	08001bc9 	.word	0x08001bc9
 8001b0c:	08001bc9 	.word	0x08001bc9
 8001b10:	08001bc9 	.word	0x08001bc9
 8001b14:	08001bc9 	.word	0x08001bc9
 8001b18:	08001b81 	.word	0x08001b81
 8001b1c:	08001bc9 	.word	0x08001bc9
 8001b20:	08001bc9 	.word	0x08001bc9
 8001b24:	08001bc9 	.word	0x08001bc9
 8001b28:	08001bc9 	.word	0x08001bc9
 8001b2c:	08001bc9 	.word	0x08001bc9
 8001b30:	08001bc9 	.word	0x08001bc9
 8001b34:	08001bc9 	.word	0x08001bc9
 8001b38:	08001bc9 	.word	0x08001bc9
 8001b3c:	08001bc9 	.word	0x08001bc9
 8001b40:	08001bc9 	.word	0x08001bc9
 8001b44:	08001bc9 	.word	0x08001bc9
 8001b48:	08001bc9 	.word	0x08001bc9
 8001b4c:	08001bc9 	.word	0x08001bc9
 8001b50:	08001bc9 	.word	0x08001bc9
 8001b54:	08001bc9 	.word	0x08001bc9
 8001b58:	08001b87 	.word	0x08001b87
	case 0x0 : // TODO implement shutdown/sleep whatever its called
		break;
	case 1 :
		controlReg = 0x0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]
		break;
 8001b60:	e015      	b.n	8001b8e <PGA_Set_Gain+0xce>
	case 2 :
		controlReg = 0x1;
 8001b62:	2301      	movs	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
		break;
 8001b66:	e012      	b.n	8001b8e <PGA_Set_Gain+0xce>
	case 4 :
		controlReg = 0x2;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	73fb      	strb	r3, [r7, #15]
		break;
 8001b6c:	e00f      	b.n	8001b8e <PGA_Set_Gain+0xce>
	case 5 :
		controlReg = 0x3;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	73fb      	strb	r3, [r7, #15]
		break;
 8001b72:	e00c      	b.n	8001b8e <PGA_Set_Gain+0xce>
	case 8:
		controlReg = 0x4;
 8001b74:	2304      	movs	r3, #4
 8001b76:	73fb      	strb	r3, [r7, #15]
		break;
 8001b78:	e009      	b.n	8001b8e <PGA_Set_Gain+0xce>
	case 10:
		controlReg = 0x5;
 8001b7a:	2305      	movs	r3, #5
 8001b7c:	73fb      	strb	r3, [r7, #15]
		break;
 8001b7e:	e006      	b.n	8001b8e <PGA_Set_Gain+0xce>
	case 16:
		controlReg = 0x6;
 8001b80:	2306      	movs	r3, #6
 8001b82:	73fb      	strb	r3, [r7, #15]
		break;
 8001b84:	e003      	b.n	8001b8e <PGA_Set_Gain+0xce>
	case 32:
		controlReg = 0x7;
 8001b86:	2307      	movs	r3, #7
 8001b88:	73fb      	strb	r3, [r7, #15]
		break;
 8001b8a:	e000      	b.n	8001b8e <PGA_Set_Gain+0xce>
		break;
 8001b8c:	bf00      	nop
	default:	// gain was not valid so don't send a command
		return;
	}

	// Assemble data to send via SPI
	uint16_t spiWord = ((uint16_t)instructionReg << 8) | controlReg;
 8001b8e:	7bbb      	ldrb	r3, [r7, #14]
 8001b90:	021b      	lsls	r3, r3, #8
 8001b92:	b21a      	sxth	r2, r3
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	80fb      	strh	r3, [r7, #6]

	// Get Data pointer
	uint8_t * dataAddr = &spiWord;
 8001ba0:	1dbb      	adds	r3, r7, #6
 8001ba2:	60bb      	str	r3, [r7, #8]


	// Set CS Low
	HAL_GPIO_WritePin(PGA_CS_GPIO_Port, PGA_CS_Pin, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2180      	movs	r1, #128	; 0x80
 8001ba8:	480a      	ldr	r0, [pc, #40]	; (8001bd4 <PGA_Set_Gain+0x114>)
 8001baa:	f001 fda7 	bl	80036fc <HAL_GPIO_WritePin>
	// Send SPI data
	HAL_SPI_Transmit(&hspi2, dataAddr, sizeof(spiWord)/sizeof(uint16_t), HAL_MAX_DELAY);
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	4808      	ldr	r0, [pc, #32]	; (8001bd8 <PGA_Set_Gain+0x118>)
 8001bb8:	f002 fb4e 	bl	8004258 <HAL_SPI_Transmit>
	// Set CS High
	HAL_GPIO_WritePin(PGA_CS_GPIO_Port, PGA_CS_Pin, GPIO_PIN_SET);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	2180      	movs	r1, #128	; 0x80
 8001bc0:	4804      	ldr	r0, [pc, #16]	; (8001bd4 <PGA_Set_Gain+0x114>)
 8001bc2:	f001 fd9b 	bl	80036fc <HAL_GPIO_WritePin>
 8001bc6:	e000      	b.n	8001bca <PGA_Set_Gain+0x10a>
		return;
 8001bc8:	bf00      	nop


}
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000170 	.word	0x20000170
 8001bd4:	40020800 	.word	0x40020800
 8001bd8:	200000cc 	.word	0x200000cc

08001bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_MspInit+0x4c>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a0f      	ldr	r2, [pc, #60]	; (8001c38 <HAL_MspInit+0x4c>)
 8001bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800

08001c3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a2f      	ldr	r2, [pc, #188]	; (8001d18 <HAL_ADC_MspInit+0xdc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d157      	bne.n	8001d0e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b2e      	ldr	r3, [pc, #184]	; (8001d1c <HAL_ADC_MspInit+0xe0>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	4a2d      	ldr	r2, [pc, #180]	; (8001d1c <HAL_ADC_MspInit+0xe0>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6e:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_ADC_MspInit+0xe0>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <HAL_ADC_MspInit+0xe0>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a26      	ldr	r2, [pc, #152]	; (8001d1c <HAL_ADC_MspInit+0xe0>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_ADC_MspInit+0xe0>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001c96:	2350      	movs	r3, #80	; 0x50
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	481d      	ldr	r0, [pc, #116]	; (8001d20 <HAL_ADC_MspInit+0xe4>)
 8001caa:	f001 fb95 	bl	80033d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_ADC_MspInit+0xe8>)
 8001cb0:	4a1d      	ldr	r2, [pc, #116]	; (8001d28 <HAL_ADC_MspInit+0xec>)
 8001cb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_ADC_MspInit+0xe8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <HAL_ADC_MspInit+0xe8>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_ADC_MspInit+0xe8>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cc6:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_ADC_MspInit+0xe8>)
 8001cc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ccc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_ADC_MspInit+0xe8>)
 8001cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cd4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_ADC_MspInit+0xe8>)
 8001cd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cdc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_ADC_MspInit+0xe8>)
 8001ce0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ce4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <HAL_ADC_MspInit+0xe8>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cec:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <HAL_ADC_MspInit+0xe8>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cf2:	480c      	ldr	r0, [pc, #48]	; (8001d24 <HAL_ADC_MspInit+0xe8>)
 8001cf4:	f000 ffe0 	bl	8002cb8 <HAL_DMA_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001cfe:	f7ff ff6d 	bl	8001bdc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <HAL_ADC_MspInit+0xe8>)
 8001d06:	639a      	str	r2, [r3, #56]	; 0x38
 8001d08:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <HAL_ADC_MspInit+0xe8>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d0e:	bf00      	nop
 8001d10:	3728      	adds	r7, #40	; 0x28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40012000 	.word	0x40012000
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020000 	.word	0x40020000
 8001d24:	200001d0 	.word	0x200001d0
 8001d28:	40026410 	.word	0x40026410

08001d2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08c      	sub	sp, #48	; 0x30
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 031c 	add.w	r3, r7, #28
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a41      	ldr	r2, [pc, #260]	; (8001e50 <HAL_SPI_MspInit+0x124>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d12c      	bne.n	8001da8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a3f      	ldr	r2, [pc, #252]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001d58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a38      	ldr	r2, [pc, #224]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d86:	23a0      	movs	r3, #160	; 0xa0
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d96:	2305      	movs	r3, #5
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f107 031c 	add.w	r3, r7, #28
 8001d9e:	4619      	mov	r1, r3
 8001da0:	482d      	ldr	r0, [pc, #180]	; (8001e58 <HAL_SPI_MspInit+0x12c>)
 8001da2:	f001 fb19 	bl	80033d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001da6:	e04f      	b.n	8001e48 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a2b      	ldr	r2, [pc, #172]	; (8001e5c <HAL_SPI_MspInit+0x130>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d14a      	bne.n	8001e48 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a26      	ldr	r2, [pc, #152]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc2:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a1f      	ldr	r2, [pc, #124]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e06:	2302      	movs	r3, #2
 8001e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001e16:	2307      	movs	r3, #7
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	4619      	mov	r1, r3
 8001e20:	480f      	ldr	r0, [pc, #60]	; (8001e60 <HAL_SPI_MspInit+0x134>)
 8001e22:	f001 fad9 	bl	80033d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e34:	2303      	movs	r3, #3
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e38:	2305      	movs	r3, #5
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3c:	f107 031c 	add.w	r3, r7, #28
 8001e40:	4619      	mov	r1, r3
 8001e42:	4808      	ldr	r0, [pc, #32]	; (8001e64 <HAL_SPI_MspInit+0x138>)
 8001e44:	f001 fac8 	bl	80033d8 <HAL_GPIO_Init>
}
 8001e48:	bf00      	nop
 8001e4a:	3730      	adds	r7, #48	; 0x30
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40013000 	.word	0x40013000
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40020000 	.word	0x40020000
 8001e5c:	40003800 	.word	0x40003800
 8001e60:	40020800 	.word	0x40020800
 8001e64:	40020400 	.word	0x40020400

08001e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e88:	d134      	bne.n	8001ef4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <HAL_TIM_Base_MspInit+0xcc>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4a28      	ldr	r2, [pc, #160]	; (8001f34 <HAL_TIM_Base_MspInit+0xcc>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <HAL_TIM_Base_MspInit+0xcc>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <HAL_TIM_Base_MspInit+0xcc>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a21      	ldr	r2, [pc, #132]	; (8001f34 <HAL_TIM_Base_MspInit+0xcc>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <HAL_TIM_Base_MspInit+0xcc>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed6:	f107 0314 	add.w	r3, r7, #20
 8001eda:	4619      	mov	r1, r3
 8001edc:	4816      	ldr	r0, [pc, #88]	; (8001f38 <HAL_TIM_Base_MspInit+0xd0>)
 8001ede:	f001 fa7b 	bl	80033d8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	201c      	movs	r0, #28
 8001ee8:	f000 feaf 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001eec:	201c      	movs	r0, #28
 8001eee:	f000 fec8 	bl	8002c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ef2:	e01a      	b.n	8001f2a <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a10      	ldr	r2, [pc, #64]	; (8001f3c <HAL_TIM_Base_MspInit+0xd4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d115      	bne.n	8001f2a <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <HAL_TIM_Base_MspInit+0xcc>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <HAL_TIM_Base_MspInit+0xcc>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_TIM_Base_MspInit+0xcc>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	201d      	movs	r0, #29
 8001f20:	f000 fe93 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f24:	201d      	movs	r0, #29
 8001f26:	f000 feac 	bl	8002c82 <HAL_NVIC_EnableIRQ>
}
 8001f2a:	bf00      	nop
 8001f2c:	3728      	adds	r7, #40	; 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40020000 	.word	0x40020000
 8001f3c:	40000400 	.word	0x40000400

08001f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1d      	ldr	r2, [pc, #116]	; (8001fd4 <HAL_UART_MspInit+0x94>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d133      	bne.n	8001fca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <HAL_UART_MspInit+0x98>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <HAL_UART_MspInit+0x98>)
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40
 8001f72:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_UART_MspInit+0x98>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_UART_MspInit+0x98>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <HAL_UART_MspInit+0x98>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_UART_MspInit+0x98>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f9a:	230c      	movs	r3, #12
 8001f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001faa:	2307      	movs	r3, #7
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4809      	ldr	r0, [pc, #36]	; (8001fdc <HAL_UART_MspInit+0x9c>)
 8001fb6:	f001 fa0f 	bl	80033d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2026      	movs	r0, #38	; 0x26
 8001fc0:	f000 fe43 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fc4:	2026      	movs	r0, #38	; 0x26
 8001fc6:	f000 fe5c 	bl	8002c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fca:	bf00      	nop
 8001fcc:	3728      	adds	r7, #40	; 0x28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40004400 	.word	0x40004400
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020000 	.word	0x40020000

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff2:	e7fe      	b.n	8001ff2 <HardFault_Handler+0x4>

08001ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <MemManage_Handler+0x4>

08001ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <BusFault_Handler+0x4>

08002000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002004:	e7fe      	b.n	8002004 <UsageFault_Handler+0x4>

08002006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002034:	f000 f8e8 	bl	8002208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}

0800203c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <TIM2_IRQHandler+0x10>)
 8002042:	f002 fbd5 	bl	80047f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200002c4 	.word	0x200002c4

08002050 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <TIM3_IRQHandler+0x10>)
 8002056:	f002 fbcb 	bl	80047f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000130 	.word	0x20000130

08002064 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <USART2_IRQHandler+0x10>)
 800206a:	f003 fadf 	bl	800562c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000304 	.word	0x20000304

08002078 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <DMA2_Stream0_IRQHandler+0x10>)
 800207e:	f000 ff43 	bl	8002f08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200001d0 	.word	0x200001d0

0800208c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <_sbrk+0x50>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <_sbrk+0x16>
		heap_end = &end;
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <_sbrk+0x50>)
 800209e:	4a10      	ldr	r2, [pc, #64]	; (80020e0 <_sbrk+0x54>)
 80020a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <_sbrk+0x50>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <_sbrk+0x50>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4413      	add	r3, r2
 80020b0:	466a      	mov	r2, sp
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d907      	bls.n	80020c6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020b6:	f004 f8b5 	bl	8006224 <__errno>
 80020ba:	4602      	mov	r2, r0
 80020bc:	230c      	movs	r3, #12
 80020be:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295
 80020c4:	e006      	b.n	80020d4 <_sbrk+0x48>
	}

	heap_end += incr;
 80020c6:	4b05      	ldr	r3, [pc, #20]	; (80020dc <_sbrk+0x50>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	4a03      	ldr	r2, [pc, #12]	; (80020dc <_sbrk+0x50>)
 80020d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80020d2:	68fb      	ldr	r3, [r7, #12]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	200000c0 	.word	0x200000c0
 80020e0:	20000350 	.word	0x20000350

080020e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <SystemInit+0x28>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ee:	4a07      	ldr	r2, [pc, #28]	; (800210c <SystemInit+0x28>)
 80020f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <SystemInit+0x28>)
 80020fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020fe:	609a      	str	r2, [r3, #8]
#endif
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002148 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002114:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002116:	e003      	b.n	8002120 <LoopCopyDataInit>

08002118 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800211a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800211c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800211e:	3104      	adds	r1, #4

08002120 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002120:	480b      	ldr	r0, [pc, #44]	; (8002150 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002124:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002126:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002128:	d3f6      	bcc.n	8002118 <CopyDataInit>
  ldr  r2, =_sbss
 800212a:	4a0b      	ldr	r2, [pc, #44]	; (8002158 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800212c:	e002      	b.n	8002134 <LoopFillZerobss>

0800212e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800212e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002130:	f842 3b04 	str.w	r3, [r2], #4

08002134 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002136:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002138:	d3f9      	bcc.n	800212e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800213a:	f7ff ffd3 	bl	80020e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800213e:	f004 f877 	bl	8006230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002142:	f7fe fe4d 	bl	8000de0 <main>
  bx  lr    
 8002146:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002148:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800214c:	08006420 	.word	0x08006420
  ldr  r0, =_sdata
 8002150:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002154:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002158:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 800215c:	2000034c 	.word	0x2000034c

08002160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002160:	e7fe      	b.n	8002160 <ADC_IRQHandler>
	...

08002164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_Init+0x40>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <HAL_Init+0x40>)
 800216e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002172:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_Init+0x40>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_Init+0x40>)
 800217a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800217e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_Init+0x40>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <HAL_Init+0x40>)
 8002186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800218c:	2003      	movs	r0, #3
 800218e:	f000 fd51 	bl	8002c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002192:	2000      	movs	r0, #0
 8002194:	f000 f808 	bl	80021a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002198:	f7ff fd28 	bl	8001bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023c00 	.word	0x40023c00

080021a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021b0:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_InitTick+0x54>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_InitTick+0x58>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021be:	fbb3 f3f1 	udiv	r3, r3, r1
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 fd69 	bl	8002c9e <HAL_SYSTICK_Config>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00e      	b.n	80021f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b0f      	cmp	r3, #15
 80021da:	d80a      	bhi.n	80021f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021dc:	2200      	movs	r2, #0
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f000 fd31 	bl	8002c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e8:	4a06      	ldr	r2, [pc, #24]	; (8002204 <HAL_InitTick+0x5c>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e000      	b.n	80021f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	2000000c 	.word	0x2000000c
 8002200:	20000014 	.word	0x20000014
 8002204:	20000010 	.word	0x20000010

08002208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_IncTick+0x20>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_IncTick+0x24>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4413      	add	r3, r2
 8002218:	4a04      	ldr	r2, [pc, #16]	; (800222c <HAL_IncTick+0x24>)
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000014 	.word	0x20000014
 800222c:	20000344 	.word	0x20000344

08002230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return uwTick;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <HAL_GetTick+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000344 	.word	0x20000344

08002248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff ffee 	bl	8002230 <HAL_GetTick>
 8002254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d005      	beq.n	800226e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_Delay+0x40>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800226e:	bf00      	nop
 8002270:	f7ff ffde 	bl	8002230 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	429a      	cmp	r2, r3
 800227e:	d8f7      	bhi.n	8002270 <HAL_Delay+0x28>
  {
  }
}
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000014 	.word	0x20000014

0800228c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e033      	b.n	800230a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff fcc6 	bl	8001c3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d118      	bne.n	80022fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022d2:	f023 0302 	bic.w	r3, r3, #2
 80022d6:	f043 0202 	orr.w	r2, r3, #2
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fa5a 	bl	8002798 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f023 0303 	bic.w	r3, r3, #3
 80022f2:	f043 0201 	orr.w	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
 80022fa:	e001      	b.n	8002300 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002308:	7bfb      	ldrb	r3, [r7, #15]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_ADC_Start_DMA+0x1e>
 800232e:	2302      	movs	r3, #2
 8002330:	e0cc      	b.n	80024cc <HAL_ADC_Start_DMA+0x1b8>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b01      	cmp	r3, #1
 8002346:	d018      	beq.n	800237a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002358:	4b5e      	ldr	r3, [pc, #376]	; (80024d4 <HAL_ADC_Start_DMA+0x1c0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a5e      	ldr	r2, [pc, #376]	; (80024d8 <HAL_ADC_Start_DMA+0x1c4>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0c9a      	lsrs	r2, r3, #18
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800236c:	e002      	b.n	8002374 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	3b01      	subs	r3, #1
 8002372:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f9      	bne.n	800236e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	f040 80a0 	bne.w	80024ca <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c8:	d106      	bne.n	80023d8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f023 0206 	bic.w	r2, r3, #6
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
 80023d6:	e002      	b.n	80023de <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023e6:	4b3d      	ldr	r3, [pc, #244]	; (80024dc <HAL_ADC_Start_DMA+0x1c8>)
 80023e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ee:	4a3c      	ldr	r2, [pc, #240]	; (80024e0 <HAL_ADC_Start_DMA+0x1cc>)
 80023f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f6:	4a3b      	ldr	r2, [pc, #236]	; (80024e4 <HAL_ADC_Start_DMA+0x1d0>)
 80023f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	4a3a      	ldr	r2, [pc, #232]	; (80024e8 <HAL_ADC_Start_DMA+0x1d4>)
 8002400:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800240a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800241a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800242a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	334c      	adds	r3, #76	; 0x4c
 8002436:	4619      	mov	r1, r3
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f000 fcea 	bl	8002e14 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	2b00      	cmp	r3, #0
 800244a:	d12a      	bne.n	80024a2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a26      	ldr	r2, [pc, #152]	; (80024ec <HAL_ADC_Start_DMA+0x1d8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d015      	beq.n	8002482 <HAL_ADC_Start_DMA+0x16e>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a25      	ldr	r2, [pc, #148]	; (80024f0 <HAL_ADC_Start_DMA+0x1dc>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d105      	bne.n	800246c <HAL_ADC_Start_DMA+0x158>
 8002460:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <HAL_ADC_Start_DMA+0x1c8>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a20      	ldr	r2, [pc, #128]	; (80024f4 <HAL_ADC_Start_DMA+0x1e0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d129      	bne.n	80024ca <HAL_ADC_Start_DMA+0x1b6>
 8002476:	4b19      	ldr	r3, [pc, #100]	; (80024dc <HAL_ADC_Start_DMA+0x1c8>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2b0f      	cmp	r3, #15
 8002480:	d823      	bhi.n	80024ca <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d11c      	bne.n	80024ca <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	e013      	b.n	80024ca <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a11      	ldr	r2, [pc, #68]	; (80024ec <HAL_ADC_Start_DMA+0x1d8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d10e      	bne.n	80024ca <HAL_ADC_Start_DMA+0x1b6>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d107      	bne.n	80024ca <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024c8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	2000000c 	.word	0x2000000c
 80024d8:	431bde83 	.word	0x431bde83
 80024dc:	40012300 	.word	0x40012300
 80024e0:	08002991 	.word	0x08002991
 80024e4:	08002a4b 	.word	0x08002a4b
 80024e8:	08002a67 	.word	0x08002a67
 80024ec:	40012000 	.word	0x40012000
 80024f0:	40012100 	.word	0x40012100
 80024f4:	40012200 	.word	0x40012200

080024f8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x1c>
 800254c:	2302      	movs	r3, #2
 800254e:	e113      	b.n	8002778 <HAL_ADC_ConfigChannel+0x244>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b09      	cmp	r3, #9
 800255e:	d925      	bls.n	80025ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68d9      	ldr	r1, [r3, #12]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	4613      	mov	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	3b1e      	subs	r3, #30
 8002576:	2207      	movs	r2, #7
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43da      	mvns	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	400a      	ands	r2, r1
 8002584:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68d9      	ldr	r1, [r3, #12]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	4618      	mov	r0, r3
 8002598:	4603      	mov	r3, r0
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4403      	add	r3, r0
 800259e:	3b1e      	subs	r3, #30
 80025a0:	409a      	lsls	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	e022      	b.n	80025f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6919      	ldr	r1, [r3, #16]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	2207      	movs	r2, #7
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	400a      	ands	r2, r1
 80025ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6919      	ldr	r1, [r3, #16]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	4618      	mov	r0, r3
 80025e2:	4603      	mov	r3, r0
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4403      	add	r3, r0
 80025e8:	409a      	lsls	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d824      	bhi.n	8002644 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	3b05      	subs	r3, #5
 800260c:	221f      	movs	r2, #31
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43da      	mvns	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	400a      	ands	r2, r1
 800261a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	b29b      	uxth	r3, r3
 8002628:	4618      	mov	r0, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	3b05      	subs	r3, #5
 8002636:	fa00 f203 	lsl.w	r2, r0, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	635a      	str	r2, [r3, #52]	; 0x34
 8002642:	e04c      	b.n	80026de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b0c      	cmp	r3, #12
 800264a:	d824      	bhi.n	8002696 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	3b23      	subs	r3, #35	; 0x23
 800265e:	221f      	movs	r2, #31
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43da      	mvns	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	400a      	ands	r2, r1
 800266c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	b29b      	uxth	r3, r3
 800267a:	4618      	mov	r0, r3
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	3b23      	subs	r3, #35	; 0x23
 8002688:	fa00 f203 	lsl.w	r2, r0, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
 8002694:	e023      	b.n	80026de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	3b41      	subs	r3, #65	; 0x41
 80026a8:	221f      	movs	r2, #31
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	400a      	ands	r2, r1
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	4618      	mov	r0, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	3b41      	subs	r3, #65	; 0x41
 80026d2:	fa00 f203 	lsl.w	r2, r0, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026de:	4b29      	ldr	r3, [pc, #164]	; (8002784 <HAL_ADC_ConfigChannel+0x250>)
 80026e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a28      	ldr	r2, [pc, #160]	; (8002788 <HAL_ADC_ConfigChannel+0x254>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d10f      	bne.n	800270c <HAL_ADC_ConfigChannel+0x1d8>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b12      	cmp	r3, #18
 80026f2:	d10b      	bne.n	800270c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1d      	ldr	r2, [pc, #116]	; (8002788 <HAL_ADC_ConfigChannel+0x254>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d12b      	bne.n	800276e <HAL_ADC_ConfigChannel+0x23a>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1c      	ldr	r2, [pc, #112]	; (800278c <HAL_ADC_ConfigChannel+0x258>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d003      	beq.n	8002728 <HAL_ADC_ConfigChannel+0x1f4>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b11      	cmp	r3, #17
 8002726:	d122      	bne.n	800276e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a11      	ldr	r2, [pc, #68]	; (800278c <HAL_ADC_ConfigChannel+0x258>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d111      	bne.n	800276e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <HAL_ADC_ConfigChannel+0x25c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a11      	ldr	r2, [pc, #68]	; (8002794 <HAL_ADC_ConfigChannel+0x260>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	0c9a      	lsrs	r2, r3, #18
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002760:	e002      	b.n	8002768 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	3b01      	subs	r3, #1
 8002766:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f9      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	40012300 	.word	0x40012300
 8002788:	40012000 	.word	0x40012000
 800278c:	10000012 	.word	0x10000012
 8002790:	2000000c 	.word	0x2000000c
 8002794:	431bde83 	.word	0x431bde83

08002798 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027a0:	4b79      	ldr	r3, [pc, #484]	; (8002988 <ADC_Init+0x1f0>)
 80027a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	431a      	orrs	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6859      	ldr	r1, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	021a      	lsls	r2, r3, #8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002812:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6899      	ldr	r1, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	4a58      	ldr	r2, [pc, #352]	; (800298c <ADC_Init+0x1f4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d022      	beq.n	8002876 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800283e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6899      	ldr	r1, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002860:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6899      	ldr	r1, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	e00f      	b.n	8002896 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002884:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002894:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0202 	bic.w	r2, r2, #2
 80028a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6899      	ldr	r1, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7e1b      	ldrb	r3, [r3, #24]
 80028b0:	005a      	lsls	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01b      	beq.n	80028fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	3b01      	subs	r3, #1
 80028f0:	035a      	lsls	r2, r3, #13
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	e007      	b.n	800290c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	3b01      	subs	r3, #1
 8002928:	051a      	lsls	r2, r3, #20
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002940:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6899      	ldr	r1, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800294e:	025a      	lsls	r2, r3, #9
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002966:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6899      	ldr	r1, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	029a      	lsls	r2, r3, #10
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	609a      	str	r2, [r3, #8]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	40012300 	.word	0x40012300
 800298c:	0f000001 	.word	0x0f000001

08002990 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d13c      	bne.n	8002a24 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d12b      	bne.n	8002a1c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d127      	bne.n	8002a1c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d006      	beq.n	80029e8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d119      	bne.n	8002a1c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0220 	bic.w	r2, r2, #32
 80029f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d105      	bne.n	8002a1c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	f043 0201 	orr.w	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f7ff fd6b 	bl	80024f8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a22:	e00e      	b.n	8002a42 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f7ff fd75 	bl	8002520 <HAL_ADC_ErrorCallback>
}
 8002a36:	e004      	b.n	8002a42 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	4798      	blx	r3
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7ff fd57 	bl	800250c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a72:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2240      	movs	r2, #64	; 0x40
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f043 0204 	orr.w	r2, r3, #4
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f7ff fd4a 	bl	8002520 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ac6:	4a04      	ldr	r2, [pc, #16]	; (8002ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	60d3      	str	r3, [r2, #12]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae0:	4b04      	ldr	r3, [pc, #16]	; (8002af4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	0a1b      	lsrs	r3, r3, #8
 8002ae6:	f003 0307 	and.w	r3, r3, #7
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	db0b      	blt.n	8002b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	f003 021f 	and.w	r2, r3, #31
 8002b10:	4907      	ldr	r1, [pc, #28]	; (8002b30 <__NVIC_EnableIRQ+0x38>)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	2001      	movs	r0, #1
 8002b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000e100 	.word	0xe000e100

08002b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	6039      	str	r1, [r7, #0]
 8002b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	db0a      	blt.n	8002b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	490c      	ldr	r1, [pc, #48]	; (8002b80 <__NVIC_SetPriority+0x4c>)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	0112      	lsls	r2, r2, #4
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	440b      	add	r3, r1
 8002b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b5c:	e00a      	b.n	8002b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4908      	ldr	r1, [pc, #32]	; (8002b84 <__NVIC_SetPriority+0x50>)
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	3b04      	subs	r3, #4
 8002b6c:	0112      	lsls	r2, r2, #4
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	440b      	add	r3, r1
 8002b72:	761a      	strb	r2, [r3, #24]
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000e100 	.word	0xe000e100
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b089      	sub	sp, #36	; 0x24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	bf28      	it	cs
 8002ba6:	2304      	movcs	r3, #4
 8002ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3304      	adds	r3, #4
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d902      	bls.n	8002bb8 <NVIC_EncodePriority+0x30>
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3b03      	subs	r3, #3
 8002bb6:	e000      	b.n	8002bba <NVIC_EncodePriority+0x32>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	401a      	ands	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	43d9      	mvns	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	4313      	orrs	r3, r2
         );
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3724      	adds	r7, #36	; 0x24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c00:	d301      	bcc.n	8002c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c02:	2301      	movs	r3, #1
 8002c04:	e00f      	b.n	8002c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c06:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <SysTick_Config+0x40>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c0e:	210f      	movs	r1, #15
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295
 8002c14:	f7ff ff8e 	bl	8002b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <SysTick_Config+0x40>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c1e:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <SysTick_Config+0x40>)
 8002c20:	2207      	movs	r2, #7
 8002c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	e000e010 	.word	0xe000e010

08002c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ff29 	bl	8002a94 <__NVIC_SetPriorityGrouping>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c5c:	f7ff ff3e 	bl	8002adc <__NVIC_GetPriorityGrouping>
 8002c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	6978      	ldr	r0, [r7, #20]
 8002c68:	f7ff ff8e 	bl	8002b88 <NVIC_EncodePriority>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff5d 	bl	8002b34 <__NVIC_SetPriority>
}
 8002c7a:	bf00      	nop
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	4603      	mov	r3, r0
 8002c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff31 	bl	8002af8 <__NVIC_EnableIRQ>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff ffa2 	bl	8002bf0 <SysTick_Config>
 8002cac:	4603      	mov	r3, r0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cc4:	f7ff fab4 	bl	8002230 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e099      	b.n	8002e08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf4:	e00f      	b.n	8002d16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cf6:	f7ff fa9b 	bl	8002230 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b05      	cmp	r3, #5
 8002d02:	d908      	bls.n	8002d16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e078      	b.n	8002e08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e8      	bne.n	8002cf6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	4b38      	ldr	r3, [pc, #224]	; (8002e10 <HAL_DMA_Init+0x158>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d107      	bne.n	8002d80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f023 0307 	bic.w	r3, r3, #7
 8002d96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d117      	bne.n	8002dda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00e      	beq.n	8002dda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fa91 	bl	80032e4 <DMA_CheckFifoParam>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2240      	movs	r2, #64	; 0x40
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e016      	b.n	8002e08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fa48 	bl	8003278 <DMA_CalcBaseAndBitshift>
 8002de8:	4603      	mov	r3, r0
 8002dea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	223f      	movs	r2, #63	; 0x3f
 8002df2:	409a      	lsls	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	f010803f 	.word	0xf010803f

08002e14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_DMA_Start_IT+0x26>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e040      	b.n	8002ebc <HAL_DMA_Start_IT+0xa8>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d12f      	bne.n	8002eae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2202      	movs	r2, #2
 8002e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f9da 	bl	800321c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6c:	223f      	movs	r2, #63	; 0x3f
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0216 	orr.w	r2, r2, #22
 8002e82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d007      	beq.n	8002e9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0208 	orr.w	r2, r2, #8
 8002e9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	e005      	b.n	8002eba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d004      	beq.n	8002ee2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2280      	movs	r2, #128	; 0x80
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e00c      	b.n	8002efc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2205      	movs	r2, #5
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f14:	4b92      	ldr	r3, [pc, #584]	; (8003160 <HAL_DMA_IRQHandler+0x258>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a92      	ldr	r2, [pc, #584]	; (8003164 <HAL_DMA_IRQHandler+0x25c>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	0a9b      	lsrs	r3, r3, #10
 8002f20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f32:	2208      	movs	r2, #8
 8002f34:	409a      	lsls	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d01a      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0204 	bic.w	r2, r2, #4
 8002f5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	2208      	movs	r2, #8
 8002f62:	409a      	lsls	r2, r3
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6c:	f043 0201 	orr.w	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f78:	2201      	movs	r2, #1
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d012      	beq.n	8002faa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f96:	2201      	movs	r2, #1
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa2:	f043 0202 	orr.w	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fae:	2204      	movs	r2, #4
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d012      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00b      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	2204      	movs	r2, #4
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd8:	f043 0204 	orr.w	r2, r3, #4
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	2210      	movs	r2, #16
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d043      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d03c      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003002:	2210      	movs	r2, #16
 8003004:	409a      	lsls	r2, r3
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d018      	beq.n	800304a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d108      	bne.n	8003038 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d024      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	4798      	blx	r3
 8003036:	e01f      	b.n	8003078 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01b      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4798      	blx	r3
 8003048:	e016      	b.n	8003078 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d107      	bne.n	8003068 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0208 	bic.w	r2, r2, #8
 8003066:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	2220      	movs	r2, #32
 800307e:	409a      	lsls	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 808e 	beq.w	80031a6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8086 	beq.w	80031a6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	2220      	movs	r2, #32
 80030a0:	409a      	lsls	r2, r3
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	d136      	bne.n	8003120 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0216 	bic.w	r2, r2, #22
 80030c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d103      	bne.n	80030e2 <HAL_DMA_IRQHandler+0x1da>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0208 	bic.w	r2, r2, #8
 80030f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f6:	223f      	movs	r2, #63	; 0x3f
 80030f8:	409a      	lsls	r2, r3
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003112:	2b00      	cmp	r3, #0
 8003114:	d07d      	beq.n	8003212 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4798      	blx	r3
        }
        return;
 800311e:	e078      	b.n	8003212 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01c      	beq.n	8003168 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d108      	bne.n	800314e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	2b00      	cmp	r3, #0
 8003142:	d030      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	4798      	blx	r3
 800314c:	e02b      	b.n	80031a6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d027      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	4798      	blx	r3
 800315e:	e022      	b.n	80031a6 <HAL_DMA_IRQHandler+0x29e>
 8003160:	2000000c 	.word	0x2000000c
 8003164:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10f      	bne.n	8003196 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0210 	bic.w	r2, r2, #16
 8003184:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d032      	beq.n	8003214 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d022      	beq.n	8003200 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2205      	movs	r2, #5
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0201 	bic.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	3301      	adds	r3, #1
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d307      	bcc.n	80031ee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f2      	bne.n	80031d2 <HAL_DMA_IRQHandler+0x2ca>
 80031ec:	e000      	b.n	80031f0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031ee:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	4798      	blx	r3
 8003210:	e000      	b.n	8003214 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003212:	bf00      	nop
    }
  }
}
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop

0800321c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003238:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b40      	cmp	r3, #64	; 0x40
 8003248:	d108      	bne.n	800325c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800325a:	e007      	b.n	800326c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	60da      	str	r2, [r3, #12]
}
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	3b10      	subs	r3, #16
 8003288:	4a14      	ldr	r2, [pc, #80]	; (80032dc <DMA_CalcBaseAndBitshift+0x64>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003292:	4a13      	ldr	r2, [pc, #76]	; (80032e0 <DMA_CalcBaseAndBitshift+0x68>)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d909      	bls.n	80032ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032ae:	f023 0303 	bic.w	r3, r3, #3
 80032b2:	1d1a      	adds	r2, r3, #4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	659a      	str	r2, [r3, #88]	; 0x58
 80032b8:	e007      	b.n	80032ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032c2:	f023 0303 	bic.w	r3, r3, #3
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	aaaaaaab 	.word	0xaaaaaaab
 80032e0:	08006408 	.word	0x08006408

080032e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d11f      	bne.n	800333e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b03      	cmp	r3, #3
 8003302:	d855      	bhi.n	80033b0 <DMA_CheckFifoParam+0xcc>
 8003304:	a201      	add	r2, pc, #4	; (adr r2, 800330c <DMA_CheckFifoParam+0x28>)
 8003306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330a:	bf00      	nop
 800330c:	0800331d 	.word	0x0800331d
 8003310:	0800332f 	.word	0x0800332f
 8003314:	0800331d 	.word	0x0800331d
 8003318:	080033b1 	.word	0x080033b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d045      	beq.n	80033b4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800332c:	e042      	b.n	80033b4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003336:	d13f      	bne.n	80033b8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800333c:	e03c      	b.n	80033b8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003346:	d121      	bne.n	800338c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b03      	cmp	r3, #3
 800334c:	d836      	bhi.n	80033bc <DMA_CheckFifoParam+0xd8>
 800334e:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <DMA_CheckFifoParam+0x70>)
 8003350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003354:	08003365 	.word	0x08003365
 8003358:	0800336b 	.word	0x0800336b
 800335c:	08003365 	.word	0x08003365
 8003360:	0800337d 	.word	0x0800337d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
      break;
 8003368:	e02f      	b.n	80033ca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d024      	beq.n	80033c0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800337a:	e021      	b.n	80033c0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003384:	d11e      	bne.n	80033c4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800338a:	e01b      	b.n	80033c4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d902      	bls.n	8003398 <DMA_CheckFifoParam+0xb4>
 8003392:	2b03      	cmp	r3, #3
 8003394:	d003      	beq.n	800339e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003396:	e018      	b.n	80033ca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
      break;
 800339c:	e015      	b.n	80033ca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00e      	beq.n	80033c8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	73fb      	strb	r3, [r7, #15]
      break;
 80033ae:	e00b      	b.n	80033c8 <DMA_CheckFifoParam+0xe4>
      break;
 80033b0:	bf00      	nop
 80033b2:	e00a      	b.n	80033ca <DMA_CheckFifoParam+0xe6>
      break;
 80033b4:	bf00      	nop
 80033b6:	e008      	b.n	80033ca <DMA_CheckFifoParam+0xe6>
      break;
 80033b8:	bf00      	nop
 80033ba:	e006      	b.n	80033ca <DMA_CheckFifoParam+0xe6>
      break;
 80033bc:	bf00      	nop
 80033be:	e004      	b.n	80033ca <DMA_CheckFifoParam+0xe6>
      break;
 80033c0:	bf00      	nop
 80033c2:	e002      	b.n	80033ca <DMA_CheckFifoParam+0xe6>
      break;   
 80033c4:	bf00      	nop
 80033c6:	e000      	b.n	80033ca <DMA_CheckFifoParam+0xe6>
      break;
 80033c8:	bf00      	nop
    }
  } 
  
  return status; 
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d8:	b480      	push	{r7}
 80033da:	b089      	sub	sp, #36	; 0x24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	e165      	b.n	80036c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033f4:	2201      	movs	r2, #1
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4013      	ands	r3, r2
 8003406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	429a      	cmp	r2, r3
 800340e:	f040 8154 	bne.w	80036ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d00b      	beq.n	8003432 <HAL_GPIO_Init+0x5a>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d007      	beq.n	8003432 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003426:	2b11      	cmp	r3, #17
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b12      	cmp	r3, #18
 8003430:	d130      	bne.n	8003494 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	2203      	movs	r2, #3
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003468:	2201      	movs	r2, #1
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f003 0201 	and.w	r2, r3, #1
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	2203      	movs	r2, #3
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0xfc>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b12      	cmp	r3, #18
 80034d2:	d123      	bne.n	800351c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	08da      	lsrs	r2, r3, #3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3208      	adds	r2, #8
 80034dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	220f      	movs	r2, #15
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	08da      	lsrs	r2, r3, #3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3208      	adds	r2, #8
 8003516:	69b9      	ldr	r1, [r7, #24]
 8003518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	2203      	movs	r2, #3
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 0203 	and.w	r2, r3, #3
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80ae 	beq.w	80036ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	4b5c      	ldr	r3, [pc, #368]	; (80036d4 <HAL_GPIO_Init+0x2fc>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	4a5b      	ldr	r2, [pc, #364]	; (80036d4 <HAL_GPIO_Init+0x2fc>)
 8003568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800356c:	6453      	str	r3, [r2, #68]	; 0x44
 800356e:	4b59      	ldr	r3, [pc, #356]	; (80036d4 <HAL_GPIO_Init+0x2fc>)
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800357a:	4a57      	ldr	r2, [pc, #348]	; (80036d8 <HAL_GPIO_Init+0x300>)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	089b      	lsrs	r3, r3, #2
 8003580:	3302      	adds	r3, #2
 8003582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	220f      	movs	r2, #15
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4e      	ldr	r2, [pc, #312]	; (80036dc <HAL_GPIO_Init+0x304>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d025      	beq.n	80035f2 <HAL_GPIO_Init+0x21a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a4d      	ldr	r2, [pc, #308]	; (80036e0 <HAL_GPIO_Init+0x308>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d01f      	beq.n	80035ee <HAL_GPIO_Init+0x216>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a4c      	ldr	r2, [pc, #304]	; (80036e4 <HAL_GPIO_Init+0x30c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d019      	beq.n	80035ea <HAL_GPIO_Init+0x212>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a4b      	ldr	r2, [pc, #300]	; (80036e8 <HAL_GPIO_Init+0x310>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <HAL_GPIO_Init+0x20e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a4a      	ldr	r2, [pc, #296]	; (80036ec <HAL_GPIO_Init+0x314>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00d      	beq.n	80035e2 <HAL_GPIO_Init+0x20a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a49      	ldr	r2, [pc, #292]	; (80036f0 <HAL_GPIO_Init+0x318>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d007      	beq.n	80035de <HAL_GPIO_Init+0x206>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a48      	ldr	r2, [pc, #288]	; (80036f4 <HAL_GPIO_Init+0x31c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d101      	bne.n	80035da <HAL_GPIO_Init+0x202>
 80035d6:	2306      	movs	r3, #6
 80035d8:	e00c      	b.n	80035f4 <HAL_GPIO_Init+0x21c>
 80035da:	2307      	movs	r3, #7
 80035dc:	e00a      	b.n	80035f4 <HAL_GPIO_Init+0x21c>
 80035de:	2305      	movs	r3, #5
 80035e0:	e008      	b.n	80035f4 <HAL_GPIO_Init+0x21c>
 80035e2:	2304      	movs	r3, #4
 80035e4:	e006      	b.n	80035f4 <HAL_GPIO_Init+0x21c>
 80035e6:	2303      	movs	r3, #3
 80035e8:	e004      	b.n	80035f4 <HAL_GPIO_Init+0x21c>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e002      	b.n	80035f4 <HAL_GPIO_Init+0x21c>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <HAL_GPIO_Init+0x21c>
 80035f2:	2300      	movs	r3, #0
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	f002 0203 	and.w	r2, r2, #3
 80035fa:	0092      	lsls	r2, r2, #2
 80035fc:	4093      	lsls	r3, r2
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4313      	orrs	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003604:	4934      	ldr	r1, [pc, #208]	; (80036d8 <HAL_GPIO_Init+0x300>)
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	089b      	lsrs	r3, r3, #2
 800360a:	3302      	adds	r3, #2
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003612:	4b39      	ldr	r3, [pc, #228]	; (80036f8 <HAL_GPIO_Init+0x320>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003636:	4a30      	ldr	r2, [pc, #192]	; (80036f8 <HAL_GPIO_Init+0x320>)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800363c:	4b2e      	ldr	r3, [pc, #184]	; (80036f8 <HAL_GPIO_Init+0x320>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003660:	4a25      	ldr	r2, [pc, #148]	; (80036f8 <HAL_GPIO_Init+0x320>)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003666:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <HAL_GPIO_Init+0x320>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	43db      	mvns	r3, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800368a:	4a1b      	ldr	r2, [pc, #108]	; (80036f8 <HAL_GPIO_Init+0x320>)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003690:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <HAL_GPIO_Init+0x320>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036b4:	4a10      	ldr	r2, [pc, #64]	; (80036f8 <HAL_GPIO_Init+0x320>)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3301      	adds	r3, #1
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2b0f      	cmp	r3, #15
 80036c4:	f67f ae96 	bls.w	80033f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036c8:	bf00      	nop
 80036ca:	3724      	adds	r7, #36	; 0x24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40013800 	.word	0x40013800
 80036dc:	40020000 	.word	0x40020000
 80036e0:	40020400 	.word	0x40020400
 80036e4:	40020800 	.word	0x40020800
 80036e8:	40020c00 	.word	0x40020c00
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40021400 	.word	0x40021400
 80036f4:	40021800 	.word	0x40021800
 80036f8:	40013c00 	.word	0x40013c00

080036fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
 8003708:	4613      	mov	r3, r2
 800370a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800370c:	787b      	ldrb	r3, [r7, #1]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003712:	887a      	ldrh	r2, [r7, #2]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003718:	e003      	b.n	8003722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800371a:	887b      	ldrh	r3, [r7, #2]
 800371c:	041a      	lsls	r2, r3, #16
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	619a      	str	r2, [r3, #24]
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	460b      	mov	r3, r1
 8003738:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	887b      	ldrh	r3, [r7, #2]
 8003740:	401a      	ands	r2, r3
 8003742:	887b      	ldrh	r3, [r7, #2]
 8003744:	429a      	cmp	r2, r3
 8003746:	d104      	bne.n	8003752 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003748:	887b      	ldrh	r3, [r7, #2]
 800374a:	041a      	lsls	r2, r3, #16
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003750:	e002      	b.n	8003758 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003752:	887a      	ldrh	r2, [r7, #2]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	619a      	str	r2, [r3, #24]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	603b      	str	r3, [r7, #0]
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	4a1f      	ldr	r2, [pc, #124]	; (80037f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800377c:	6413      	str	r3, [r2, #64]	; 0x40
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800378a:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003790:	f7fe fd4e 	bl	8002230 <HAL_GetTick>
 8003794:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003796:	e009      	b.n	80037ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003798:	f7fe fd4a 	bl	8002230 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037a6:	d901      	bls.n	80037ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e01f      	b.n	80037ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037ac:	4b13      	ldr	r3, [pc, #76]	; (80037fc <HAL_PWREx_EnableOverDrive+0x98>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b8:	d1ee      	bne.n	8003798 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037ba:	4b11      	ldr	r3, [pc, #68]	; (8003800 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037bc:	2201      	movs	r2, #1
 80037be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037c0:	f7fe fd36 	bl	8002230 <HAL_GetTick>
 80037c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037c6:	e009      	b.n	80037dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037c8:	f7fe fd32 	bl	8002230 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037d6:	d901      	bls.n	80037dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e007      	b.n	80037ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037dc:	4b07      	ldr	r3, [pc, #28]	; (80037fc <HAL_PWREx_EnableOverDrive+0x98>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037e8:	d1ee      	bne.n	80037c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40023800 	.word	0x40023800
 80037f8:	420e0040 	.word	0x420e0040
 80037fc:	40007000 	.word	0x40007000
 8003800:	420e0044 	.word	0x420e0044

08003804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0cc      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003818:	4b68      	ldr	r3, [pc, #416]	; (80039bc <HAL_RCC_ClockConfig+0x1b8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d90c      	bls.n	8003840 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003826:	4b65      	ldr	r3, [pc, #404]	; (80039bc <HAL_RCC_ClockConfig+0x1b8>)
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800382e:	4b63      	ldr	r3, [pc, #396]	; (80039bc <HAL_RCC_ClockConfig+0x1b8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d001      	beq.n	8003840 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0b8      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d020      	beq.n	800388e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003858:	4b59      	ldr	r3, [pc, #356]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4a58      	ldr	r2, [pc, #352]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003862:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003870:	4b53      	ldr	r3, [pc, #332]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4a52      	ldr	r2, [pc, #328]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800387a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800387c:	4b50      	ldr	r3, [pc, #320]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	494d      	ldr	r1, [pc, #308]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	4313      	orrs	r3, r2
 800388c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d044      	beq.n	8003924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d107      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a2:	4b47      	ldr	r3, [pc, #284]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d119      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e07f      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d003      	beq.n	80038c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d107      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c2:	4b3f      	ldr	r3, [pc, #252]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e06f      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d2:	4b3b      	ldr	r3, [pc, #236]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e067      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038e2:	4b37      	ldr	r3, [pc, #220]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f023 0203 	bic.w	r2, r3, #3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	4934      	ldr	r1, [pc, #208]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f4:	f7fe fc9c 	bl	8002230 <HAL_GetTick>
 80038f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fa:	e00a      	b.n	8003912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038fc:	f7fe fc98 	bl	8002230 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	f241 3288 	movw	r2, #5000	; 0x1388
 800390a:	4293      	cmp	r3, r2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e04f      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003912:	4b2b      	ldr	r3, [pc, #172]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 020c 	and.w	r2, r3, #12
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	429a      	cmp	r2, r3
 8003922:	d1eb      	bne.n	80038fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003924:	4b25      	ldr	r3, [pc, #148]	; (80039bc <HAL_RCC_ClockConfig+0x1b8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d20c      	bcs.n	800394c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003932:	4b22      	ldr	r3, [pc, #136]	; (80039bc <HAL_RCC_ClockConfig+0x1b8>)
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393a:	4b20      	ldr	r3, [pc, #128]	; (80039bc <HAL_RCC_ClockConfig+0x1b8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e032      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003958:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4916      	ldr	r1, [pc, #88]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	4313      	orrs	r3, r2
 8003968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003976:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	490e      	ldr	r1, [pc, #56]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800398a:	f000 f855 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 800398e:	4601      	mov	r1, r0
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	091b      	lsrs	r3, r3, #4
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <HAL_RCC_ClockConfig+0x1c0>)
 800399c:	5cd3      	ldrb	r3, [r2, r3]
 800399e:	fa21 f303 	lsr.w	r3, r1, r3
 80039a2:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <HAL_RCC_ClockConfig+0x1c4>)
 80039a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039a6:	4b09      	ldr	r3, [pc, #36]	; (80039cc <HAL_RCC_ClockConfig+0x1c8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe fbfc 	bl	80021a8 <HAL_InitTick>

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40023c00 	.word	0x40023c00
 80039c0:	40023800 	.word	0x40023800
 80039c4:	080063f0 	.word	0x080063f0
 80039c8:	2000000c 	.word	0x2000000c
 80039cc:	20000010 	.word	0x20000010

080039d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d4:	4b03      	ldr	r3, [pc, #12]	; (80039e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039d6:	681b      	ldr	r3, [r3, #0]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	2000000c 	.word	0x2000000c

080039e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039ec:	f7ff fff0 	bl	80039d0 <HAL_RCC_GetHCLKFreq>
 80039f0:	4601      	mov	r1, r0
 80039f2:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	0a9b      	lsrs	r3, r3, #10
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	4a03      	ldr	r2, [pc, #12]	; (8003a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80039fe:	5cd3      	ldrb	r3, [r2, r3]
 8003a00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	08006400 	.word	0x08006400

08003a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a14:	f7ff ffdc 	bl	80039d0 <HAL_RCC_GetHCLKFreq>
 8003a18:	4601      	mov	r1, r0
 8003a1a:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	0b5b      	lsrs	r3, r3, #13
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	4a03      	ldr	r2, [pc, #12]	; (8003a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a26:	5cd3      	ldrb	r3, [r2, r3]
 8003a28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40023800 	.word	0x40023800
 8003a34:	08006400 	.word	0x08006400

08003a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a52:	4b9f      	ldr	r3, [pc, #636]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b0c      	cmp	r3, #12
 8003a5c:	f200 8130 	bhi.w	8003cc0 <HAL_RCC_GetSysClockFreq+0x288>
 8003a60:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <HAL_RCC_GetSysClockFreq+0x30>)
 8003a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a66:	bf00      	nop
 8003a68:	08003a9d 	.word	0x08003a9d
 8003a6c:	08003cc1 	.word	0x08003cc1
 8003a70:	08003cc1 	.word	0x08003cc1
 8003a74:	08003cc1 	.word	0x08003cc1
 8003a78:	08003aa3 	.word	0x08003aa3
 8003a7c:	08003cc1 	.word	0x08003cc1
 8003a80:	08003cc1 	.word	0x08003cc1
 8003a84:	08003cc1 	.word	0x08003cc1
 8003a88:	08003aa9 	.word	0x08003aa9
 8003a8c:	08003cc1 	.word	0x08003cc1
 8003a90:	08003cc1 	.word	0x08003cc1
 8003a94:	08003cc1 	.word	0x08003cc1
 8003a98:	08003bb7 	.word	0x08003bb7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a9c:	4b8d      	ldr	r3, [pc, #564]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x29c>)
 8003a9e:	613b      	str	r3, [r7, #16]
       break;
 8003aa0:	e111      	b.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aa2:	4b8d      	ldr	r3, [pc, #564]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003aa4:	613b      	str	r3, [r7, #16]
      break;
 8003aa6:	e10e      	b.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aa8:	4b89      	ldr	r3, [pc, #548]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ab2:	4b87      	ldr	r3, [pc, #540]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d023      	beq.n	8003b06 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003abe:	4b84      	ldr	r3, [pc, #528]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	099b      	lsrs	r3, r3, #6
 8003ac4:	f04f 0400 	mov.w	r4, #0
 8003ac8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	ea03 0501 	and.w	r5, r3, r1
 8003ad4:	ea04 0602 	and.w	r6, r4, r2
 8003ad8:	4a7f      	ldr	r2, [pc, #508]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003ada:	fb02 f106 	mul.w	r1, r2, r6
 8003ade:	2200      	movs	r2, #0
 8003ae0:	fb02 f205 	mul.w	r2, r2, r5
 8003ae4:	440a      	add	r2, r1
 8003ae6:	497c      	ldr	r1, [pc, #496]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003ae8:	fba5 0101 	umull	r0, r1, r5, r1
 8003aec:	1853      	adds	r3, r2, r1
 8003aee:	4619      	mov	r1, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f04f 0400 	mov.w	r4, #0
 8003af6:	461a      	mov	r2, r3
 8003af8:	4623      	mov	r3, r4
 8003afa:	f7fc ffa3 	bl	8000a44 <__aeabi_uldivmod>
 8003afe:	4603      	mov	r3, r0
 8003b00:	460c      	mov	r4, r1
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	e049      	b.n	8003b9a <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b06:	4b72      	ldr	r3, [pc, #456]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	099b      	lsrs	r3, r3, #6
 8003b0c:	f04f 0400 	mov.w	r4, #0
 8003b10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	ea03 0501 	and.w	r5, r3, r1
 8003b1c:	ea04 0602 	and.w	r6, r4, r2
 8003b20:	4629      	mov	r1, r5
 8003b22:	4632      	mov	r2, r6
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	f04f 0400 	mov.w	r4, #0
 8003b2c:	0154      	lsls	r4, r2, #5
 8003b2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b32:	014b      	lsls	r3, r1, #5
 8003b34:	4619      	mov	r1, r3
 8003b36:	4622      	mov	r2, r4
 8003b38:	1b49      	subs	r1, r1, r5
 8003b3a:	eb62 0206 	sbc.w	r2, r2, r6
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	f04f 0400 	mov.w	r4, #0
 8003b46:	0194      	lsls	r4, r2, #6
 8003b48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b4c:	018b      	lsls	r3, r1, #6
 8003b4e:	1a5b      	subs	r3, r3, r1
 8003b50:	eb64 0402 	sbc.w	r4, r4, r2
 8003b54:	f04f 0100 	mov.w	r1, #0
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	00e2      	lsls	r2, r4, #3
 8003b5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b62:	00d9      	lsls	r1, r3, #3
 8003b64:	460b      	mov	r3, r1
 8003b66:	4614      	mov	r4, r2
 8003b68:	195b      	adds	r3, r3, r5
 8003b6a:	eb44 0406 	adc.w	r4, r4, r6
 8003b6e:	f04f 0100 	mov.w	r1, #0
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	02a2      	lsls	r2, r4, #10
 8003b78:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b7c:	0299      	lsls	r1, r3, #10
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4614      	mov	r4, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	4621      	mov	r1, r4
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f04f 0400 	mov.w	r4, #0
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4623      	mov	r3, r4
 8003b90:	f7fc ff58 	bl	8000a44 <__aeabi_uldivmod>
 8003b94:	4603      	mov	r3, r0
 8003b96:	460c      	mov	r4, r1
 8003b98:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b9a:	4b4d      	ldr	r3, [pc, #308]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	0c1b      	lsrs	r3, r3, #16
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	613b      	str	r3, [r7, #16]
      break;
 8003bb4:	e087      	b.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bb6:	4b46      	ldr	r3, [pc, #280]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bbe:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bc0:	4b43      	ldr	r3, [pc, #268]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d023      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bcc:	4b40      	ldr	r3, [pc, #256]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	099b      	lsrs	r3, r3, #6
 8003bd2:	f04f 0400 	mov.w	r4, #0
 8003bd6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	ea03 0501 	and.w	r5, r3, r1
 8003be2:	ea04 0602 	and.w	r6, r4, r2
 8003be6:	4a3c      	ldr	r2, [pc, #240]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003be8:	fb02 f106 	mul.w	r1, r2, r6
 8003bec:	2200      	movs	r2, #0
 8003bee:	fb02 f205 	mul.w	r2, r2, r5
 8003bf2:	440a      	add	r2, r1
 8003bf4:	4938      	ldr	r1, [pc, #224]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003bf6:	fba5 0101 	umull	r0, r1, r5, r1
 8003bfa:	1853      	adds	r3, r2, r1
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f04f 0400 	mov.w	r4, #0
 8003c04:	461a      	mov	r2, r3
 8003c06:	4623      	mov	r3, r4
 8003c08:	f7fc ff1c 	bl	8000a44 <__aeabi_uldivmod>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	460c      	mov	r4, r1
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	e049      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c14:	4b2e      	ldr	r3, [pc, #184]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	099b      	lsrs	r3, r3, #6
 8003c1a:	f04f 0400 	mov.w	r4, #0
 8003c1e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	ea03 0501 	and.w	r5, r3, r1
 8003c2a:	ea04 0602 	and.w	r6, r4, r2
 8003c2e:	4629      	mov	r1, r5
 8003c30:	4632      	mov	r2, r6
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	f04f 0400 	mov.w	r4, #0
 8003c3a:	0154      	lsls	r4, r2, #5
 8003c3c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c40:	014b      	lsls	r3, r1, #5
 8003c42:	4619      	mov	r1, r3
 8003c44:	4622      	mov	r2, r4
 8003c46:	1b49      	subs	r1, r1, r5
 8003c48:	eb62 0206 	sbc.w	r2, r2, r6
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	f04f 0400 	mov.w	r4, #0
 8003c54:	0194      	lsls	r4, r2, #6
 8003c56:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c5a:	018b      	lsls	r3, r1, #6
 8003c5c:	1a5b      	subs	r3, r3, r1
 8003c5e:	eb64 0402 	sbc.w	r4, r4, r2
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	00e2      	lsls	r2, r4, #3
 8003c6c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c70:	00d9      	lsls	r1, r3, #3
 8003c72:	460b      	mov	r3, r1
 8003c74:	4614      	mov	r4, r2
 8003c76:	195b      	adds	r3, r3, r5
 8003c78:	eb44 0406 	adc.w	r4, r4, r6
 8003c7c:	f04f 0100 	mov.w	r1, #0
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	02a2      	lsls	r2, r4, #10
 8003c86:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003c8a:	0299      	lsls	r1, r3, #10
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4614      	mov	r4, r2
 8003c90:	4618      	mov	r0, r3
 8003c92:	4621      	mov	r1, r4
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f04f 0400 	mov.w	r4, #0
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	4623      	mov	r3, r4
 8003c9e:	f7fc fed1 	bl	8000a44 <__aeabi_uldivmod>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	460c      	mov	r4, r1
 8003ca6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x298>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	0f1b      	lsrs	r3, r3, #28
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	613b      	str	r3, [r7, #16]
      break;
 8003cbe:	e002      	b.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cc0:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x29c>)
 8003cc2:	613b      	str	r3, [r7, #16]
      break;
 8003cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cc6:	693b      	ldr	r3, [r7, #16]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	00f42400 	.word	0x00f42400
 8003cd8:	017d7840 	.word	0x017d7840

08003cdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8083 	beq.w	8003dfc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cf6:	4b95      	ldr	r3, [pc, #596]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d019      	beq.n	8003d36 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d02:	4b92      	ldr	r3, [pc, #584]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d106      	bne.n	8003d1c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d0e:	4b8f      	ldr	r3, [pc, #572]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d1a:	d00c      	beq.n	8003d36 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1c:	4b8b      	ldr	r3, [pc, #556]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d24:	2b0c      	cmp	r3, #12
 8003d26:	d112      	bne.n	8003d4e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d28:	4b88      	ldr	r3, [pc, #544]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d34:	d10b      	bne.n	8003d4e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d36:	4b85      	ldr	r3, [pc, #532]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d05b      	beq.n	8003dfa <HAL_RCC_OscConfig+0x11e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d157      	bne.n	8003dfa <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e216      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d56:	d106      	bne.n	8003d66 <HAL_RCC_OscConfig+0x8a>
 8003d58:	4b7c      	ldr	r3, [pc, #496]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a7b      	ldr	r2, [pc, #492]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	e01d      	b.n	8003da2 <HAL_RCC_OscConfig+0xc6>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d6e:	d10c      	bne.n	8003d8a <HAL_RCC_OscConfig+0xae>
 8003d70:	4b76      	ldr	r3, [pc, #472]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a75      	ldr	r2, [pc, #468]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	4b73      	ldr	r3, [pc, #460]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a72      	ldr	r2, [pc, #456]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	e00b      	b.n	8003da2 <HAL_RCC_OscConfig+0xc6>
 8003d8a:	4b70      	ldr	r3, [pc, #448]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a6f      	ldr	r2, [pc, #444]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b6d      	ldr	r3, [pc, #436]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6c      	ldr	r2, [pc, #432]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d013      	beq.n	8003dd2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003daa:	f7fe fa41 	bl	8002230 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003db2:	f7fe fa3d 	bl	8002230 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b64      	cmp	r3, #100	; 0x64
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e1db      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc4:	4b61      	ldr	r3, [pc, #388]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0xd6>
 8003dd0:	e014      	b.n	8003dfc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd2:	f7fe fa2d 	bl	8002230 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dda:	f7fe fa29 	bl	8002230 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b64      	cmp	r3, #100	; 0x64
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e1c7      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dec:	4b57      	ldr	r3, [pc, #348]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1f0      	bne.n	8003dda <HAL_RCC_OscConfig+0xfe>
 8003df8:	e000      	b.n	8003dfc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d06f      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e08:	4b50      	ldr	r3, [pc, #320]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 030c 	and.w	r3, r3, #12
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d017      	beq.n	8003e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e14:	4b4d      	ldr	r3, [pc, #308]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d105      	bne.n	8003e2c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e20:	4b4a      	ldr	r3, [pc, #296]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00b      	beq.n	8003e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2c:	4b47      	ldr	r3, [pc, #284]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e34:	2b0c      	cmp	r3, #12
 8003e36:	d11c      	bne.n	8003e72 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e38:	4b44      	ldr	r3, [pc, #272]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d116      	bne.n	8003e72 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e44:	4b41      	ldr	r3, [pc, #260]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_OscConfig+0x180>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e18f      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5c:	4b3b      	ldr	r3, [pc, #236]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4938      	ldr	r1, [pc, #224]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e70:	e03a      	b.n	8003ee8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d020      	beq.n	8003ebc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e7a:	4b35      	ldr	r3, [pc, #212]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fe f9d6 	bl	8002230 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e88:	f7fe f9d2 	bl	8002230 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e170      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9a:	4b2c      	ldr	r3, [pc, #176]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea6:	4b29      	ldr	r3, [pc, #164]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4925      	ldr	r1, [pc, #148]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
 8003eba:	e015      	b.n	8003ee8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebc:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec2:	f7fe f9b5 	bl	8002230 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eca:	f7fe f9b1 	bl	8002230 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e14f      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003edc:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f0      	bne.n	8003eca <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d037      	beq.n	8003f64 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d016      	beq.n	8003f2a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efc:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <HAL_RCC_OscConfig+0x278>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f02:	f7fe f995 	bl	8002230 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f0a:	f7fe f991 	bl	8002230 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e12f      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <HAL_RCC_OscConfig+0x270>)
 8003f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0f0      	beq.n	8003f0a <HAL_RCC_OscConfig+0x22e>
 8003f28:	e01c      	b.n	8003f64 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <HAL_RCC_OscConfig+0x278>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f30:	f7fe f97e 	bl	8002230 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f36:	e00f      	b.n	8003f58 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f38:	f7fe f97a 	bl	8002230 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d908      	bls.n	8003f58 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e118      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
 8003f4a:	bf00      	nop
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	42470000 	.word	0x42470000
 8003f54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f58:	4b8a      	ldr	r3, [pc, #552]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8003f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e9      	bne.n	8003f38 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8097 	beq.w	80040a0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f72:	2300      	movs	r3, #0
 8003f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f76:	4b83      	ldr	r3, [pc, #524]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10f      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	4b7f      	ldr	r3, [pc, #508]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	4a7e      	ldr	r2, [pc, #504]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8003f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f90:	6413      	str	r3, [r2, #64]	; 0x40
 8003f92:	4b7c      	ldr	r3, [pc, #496]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa2:	4b79      	ldr	r3, [pc, #484]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d118      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fae:	4b76      	ldr	r3, [pc, #472]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a75      	ldr	r2, [pc, #468]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8003fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fba:	f7fe f939 	bl	8002230 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc2:	f7fe f935 	bl	8002230 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e0d3      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd4:	4b6c      	ldr	r3, [pc, #432]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x31a>
 8003fe8:	4b66      	ldr	r3, [pc, #408]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	4a65      	ldr	r2, [pc, #404]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff4:	e01c      	b.n	8004030 <HAL_RCC_OscConfig+0x354>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b05      	cmp	r3, #5
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x33c>
 8003ffe:	4b61      	ldr	r3, [pc, #388]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	4a60      	ldr	r2, [pc, #384]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8004004:	f043 0304 	orr.w	r3, r3, #4
 8004008:	6713      	str	r3, [r2, #112]	; 0x70
 800400a:	4b5e      	ldr	r3, [pc, #376]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	4a5d      	ldr	r2, [pc, #372]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	6713      	str	r3, [r2, #112]	; 0x70
 8004016:	e00b      	b.n	8004030 <HAL_RCC_OscConfig+0x354>
 8004018:	4b5a      	ldr	r3, [pc, #360]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401c:	4a59      	ldr	r2, [pc, #356]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 800401e:	f023 0301 	bic.w	r3, r3, #1
 8004022:	6713      	str	r3, [r2, #112]	; 0x70
 8004024:	4b57      	ldr	r3, [pc, #348]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	4a56      	ldr	r2, [pc, #344]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 800402a:	f023 0304 	bic.w	r3, r3, #4
 800402e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d015      	beq.n	8004064 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fe f8fa 	bl	8002230 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403e:	e00a      	b.n	8004056 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004040:	f7fe f8f6 	bl	8002230 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	; 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e092      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004056:	4b4b      	ldr	r3, [pc, #300]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0ee      	beq.n	8004040 <HAL_RCC_OscConfig+0x364>
 8004062:	e014      	b.n	800408e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fe f8e4 	bl	8002230 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406a:	e00a      	b.n	8004082 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800406c:	f7fe f8e0 	bl	8002230 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	; 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e07c      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004082:	4b40      	ldr	r3, [pc, #256]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1ee      	bne.n	800406c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004094:	4b3b      	ldr	r3, [pc, #236]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	4a3a      	ldr	r2, [pc, #232]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 800409a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d068      	beq.n	800417a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040a8:	4b36      	ldr	r3, [pc, #216]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 030c 	and.w	r3, r3, #12
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d060      	beq.n	8004176 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d145      	bne.n	8004148 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040bc:	4b33      	ldr	r3, [pc, #204]	; (800418c <HAL_RCC_OscConfig+0x4b0>)
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fe f8b5 	bl	8002230 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ca:	f7fe f8b1 	bl	8002230 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e04f      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040dc:	4b29      	ldr	r3, [pc, #164]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f0      	bne.n	80040ca <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69da      	ldr	r2, [r3, #28]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	019b      	lsls	r3, r3, #6
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	3b01      	subs	r3, #1
 8004102:	041b      	lsls	r3, r3, #16
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	061b      	lsls	r3, r3, #24
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	071b      	lsls	r3, r3, #28
 8004114:	491b      	ldr	r1, [pc, #108]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 8004116:	4313      	orrs	r3, r2
 8004118:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800411a:	4b1c      	ldr	r3, [pc, #112]	; (800418c <HAL_RCC_OscConfig+0x4b0>)
 800411c:	2201      	movs	r2, #1
 800411e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fe f886 	bl	8002230 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004128:	f7fe f882 	bl	8002230 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e020      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413a:	4b12      	ldr	r3, [pc, #72]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x44c>
 8004146:	e018      	b.n	800417a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004148:	4b10      	ldr	r3, [pc, #64]	; (800418c <HAL_RCC_OscConfig+0x4b0>)
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414e:	f7fe f86f 	bl	8002230 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004156:	f7fe f86b 	bl	8002230 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e009      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCC_OscConfig+0x4a8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1f0      	bne.n	8004156 <HAL_RCC_OscConfig+0x47a>
 8004174:	e001      	b.n	800417a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40023800 	.word	0x40023800
 8004188:	40007000 	.word	0x40007000
 800418c:	42470060 	.word	0x42470060

08004190 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e056      	b.n	8004250 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d106      	bne.n	80041c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7fd fdb5 	bl	8001d2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2202      	movs	r2, #2
 80041c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	ea42 0103 	orr.w	r1, r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	0c1b      	lsrs	r3, r3, #16
 8004220:	f003 0104 	and.w	r1, r3, #4
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69da      	ldr	r2, [r3, #28]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800423e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_SPI_Transmit+0x22>
 8004276:	2302      	movs	r3, #2
 8004278:	e11e      	b.n	80044b8 <HAL_SPI_Transmit+0x260>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004282:	f7fd ffd5 	bl	8002230 <HAL_GetTick>
 8004286:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	d002      	beq.n	800429e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004298:	2302      	movs	r3, #2
 800429a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800429c:	e103      	b.n	80044a6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <HAL_SPI_Transmit+0x52>
 80042a4:	88fb      	ldrh	r3, [r7, #6]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d102      	bne.n	80042b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042ae:	e0fa      	b.n	80044a6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2203      	movs	r2, #3
 80042b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	88fa      	ldrh	r2, [r7, #6]
 80042c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	88fa      	ldrh	r2, [r7, #6]
 80042ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f6:	d107      	bne.n	8004308 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004306:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004312:	2b40      	cmp	r3, #64	; 0x40
 8004314:	d007      	beq.n	8004326 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004324:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432e:	d14b      	bne.n	80043c8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HAL_SPI_Transmit+0xe6>
 8004338:	8afb      	ldrh	r3, [r7, #22]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d13e      	bne.n	80043bc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	881a      	ldrh	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	1c9a      	adds	r2, r3, #2
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004362:	e02b      	b.n	80043bc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b02      	cmp	r3, #2
 8004370:	d112      	bne.n	8004398 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	881a      	ldrh	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004382:	1c9a      	adds	r2, r3, #2
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	86da      	strh	r2, [r3, #54]	; 0x36
 8004396:	e011      	b.n	80043bc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004398:	f7fd ff4a 	bl	8002230 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d803      	bhi.n	80043b0 <HAL_SPI_Transmit+0x158>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	d102      	bne.n	80043b6 <HAL_SPI_Transmit+0x15e>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d102      	bne.n	80043bc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043ba:	e074      	b.n	80044a6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1ce      	bne.n	8004364 <HAL_SPI_Transmit+0x10c>
 80043c6:	e04c      	b.n	8004462 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <HAL_SPI_Transmit+0x17e>
 80043d0:	8afb      	ldrh	r3, [r7, #22]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d140      	bne.n	8004458 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	330c      	adds	r3, #12
 80043e0:	7812      	ldrb	r2, [r2, #0]
 80043e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80043fc:	e02c      	b.n	8004458 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b02      	cmp	r3, #2
 800440a:	d113      	bne.n	8004434 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	330c      	adds	r3, #12
 8004416:	7812      	ldrb	r2, [r2, #0]
 8004418:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	86da      	strh	r2, [r3, #54]	; 0x36
 8004432:	e011      	b.n	8004458 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004434:	f7fd fefc 	bl	8002230 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d803      	bhi.n	800444c <HAL_SPI_Transmit+0x1f4>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444a:	d102      	bne.n	8004452 <HAL_SPI_Transmit+0x1fa>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d102      	bne.n	8004458 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004456:	e026      	b.n	80044a6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1cd      	bne.n	80043fe <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	6839      	ldr	r1, [r7, #0]
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f894 	bl	8004594 <SPI_EndRxTxTransaction>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d002      	beq.n	8004478 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2220      	movs	r2, #32
 8004476:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10a      	bne.n	8004496 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	77fb      	strb	r3, [r7, #31]
 80044a2:	e000      	b.n	80044a6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80044a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3720      	adds	r7, #32
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	4613      	mov	r3, r2
 80044ce:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044d0:	e04c      	b.n	800456c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d048      	beq.n	800456c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80044da:	f7fd fea9 	bl	8002230 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d902      	bls.n	80044f0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d13d      	bne.n	800456c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004508:	d111      	bne.n	800452e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004512:	d004      	beq.n	800451e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451c:	d107      	bne.n	800452e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800452c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004536:	d10f      	bne.n	8004558 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004556:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e00f      	b.n	800458c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	4013      	ands	r3, r2
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	429a      	cmp	r2, r3
 800457a:	bf0c      	ite	eq
 800457c:	2301      	moveq	r3, #1
 800457e:	2300      	movne	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	461a      	mov	r2, r3
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	429a      	cmp	r2, r3
 8004588:	d1a3      	bne.n	80044d2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80045a0:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <SPI_EndRxTxTransaction+0x7c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a1b      	ldr	r2, [pc, #108]	; (8004614 <SPI_EndRxTxTransaction+0x80>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	0d5b      	lsrs	r3, r3, #21
 80045ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045b0:	fb02 f303 	mul.w	r3, r2, r3
 80045b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045be:	d112      	bne.n	80045e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2200      	movs	r2, #0
 80045c8:	2180      	movs	r1, #128	; 0x80
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f7ff ff78 	bl	80044c0 <SPI_WaitFlagStateUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d016      	beq.n	8004604 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	f043 0220 	orr.w	r2, r3, #32
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e00f      	b.n	8004606 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fc:	2b80      	cmp	r3, #128	; 0x80
 80045fe:	d0f2      	beq.n	80045e6 <SPI_EndRxTxTransaction+0x52>
 8004600:	e000      	b.n	8004604 <SPI_EndRxTxTransaction+0x70>
        break;
 8004602:	bf00      	nop
  }

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	2000000c 	.word	0x2000000c
 8004614:	165e9f81 	.word	0x165e9f81

08004618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e01d      	b.n	8004666 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d106      	bne.n	8004644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fd fc12 	bl	8001e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3304      	adds	r3, #4
 8004654:	4619      	mov	r1, r3
 8004656:	4610      	mov	r0, r2
 8004658:	f000 fb92 	bl	8004d80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800466e:	b480      	push	{r7}
 8004670:	b085      	sub	sp, #20
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0201 	orr.w	r2, r2, #1
 8004684:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b06      	cmp	r3, #6
 8004696:	d007      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e01d      	b.n	8004704 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d106      	bne.n	80046e2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f815 	bl	800470c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2202      	movs	r2, #2
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3304      	adds	r3, #4
 80046f2:	4619      	mov	r1, r3
 80046f4:	4610      	mov	r0, r2
 80046f6:	f000 fb43 	bl	8004d80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b0c      	cmp	r3, #12
 800472e:	d841      	bhi.n	80047b4 <HAL_TIM_IC_Start_IT+0x94>
 8004730:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <HAL_TIM_IC_Start_IT+0x18>)
 8004732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004736:	bf00      	nop
 8004738:	0800476d 	.word	0x0800476d
 800473c:	080047b5 	.word	0x080047b5
 8004740:	080047b5 	.word	0x080047b5
 8004744:	080047b5 	.word	0x080047b5
 8004748:	0800477f 	.word	0x0800477f
 800474c:	080047b5 	.word	0x080047b5
 8004750:	080047b5 	.word	0x080047b5
 8004754:	080047b5 	.word	0x080047b5
 8004758:	08004791 	.word	0x08004791
 800475c:	080047b5 	.word	0x080047b5
 8004760:	080047b5 	.word	0x080047b5
 8004764:	080047b5 	.word	0x080047b5
 8004768:	080047a3 	.word	0x080047a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0202 	orr.w	r2, r2, #2
 800477a:	60da      	str	r2, [r3, #12]
      break;
 800477c:	e01b      	b.n	80047b6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68da      	ldr	r2, [r3, #12]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0204 	orr.w	r2, r2, #4
 800478c:	60da      	str	r2, [r3, #12]
      break;
 800478e:	e012      	b.n	80047b6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0208 	orr.w	r2, r2, #8
 800479e:	60da      	str	r2, [r3, #12]
      break;
 80047a0:	e009      	b.n	80047b6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0210 	orr.w	r2, r2, #16
 80047b0:	60da      	str	r2, [r3, #12]
      break;
 80047b2:	e000      	b.n	80047b6 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80047b4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2201      	movs	r2, #1
 80047bc:	6839      	ldr	r1, [r7, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fd42 	bl	8005248 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b06      	cmp	r3, #6
 80047d4:	d007      	beq.n	80047e6 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b02      	cmp	r3, #2
 8004804:	d122      	bne.n	800484c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b02      	cmp	r3, #2
 8004812:	d11b      	bne.n	800484c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f06f 0202 	mvn.w	r2, #2
 800481c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fd f806 	bl	8001844 <HAL_TIM_IC_CaptureCallback>
 8004838:	e005      	b.n	8004846 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fa82 	bl	8004d44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fa89 	bl	8004d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b04      	cmp	r3, #4
 8004858:	d122      	bne.n	80048a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b04      	cmp	r3, #4
 8004866:	d11b      	bne.n	80048a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0204 	mvn.w	r2, #4
 8004870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fc ffdc 	bl	8001844 <HAL_TIM_IC_CaptureCallback>
 800488c:	e005      	b.n	800489a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fa58 	bl	8004d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fa5f 	bl	8004d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d122      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d11b      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0208 	mvn.w	r2, #8
 80048c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2204      	movs	r2, #4
 80048ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fc ffb2 	bl	8001844 <HAL_TIM_IC_CaptureCallback>
 80048e0:	e005      	b.n	80048ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fa2e 	bl	8004d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fa35 	bl	8004d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0310 	and.w	r3, r3, #16
 80048fe:	2b10      	cmp	r3, #16
 8004900:	d122      	bne.n	8004948 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b10      	cmp	r3, #16
 800490e:	d11b      	bne.n	8004948 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0210 	mvn.w	r2, #16
 8004918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2208      	movs	r2, #8
 800491e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fc ff88 	bl	8001844 <HAL_TIM_IC_CaptureCallback>
 8004934:	e005      	b.n	8004942 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fa04 	bl	8004d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fa0b 	bl	8004d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b01      	cmp	r3, #1
 8004954:	d10e      	bne.n	8004974 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b01      	cmp	r3, #1
 8004962:	d107      	bne.n	8004974 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0201 	mvn.w	r2, #1
 800496c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f9de 	bl	8004d30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497e:	2b80      	cmp	r3, #128	; 0x80
 8004980:	d10e      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498c:	2b80      	cmp	r3, #128	; 0x80
 800498e:	d107      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fd00 	bl	80053a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	d10e      	bne.n	80049cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b8:	2b40      	cmp	r3, #64	; 0x40
 80049ba:	d107      	bne.n	80049cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f9d0 	bl	8004d6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0320 	and.w	r3, r3, #32
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	d10e      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b20      	cmp	r3, #32
 80049e6:	d107      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0220 	mvn.w	r2, #32
 80049f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fcca 	bl	800538c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049f8:	bf00      	nop
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_TIM_IC_ConfigChannel+0x1a>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e08a      	b.n	8004b30 <HAL_TIM_IC_ConfigChannel+0x130>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2202      	movs	r2, #2
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d11b      	bne.n	8004a68 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6818      	ldr	r0, [r3, #0]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	6819      	ldr	r1, [r3, #0]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f000 fa3e 	bl	8004ec0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 020c 	bic.w	r2, r2, #12
 8004a52:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6999      	ldr	r1, [r3, #24]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	619a      	str	r2, [r3, #24]
 8004a66:	e05a      	b.n	8004b1e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d11c      	bne.n	8004aa8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	6819      	ldr	r1, [r3, #0]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f000 fac2 	bl	8005006 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699a      	ldr	r2, [r3, #24]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a90:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6999      	ldr	r1, [r3, #24]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	021a      	lsls	r2, r3, #8
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	619a      	str	r2, [r3, #24]
 8004aa6:	e03a      	b.n	8004b1e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d11b      	bne.n	8004ae6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	6819      	ldr	r1, [r3, #0]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f000 fb0f 	bl	80050e0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69da      	ldr	r2, [r3, #28]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 020c 	bic.w	r2, r2, #12
 8004ad0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69d9      	ldr	r1, [r3, #28]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	61da      	str	r2, [r3, #28]
 8004ae4:	e01b      	b.n	8004b1e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	6819      	ldr	r1, [r3, #0]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f000 fb2f 	bl	8005158 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b08:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69d9      	ldr	r1, [r3, #28]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	021a      	lsls	r2, r3, #8
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_TIM_ConfigClockSource+0x18>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e0a6      	b.n	8004c9e <HAL_TIM_ConfigClockSource+0x166>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d067      	beq.n	8004c58 <HAL_TIM_ConfigClockSource+0x120>
 8004b88:	2b40      	cmp	r3, #64	; 0x40
 8004b8a:	d80b      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x6c>
 8004b8c:	2b10      	cmp	r3, #16
 8004b8e:	d073      	beq.n	8004c78 <HAL_TIM_ConfigClockSource+0x140>
 8004b90:	2b10      	cmp	r3, #16
 8004b92:	d802      	bhi.n	8004b9a <HAL_TIM_ConfigClockSource+0x62>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d06f      	beq.n	8004c78 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004b98:	e078      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d06c      	beq.n	8004c78 <HAL_TIM_ConfigClockSource+0x140>
 8004b9e:	2b30      	cmp	r3, #48	; 0x30
 8004ba0:	d06a      	beq.n	8004c78 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004ba2:	e073      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ba4:	2b70      	cmp	r3, #112	; 0x70
 8004ba6:	d00d      	beq.n	8004bc4 <HAL_TIM_ConfigClockSource+0x8c>
 8004ba8:	2b70      	cmp	r3, #112	; 0x70
 8004baa:	d804      	bhi.n	8004bb6 <HAL_TIM_ConfigClockSource+0x7e>
 8004bac:	2b50      	cmp	r3, #80	; 0x50
 8004bae:	d033      	beq.n	8004c18 <HAL_TIM_ConfigClockSource+0xe0>
 8004bb0:	2b60      	cmp	r3, #96	; 0x60
 8004bb2:	d041      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004bb4:	e06a      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bba:	d066      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x152>
 8004bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc0:	d017      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004bc2:	e063      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	6899      	ldr	r1, [r3, #8]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f000 fb18 	bl	8005208 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004be6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	609a      	str	r2, [r3, #8]
      break;
 8004bf0:	e04c      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6899      	ldr	r1, [r3, #8]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f000 fb01 	bl	8005208 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c14:	609a      	str	r2, [r3, #8]
      break;
 8004c16:	e039      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	6859      	ldr	r1, [r3, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	461a      	mov	r2, r3
 8004c26:	f000 f9bf 	bl	8004fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2150      	movs	r1, #80	; 0x50
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 face 	bl	80051d2 <TIM_ITRx_SetConfig>
      break;
 8004c36:	e029      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6859      	ldr	r1, [r3, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	461a      	mov	r2, r3
 8004c46:	f000 fa1b 	bl	8005080 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2160      	movs	r1, #96	; 0x60
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fabe 	bl	80051d2 <TIM_ITRx_SetConfig>
      break;
 8004c56:	e019      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	6859      	ldr	r1, [r3, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	461a      	mov	r2, r3
 8004c66:	f000 f99f 	bl	8004fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2140      	movs	r1, #64	; 0x40
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 faae 	bl	80051d2 <TIM_ITRx_SetConfig>
      break;
 8004c76:	e009      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4619      	mov	r1, r3
 8004c82:	4610      	mov	r0, r2
 8004c84:	f000 faa5 	bl	80051d2 <TIM_ITRx_SetConfig>
      break;
 8004c88:	e000      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004c8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b0c      	cmp	r3, #12
 8004cba:	d831      	bhi.n	8004d20 <HAL_TIM_ReadCapturedValue+0x78>
 8004cbc:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc2:	bf00      	nop
 8004cc4:	08004cf9 	.word	0x08004cf9
 8004cc8:	08004d21 	.word	0x08004d21
 8004ccc:	08004d21 	.word	0x08004d21
 8004cd0:	08004d21 	.word	0x08004d21
 8004cd4:	08004d03 	.word	0x08004d03
 8004cd8:	08004d21 	.word	0x08004d21
 8004cdc:	08004d21 	.word	0x08004d21
 8004ce0:	08004d21 	.word	0x08004d21
 8004ce4:	08004d0d 	.word	0x08004d0d
 8004ce8:	08004d21 	.word	0x08004d21
 8004cec:	08004d21 	.word	0x08004d21
 8004cf0:	08004d21 	.word	0x08004d21
 8004cf4:	08004d17 	.word	0x08004d17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfe:	60fb      	str	r3, [r7, #12]

      break;
 8004d00:	e00f      	b.n	8004d22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	60fb      	str	r3, [r7, #12]

      break;
 8004d0a:	e00a      	b.n	8004d22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d12:	60fb      	str	r3, [r7, #12]

      break;
 8004d14:	e005      	b.n	8004d22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	60fb      	str	r3, [r7, #12]

      break;
 8004d1e:	e000      	b.n	8004d22 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004d20:	bf00      	nop
  }

  return tmpreg;
 8004d22:	68fb      	ldr	r3, [r7, #12]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a40      	ldr	r2, [pc, #256]	; (8004e94 <TIM_Base_SetConfig+0x114>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d013      	beq.n	8004dc0 <TIM_Base_SetConfig+0x40>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9e:	d00f      	beq.n	8004dc0 <TIM_Base_SetConfig+0x40>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a3d      	ldr	r2, [pc, #244]	; (8004e98 <TIM_Base_SetConfig+0x118>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00b      	beq.n	8004dc0 <TIM_Base_SetConfig+0x40>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a3c      	ldr	r2, [pc, #240]	; (8004e9c <TIM_Base_SetConfig+0x11c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d007      	beq.n	8004dc0 <TIM_Base_SetConfig+0x40>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a3b      	ldr	r2, [pc, #236]	; (8004ea0 <TIM_Base_SetConfig+0x120>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d003      	beq.n	8004dc0 <TIM_Base_SetConfig+0x40>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a3a      	ldr	r2, [pc, #232]	; (8004ea4 <TIM_Base_SetConfig+0x124>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d108      	bne.n	8004dd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a2f      	ldr	r2, [pc, #188]	; (8004e94 <TIM_Base_SetConfig+0x114>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d02b      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de0:	d027      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a2c      	ldr	r2, [pc, #176]	; (8004e98 <TIM_Base_SetConfig+0x118>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d023      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a2b      	ldr	r2, [pc, #172]	; (8004e9c <TIM_Base_SetConfig+0x11c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d01f      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a2a      	ldr	r2, [pc, #168]	; (8004ea0 <TIM_Base_SetConfig+0x120>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d01b      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a29      	ldr	r2, [pc, #164]	; (8004ea4 <TIM_Base_SetConfig+0x124>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d017      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a28      	ldr	r2, [pc, #160]	; (8004ea8 <TIM_Base_SetConfig+0x128>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d013      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a27      	ldr	r2, [pc, #156]	; (8004eac <TIM_Base_SetConfig+0x12c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00f      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a26      	ldr	r2, [pc, #152]	; (8004eb0 <TIM_Base_SetConfig+0x130>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00b      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a25      	ldr	r2, [pc, #148]	; (8004eb4 <TIM_Base_SetConfig+0x134>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d007      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a24      	ldr	r2, [pc, #144]	; (8004eb8 <TIM_Base_SetConfig+0x138>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d003      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a23      	ldr	r2, [pc, #140]	; (8004ebc <TIM_Base_SetConfig+0x13c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d108      	bne.n	8004e44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a0a      	ldr	r2, [pc, #40]	; (8004e94 <TIM_Base_SetConfig+0x114>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d003      	beq.n	8004e78 <TIM_Base_SetConfig+0xf8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a0c      	ldr	r2, [pc, #48]	; (8004ea4 <TIM_Base_SetConfig+0x124>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d103      	bne.n	8004e80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	615a      	str	r2, [r3, #20]
}
 8004e86:	bf00      	nop
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40010000 	.word	0x40010000
 8004e98:	40000400 	.word	0x40000400
 8004e9c:	40000800 	.word	0x40000800
 8004ea0:	40000c00 	.word	0x40000c00
 8004ea4:	40010400 	.word	0x40010400
 8004ea8:	40014000 	.word	0x40014000
 8004eac:	40014400 	.word	0x40014400
 8004eb0:	40014800 	.word	0x40014800
 8004eb4:	40001800 	.word	0x40001800
 8004eb8:	40001c00 	.word	0x40001c00
 8004ebc:	40002000 	.word	0x40002000

08004ec0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f023 0201 	bic.w	r2, r3, #1
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4a28      	ldr	r2, [pc, #160]	; (8004f8c <TIM_TI1_SetConfig+0xcc>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d01b      	beq.n	8004f26 <TIM_TI1_SetConfig+0x66>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef4:	d017      	beq.n	8004f26 <TIM_TI1_SetConfig+0x66>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4a25      	ldr	r2, [pc, #148]	; (8004f90 <TIM_TI1_SetConfig+0xd0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d013      	beq.n	8004f26 <TIM_TI1_SetConfig+0x66>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4a24      	ldr	r2, [pc, #144]	; (8004f94 <TIM_TI1_SetConfig+0xd4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00f      	beq.n	8004f26 <TIM_TI1_SetConfig+0x66>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4a23      	ldr	r2, [pc, #140]	; (8004f98 <TIM_TI1_SetConfig+0xd8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00b      	beq.n	8004f26 <TIM_TI1_SetConfig+0x66>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4a22      	ldr	r2, [pc, #136]	; (8004f9c <TIM_TI1_SetConfig+0xdc>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d007      	beq.n	8004f26 <TIM_TI1_SetConfig+0x66>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a21      	ldr	r2, [pc, #132]	; (8004fa0 <TIM_TI1_SetConfig+0xe0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d003      	beq.n	8004f26 <TIM_TI1_SetConfig+0x66>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4a20      	ldr	r2, [pc, #128]	; (8004fa4 <TIM_TI1_SetConfig+0xe4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d101      	bne.n	8004f2a <TIM_TI1_SetConfig+0x6a>
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <TIM_TI1_SetConfig+0x6c>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f023 0303 	bic.w	r3, r3, #3
 8004f36:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	e003      	b.n	8004f4a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f043 0301 	orr.w	r3, r3, #1
 8004f48:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f023 030a 	bic.w	r3, r3, #10
 8004f64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f003 030a 	and.w	r3, r3, #10
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	621a      	str	r2, [r3, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40010000 	.word	0x40010000
 8004f90:	40000400 	.word	0x40000400
 8004f94:	40000800 	.word	0x40000800
 8004f98:	40000c00 	.word	0x40000c00
 8004f9c:	40010400 	.word	0x40010400
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40001800 	.word	0x40001800

08004fa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f023 0201 	bic.w	r2, r3, #1
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f023 030a 	bic.w	r3, r3, #10
 8004fe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	621a      	str	r2, [r3, #32]
}
 8004ffa:	bf00      	nop
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005006:	b480      	push	{r7}
 8005008:	b087      	sub	sp, #28
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	607a      	str	r2, [r7, #4]
 8005012:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f023 0210 	bic.w	r2, r3, #16
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005032:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	031b      	lsls	r3, r3, #12
 800504a:	b29b      	uxth	r3, r3
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	4313      	orrs	r3, r2
 8005050:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005058:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	621a      	str	r2, [r3, #32]
}
 8005074:	bf00      	nop
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	f023 0210 	bic.w	r2, r3, #16
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	031b      	lsls	r3, r3, #12
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	621a      	str	r2, [r3, #32]
}
 80050d4:	bf00      	nop
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f023 0303 	bic.w	r3, r3, #3
 800510c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800511c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	b2db      	uxtb	r3, r3
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005130:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	021b      	lsls	r3, r3, #8
 8005136:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	621a      	str	r2, [r3, #32]
}
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005184:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	021b      	lsls	r3, r3, #8
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005196:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	031b      	lsls	r3, r3, #12
 800519c:	b29b      	uxth	r3, r3
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80051aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	031b      	lsls	r3, r3, #12
 80051b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	621a      	str	r2, [r3, #32]
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f043 0307 	orr.w	r3, r3, #7
 80051f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	609a      	str	r2, [r3, #8]
}
 80051fc:	bf00      	nop
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	021a      	lsls	r2, r3, #8
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	431a      	orrs	r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4313      	orrs	r3, r2
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	609a      	str	r2, [r3, #8]
}
 800523c:	bf00      	nop
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f003 031f 	and.w	r3, r3, #31
 800525a:	2201      	movs	r2, #1
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a1a      	ldr	r2, [r3, #32]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	43db      	mvns	r3, r3
 800526a:	401a      	ands	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a1a      	ldr	r2, [r3, #32]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f003 031f 	and.w	r3, r3, #31
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	fa01 f303 	lsl.w	r3, r1, r3
 8005280:	431a      	orrs	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	621a      	str	r2, [r3, #32]
}
 8005286:	bf00      	nop
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
	...

08005294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e05a      	b.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a21      	ldr	r2, [pc, #132]	; (8005370 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d022      	beq.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f8:	d01d      	beq.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a1d      	ldr	r2, [pc, #116]	; (8005374 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d018      	beq.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a1b      	ldr	r2, [pc, #108]	; (8005378 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d013      	beq.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1a      	ldr	r2, [pc, #104]	; (800537c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00e      	beq.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a18      	ldr	r2, [pc, #96]	; (8005380 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d009      	beq.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a17      	ldr	r2, [pc, #92]	; (8005384 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d004      	beq.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a15      	ldr	r2, [pc, #84]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d10c      	bne.n	8005350 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800533c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	4313      	orrs	r3, r2
 8005346:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40010000 	.word	0x40010000
 8005374:	40000400 	.word	0x40000400
 8005378:	40000800 	.word	0x40000800
 800537c:	40000c00 	.word	0x40000c00
 8005380:	40010400 	.word	0x40010400
 8005384:	40014000 	.word	0x40014000
 8005388:	40001800 	.word	0x40001800

0800538c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e03f      	b.n	8005446 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fc fdb0 	bl	8001f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2224      	movs	r2, #36	; 0x24
 80053e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fb97 	bl	8005b2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	691a      	ldr	r2, [r3, #16]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800540c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695a      	ldr	r2, [r3, #20]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800541c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800542c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b088      	sub	sp, #32
 8005452:	af02      	add	r7, sp, #8
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	603b      	str	r3, [r7, #0]
 800545a:	4613      	mov	r3, r2
 800545c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b20      	cmp	r3, #32
 800546c:	f040 8083 	bne.w	8005576 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <HAL_UART_Transmit+0x2e>
 8005476:	88fb      	ldrh	r3, [r7, #6]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e07b      	b.n	8005578 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_UART_Transmit+0x40>
 800548a:	2302      	movs	r3, #2
 800548c:	e074      	b.n	8005578 <HAL_UART_Transmit+0x12a>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2221      	movs	r2, #33	; 0x21
 80054a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80054a4:	f7fc fec4 	bl	8002230 <HAL_GetTick>
 80054a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	88fa      	ldrh	r2, [r7, #6]
 80054ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	88fa      	ldrh	r2, [r7, #6]
 80054b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80054be:	e042      	b.n	8005546 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d6:	d122      	bne.n	800551e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2200      	movs	r2, #0
 80054e0:	2180      	movs	r1, #128	; 0x80
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 f9b6 	bl	8005854 <UART_WaitOnFlagUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e042      	b.n	8005578 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005504:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d103      	bne.n	8005516 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	3302      	adds	r3, #2
 8005512:	60bb      	str	r3, [r7, #8]
 8005514:	e017      	b.n	8005546 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	3301      	adds	r3, #1
 800551a:	60bb      	str	r3, [r7, #8]
 800551c:	e013      	b.n	8005546 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2200      	movs	r2, #0
 8005526:	2180      	movs	r1, #128	; 0x80
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 f993 	bl	8005854 <UART_WaitOnFlagUntilTimeout>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e01f      	b.n	8005578 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	60ba      	str	r2, [r7, #8]
 800553e:	781a      	ldrb	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800554a:	b29b      	uxth	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1b7      	bne.n	80054c0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2200      	movs	r2, #0
 8005558:	2140      	movs	r1, #64	; 0x40
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 f97a 	bl	8005854 <UART_WaitOnFlagUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e006      	b.n	8005578 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2220      	movs	r2, #32
 800556e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	e000      	b.n	8005578 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005576:	2302      	movs	r3, #2
  }
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	4613      	mov	r3, r2
 800558c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b20      	cmp	r3, #32
 8005598:	d140      	bne.n	800561c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <HAL_UART_Receive_IT+0x26>
 80055a0:	88fb      	ldrh	r3, [r7, #6]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e039      	b.n	800561e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_UART_Receive_IT+0x38>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e032      	b.n	800561e <HAL_UART_Receive_IT+0x9e>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	88fa      	ldrh	r2, [r7, #6]
 80055ca:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	88fa      	ldrh	r2, [r7, #6]
 80055d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2222      	movs	r2, #34	; 0x22
 80055dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055f6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695a      	ldr	r2, [r3, #20]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0201 	orr.w	r2, r2, #1
 8005606:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0220 	orr.w	r2, r2, #32
 8005616:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	e000      	b.n	800561e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800561c:	2302      	movs	r3, #2
  }
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
	...

0800562c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800564c:	2300      	movs	r3, #0
 800564e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10d      	bne.n	800567e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	d008      	beq.n	800567e <HAL_UART_IRQHandler+0x52>
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	f003 0320 	and.w	r3, r3, #32
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f9d6 	bl	8005a28 <UART_Receive_IT>
      return;
 800567c:	e0d1      	b.n	8005822 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 80b0 	beq.w	80057e6 <HAL_UART_IRQHandler+0x1ba>
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d105      	bne.n	800569c <HAL_UART_IRQHandler+0x70>
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80a5 	beq.w	80057e6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <HAL_UART_IRQHandler+0x90>
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d005      	beq.n	80056bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b4:	f043 0201 	orr.w	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <HAL_UART_IRQHandler+0xb0>
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d005      	beq.n	80056dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d4:	f043 0202 	orr.w	r2, r3, #2
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_UART_IRQHandler+0xd0>
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f4:	f043 0204 	orr.w	r2, r3, #4
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f003 0308 	and.w	r3, r3, #8
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00f      	beq.n	8005726 <HAL_UART_IRQHandler+0xfa>
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b00      	cmp	r3, #0
 800570e:	d104      	bne.n	800571a <HAL_UART_IRQHandler+0xee>
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d005      	beq.n	8005726 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571e:	f043 0208 	orr.w	r2, r3, #8
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d078      	beq.n	8005820 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	f003 0320 	and.w	r3, r3, #32
 8005734:	2b00      	cmp	r3, #0
 8005736:	d007      	beq.n	8005748 <HAL_UART_IRQHandler+0x11c>
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f970 	bl	8005a28 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	2b40      	cmp	r3, #64	; 0x40
 8005754:	bf0c      	ite	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	2300      	movne	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d102      	bne.n	8005770 <HAL_UART_IRQHandler+0x144>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d031      	beq.n	80057d4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f8b9 	bl	80058e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005780:	2b40      	cmp	r3, #64	; 0x40
 8005782:	d123      	bne.n	80057cc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695a      	ldr	r2, [r3, #20]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005792:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005798:	2b00      	cmp	r3, #0
 800579a:	d013      	beq.n	80057c4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a0:	4a21      	ldr	r2, [pc, #132]	; (8005828 <HAL_UART_IRQHandler+0x1fc>)
 80057a2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7fd fb8b 	bl	8002ec4 <HAL_DMA_Abort_IT>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d016      	beq.n	80057e2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057be:	4610      	mov	r0, r2
 80057c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c2:	e00e      	b.n	80057e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f83b 	bl	8005840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ca:	e00a      	b.n	80057e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f837 	bl	8005840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d2:	e006      	b.n	80057e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f833 	bl	8005840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80057e0:	e01e      	b.n	8005820 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e2:	bf00      	nop
    return;
 80057e4:	e01c      	b.n	8005820 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d008      	beq.n	8005802 <HAL_UART_IRQHandler+0x1d6>
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f8a6 	bl	800594c <UART_Transmit_IT>
    return;
 8005800:	e00f      	b.n	8005822 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <HAL_UART_IRQHandler+0x1f6>
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d005      	beq.n	8005822 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f8ee 	bl	80059f8 <UART_EndTransmit_IT>
    return;
 800581c:	bf00      	nop
 800581e:	e000      	b.n	8005822 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005820:	bf00      	nop
  }
}
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	08005925 	.word	0x08005925

0800582c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	4613      	mov	r3, r2
 8005862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005864:	e02c      	b.n	80058c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586c:	d028      	beq.n	80058c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <UART_WaitOnFlagUntilTimeout+0x30>
 8005874:	f7fc fcdc 	bl	8002230 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	429a      	cmp	r2, r3
 8005882:	d21d      	bcs.n	80058c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005892:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695a      	ldr	r2, [r3, #20]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0201 	bic.w	r2, r2, #1
 80058a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e00f      	b.n	80058e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4013      	ands	r3, r2
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	bf0c      	ite	eq
 80058d0:	2301      	moveq	r3, #1
 80058d2:	2300      	movne	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	461a      	mov	r2, r3
 80058d8:	79fb      	ldrb	r3, [r7, #7]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d0c3      	beq.n	8005866 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695a      	ldr	r2, [r3, #20]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0201 	bic.w	r2, r2, #1
 800590e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f7ff ff7e 	bl	8005840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005944:	bf00      	nop
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b21      	cmp	r3, #33	; 0x21
 800595e:	d144      	bne.n	80059ea <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005968:	d11a      	bne.n	80059a0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	461a      	mov	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800597e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d105      	bne.n	8005994 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	1c9a      	adds	r2, r3, #2
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	621a      	str	r2, [r3, #32]
 8005992:	e00e      	b.n	80059b2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	621a      	str	r2, [r3, #32]
 800599e:	e008      	b.n	80059b2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	1c59      	adds	r1, r3, #1
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6211      	str	r1, [r2, #32]
 80059aa:	781a      	ldrb	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	4619      	mov	r1, r3
 80059c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10f      	bne.n	80059e6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	e000      	b.n	80059ec <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80059ea:	2302      	movs	r3, #2
  }
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a0e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff ff07 	bl	800582c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b22      	cmp	r3, #34	; 0x22
 8005a3a:	d171      	bne.n	8005b20 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a44:	d123      	bne.n	8005a8e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10e      	bne.n	8005a72 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	1c9a      	adds	r2, r3, #2
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	629a      	str	r2, [r3, #40]	; 0x28
 8005a70:	e029      	b.n	8005ac6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	629a      	str	r2, [r3, #40]	; 0x28
 8005a8c:	e01b      	b.n	8005ac6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6858      	ldr	r0, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	1c59      	adds	r1, r3, #1
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6291      	str	r1, [r2, #40]	; 0x28
 8005aa6:	b2c2      	uxtb	r2, r0
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	e00c      	b.n	8005ac6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab8:	1c58      	adds	r0, r3, #1
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	6288      	str	r0, [r1, #40]	; 0x28
 8005abe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d120      	bne.n	8005b1c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0220 	bic.w	r2, r2, #32
 8005ae8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005af8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	695a      	ldr	r2, [r3, #20]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0201 	bic.w	r2, r2, #1
 8005b08:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fb fee0 	bl	80018d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e002      	b.n	8005b22 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e000      	b.n	8005b22 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005b20:	2302      	movs	r3, #2
  }
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b6e:	f023 030c 	bic.w	r3, r3, #12
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b9a:	f040 818b 	bne.w	8005eb4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4ac1      	ldr	r2, [pc, #772]	; (8005ea8 <UART_SetConfig+0x37c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d005      	beq.n	8005bb4 <UART_SetConfig+0x88>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4abf      	ldr	r2, [pc, #764]	; (8005eac <UART_SetConfig+0x380>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	f040 80bd 	bne.w	8005d2e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bb4:	f7fd ff2c 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 8005bb8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	461d      	mov	r5, r3
 8005bbe:	f04f 0600 	mov.w	r6, #0
 8005bc2:	46a8      	mov	r8, r5
 8005bc4:	46b1      	mov	r9, r6
 8005bc6:	eb18 0308 	adds.w	r3, r8, r8
 8005bca:	eb49 0409 	adc.w	r4, r9, r9
 8005bce:	4698      	mov	r8, r3
 8005bd0:	46a1      	mov	r9, r4
 8005bd2:	eb18 0805 	adds.w	r8, r8, r5
 8005bd6:	eb49 0906 	adc.w	r9, r9, r6
 8005bda:	f04f 0100 	mov.w	r1, #0
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005be6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005bea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005bee:	4688      	mov	r8, r1
 8005bf0:	4691      	mov	r9, r2
 8005bf2:	eb18 0005 	adds.w	r0, r8, r5
 8005bf6:	eb49 0106 	adc.w	r1, r9, r6
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	461d      	mov	r5, r3
 8005c00:	f04f 0600 	mov.w	r6, #0
 8005c04:	196b      	adds	r3, r5, r5
 8005c06:	eb46 0406 	adc.w	r4, r6, r6
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	4623      	mov	r3, r4
 8005c0e:	f7fa ff19 	bl	8000a44 <__aeabi_uldivmod>
 8005c12:	4603      	mov	r3, r0
 8005c14:	460c      	mov	r4, r1
 8005c16:	461a      	mov	r2, r3
 8005c18:	4ba5      	ldr	r3, [pc, #660]	; (8005eb0 <UART_SetConfig+0x384>)
 8005c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	461d      	mov	r5, r3
 8005c28:	f04f 0600 	mov.w	r6, #0
 8005c2c:	46a9      	mov	r9, r5
 8005c2e:	46b2      	mov	sl, r6
 8005c30:	eb19 0309 	adds.w	r3, r9, r9
 8005c34:	eb4a 040a 	adc.w	r4, sl, sl
 8005c38:	4699      	mov	r9, r3
 8005c3a:	46a2      	mov	sl, r4
 8005c3c:	eb19 0905 	adds.w	r9, r9, r5
 8005c40:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c44:	f04f 0100 	mov.w	r1, #0
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c58:	4689      	mov	r9, r1
 8005c5a:	4692      	mov	sl, r2
 8005c5c:	eb19 0005 	adds.w	r0, r9, r5
 8005c60:	eb4a 0106 	adc.w	r1, sl, r6
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	461d      	mov	r5, r3
 8005c6a:	f04f 0600 	mov.w	r6, #0
 8005c6e:	196b      	adds	r3, r5, r5
 8005c70:	eb46 0406 	adc.w	r4, r6, r6
 8005c74:	461a      	mov	r2, r3
 8005c76:	4623      	mov	r3, r4
 8005c78:	f7fa fee4 	bl	8000a44 <__aeabi_uldivmod>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	461a      	mov	r2, r3
 8005c82:	4b8b      	ldr	r3, [pc, #556]	; (8005eb0 <UART_SetConfig+0x384>)
 8005c84:	fba3 1302 	umull	r1, r3, r3, r2
 8005c88:	095b      	lsrs	r3, r3, #5
 8005c8a:	2164      	movs	r1, #100	; 0x64
 8005c8c:	fb01 f303 	mul.w	r3, r1, r3
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	3332      	adds	r3, #50	; 0x32
 8005c96:	4a86      	ldr	r2, [pc, #536]	; (8005eb0 <UART_SetConfig+0x384>)
 8005c98:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9c:	095b      	lsrs	r3, r3, #5
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ca4:	4498      	add	r8, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	461d      	mov	r5, r3
 8005caa:	f04f 0600 	mov.w	r6, #0
 8005cae:	46a9      	mov	r9, r5
 8005cb0:	46b2      	mov	sl, r6
 8005cb2:	eb19 0309 	adds.w	r3, r9, r9
 8005cb6:	eb4a 040a 	adc.w	r4, sl, sl
 8005cba:	4699      	mov	r9, r3
 8005cbc:	46a2      	mov	sl, r4
 8005cbe:	eb19 0905 	adds.w	r9, r9, r5
 8005cc2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005cc6:	f04f 0100 	mov.w	r1, #0
 8005cca:	f04f 0200 	mov.w	r2, #0
 8005cce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cda:	4689      	mov	r9, r1
 8005cdc:	4692      	mov	sl, r2
 8005cde:	eb19 0005 	adds.w	r0, r9, r5
 8005ce2:	eb4a 0106 	adc.w	r1, sl, r6
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	461d      	mov	r5, r3
 8005cec:	f04f 0600 	mov.w	r6, #0
 8005cf0:	196b      	adds	r3, r5, r5
 8005cf2:	eb46 0406 	adc.w	r4, r6, r6
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	4623      	mov	r3, r4
 8005cfa:	f7fa fea3 	bl	8000a44 <__aeabi_uldivmod>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	460c      	mov	r4, r1
 8005d02:	461a      	mov	r2, r3
 8005d04:	4b6a      	ldr	r3, [pc, #424]	; (8005eb0 <UART_SetConfig+0x384>)
 8005d06:	fba3 1302 	umull	r1, r3, r3, r2
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	2164      	movs	r1, #100	; 0x64
 8005d0e:	fb01 f303 	mul.w	r3, r1, r3
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	3332      	adds	r3, #50	; 0x32
 8005d18:	4a65      	ldr	r2, [pc, #404]	; (8005eb0 <UART_SetConfig+0x384>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	f003 0207 	and.w	r2, r3, #7
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4442      	add	r2, r8
 8005d2a:	609a      	str	r2, [r3, #8]
 8005d2c:	e26f      	b.n	800620e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d2e:	f7fd fe5b 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8005d32:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	461d      	mov	r5, r3
 8005d38:	f04f 0600 	mov.w	r6, #0
 8005d3c:	46a8      	mov	r8, r5
 8005d3e:	46b1      	mov	r9, r6
 8005d40:	eb18 0308 	adds.w	r3, r8, r8
 8005d44:	eb49 0409 	adc.w	r4, r9, r9
 8005d48:	4698      	mov	r8, r3
 8005d4a:	46a1      	mov	r9, r4
 8005d4c:	eb18 0805 	adds.w	r8, r8, r5
 8005d50:	eb49 0906 	adc.w	r9, r9, r6
 8005d54:	f04f 0100 	mov.w	r1, #0
 8005d58:	f04f 0200 	mov.w	r2, #0
 8005d5c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d60:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d64:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d68:	4688      	mov	r8, r1
 8005d6a:	4691      	mov	r9, r2
 8005d6c:	eb18 0005 	adds.w	r0, r8, r5
 8005d70:	eb49 0106 	adc.w	r1, r9, r6
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	461d      	mov	r5, r3
 8005d7a:	f04f 0600 	mov.w	r6, #0
 8005d7e:	196b      	adds	r3, r5, r5
 8005d80:	eb46 0406 	adc.w	r4, r6, r6
 8005d84:	461a      	mov	r2, r3
 8005d86:	4623      	mov	r3, r4
 8005d88:	f7fa fe5c 	bl	8000a44 <__aeabi_uldivmod>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	460c      	mov	r4, r1
 8005d90:	461a      	mov	r2, r3
 8005d92:	4b47      	ldr	r3, [pc, #284]	; (8005eb0 <UART_SetConfig+0x384>)
 8005d94:	fba3 2302 	umull	r2, r3, r3, r2
 8005d98:	095b      	lsrs	r3, r3, #5
 8005d9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	461d      	mov	r5, r3
 8005da2:	f04f 0600 	mov.w	r6, #0
 8005da6:	46a9      	mov	r9, r5
 8005da8:	46b2      	mov	sl, r6
 8005daa:	eb19 0309 	adds.w	r3, r9, r9
 8005dae:	eb4a 040a 	adc.w	r4, sl, sl
 8005db2:	4699      	mov	r9, r3
 8005db4:	46a2      	mov	sl, r4
 8005db6:	eb19 0905 	adds.w	r9, r9, r5
 8005dba:	eb4a 0a06 	adc.w	sl, sl, r6
 8005dbe:	f04f 0100 	mov.w	r1, #0
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dd2:	4689      	mov	r9, r1
 8005dd4:	4692      	mov	sl, r2
 8005dd6:	eb19 0005 	adds.w	r0, r9, r5
 8005dda:	eb4a 0106 	adc.w	r1, sl, r6
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	461d      	mov	r5, r3
 8005de4:	f04f 0600 	mov.w	r6, #0
 8005de8:	196b      	adds	r3, r5, r5
 8005dea:	eb46 0406 	adc.w	r4, r6, r6
 8005dee:	461a      	mov	r2, r3
 8005df0:	4623      	mov	r3, r4
 8005df2:	f7fa fe27 	bl	8000a44 <__aeabi_uldivmod>
 8005df6:	4603      	mov	r3, r0
 8005df8:	460c      	mov	r4, r1
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	4b2c      	ldr	r3, [pc, #176]	; (8005eb0 <UART_SetConfig+0x384>)
 8005dfe:	fba3 1302 	umull	r1, r3, r3, r2
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2164      	movs	r1, #100	; 0x64
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	3332      	adds	r3, #50	; 0x32
 8005e10:	4a27      	ldr	r2, [pc, #156]	; (8005eb0 <UART_SetConfig+0x384>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e1e:	4498      	add	r8, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	461d      	mov	r5, r3
 8005e24:	f04f 0600 	mov.w	r6, #0
 8005e28:	46a9      	mov	r9, r5
 8005e2a:	46b2      	mov	sl, r6
 8005e2c:	eb19 0309 	adds.w	r3, r9, r9
 8005e30:	eb4a 040a 	adc.w	r4, sl, sl
 8005e34:	4699      	mov	r9, r3
 8005e36:	46a2      	mov	sl, r4
 8005e38:	eb19 0905 	adds.w	r9, r9, r5
 8005e3c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e40:	f04f 0100 	mov.w	r1, #0
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e54:	4689      	mov	r9, r1
 8005e56:	4692      	mov	sl, r2
 8005e58:	eb19 0005 	adds.w	r0, r9, r5
 8005e5c:	eb4a 0106 	adc.w	r1, sl, r6
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	461d      	mov	r5, r3
 8005e66:	f04f 0600 	mov.w	r6, #0
 8005e6a:	196b      	adds	r3, r5, r5
 8005e6c:	eb46 0406 	adc.w	r4, r6, r6
 8005e70:	461a      	mov	r2, r3
 8005e72:	4623      	mov	r3, r4
 8005e74:	f7fa fde6 	bl	8000a44 <__aeabi_uldivmod>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	4b0c      	ldr	r3, [pc, #48]	; (8005eb0 <UART_SetConfig+0x384>)
 8005e80:	fba3 1302 	umull	r1, r3, r3, r2
 8005e84:	095b      	lsrs	r3, r3, #5
 8005e86:	2164      	movs	r1, #100	; 0x64
 8005e88:	fb01 f303 	mul.w	r3, r1, r3
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	3332      	adds	r3, #50	; 0x32
 8005e92:	4a07      	ldr	r2, [pc, #28]	; (8005eb0 <UART_SetConfig+0x384>)
 8005e94:	fba2 2303 	umull	r2, r3, r2, r3
 8005e98:	095b      	lsrs	r3, r3, #5
 8005e9a:	f003 0207 	and.w	r2, r3, #7
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4442      	add	r2, r8
 8005ea4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005ea6:	e1b2      	b.n	800620e <UART_SetConfig+0x6e2>
 8005ea8:	40011000 	.word	0x40011000
 8005eac:	40011400 	.word	0x40011400
 8005eb0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4ad7      	ldr	r2, [pc, #860]	; (8006218 <UART_SetConfig+0x6ec>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d005      	beq.n	8005eca <UART_SetConfig+0x39e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4ad6      	ldr	r2, [pc, #856]	; (800621c <UART_SetConfig+0x6f0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	f040 80d1 	bne.w	800606c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eca:	f7fd fda1 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 8005ece:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	469a      	mov	sl, r3
 8005ed4:	f04f 0b00 	mov.w	fp, #0
 8005ed8:	46d0      	mov	r8, sl
 8005eda:	46d9      	mov	r9, fp
 8005edc:	eb18 0308 	adds.w	r3, r8, r8
 8005ee0:	eb49 0409 	adc.w	r4, r9, r9
 8005ee4:	4698      	mov	r8, r3
 8005ee6:	46a1      	mov	r9, r4
 8005ee8:	eb18 080a 	adds.w	r8, r8, sl
 8005eec:	eb49 090b 	adc.w	r9, r9, fp
 8005ef0:	f04f 0100 	mov.w	r1, #0
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005efc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f00:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f04:	4688      	mov	r8, r1
 8005f06:	4691      	mov	r9, r2
 8005f08:	eb1a 0508 	adds.w	r5, sl, r8
 8005f0c:	eb4b 0609 	adc.w	r6, fp, r9
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	4619      	mov	r1, r3
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	f04f 0300 	mov.w	r3, #0
 8005f1e:	f04f 0400 	mov.w	r4, #0
 8005f22:	0094      	lsls	r4, r2, #2
 8005f24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f28:	008b      	lsls	r3, r1, #2
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4623      	mov	r3, r4
 8005f2e:	4628      	mov	r0, r5
 8005f30:	4631      	mov	r1, r6
 8005f32:	f7fa fd87 	bl	8000a44 <__aeabi_uldivmod>
 8005f36:	4603      	mov	r3, r0
 8005f38:	460c      	mov	r4, r1
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	4bb8      	ldr	r3, [pc, #736]	; (8006220 <UART_SetConfig+0x6f4>)
 8005f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	469b      	mov	fp, r3
 8005f4c:	f04f 0c00 	mov.w	ip, #0
 8005f50:	46d9      	mov	r9, fp
 8005f52:	46e2      	mov	sl, ip
 8005f54:	eb19 0309 	adds.w	r3, r9, r9
 8005f58:	eb4a 040a 	adc.w	r4, sl, sl
 8005f5c:	4699      	mov	r9, r3
 8005f5e:	46a2      	mov	sl, r4
 8005f60:	eb19 090b 	adds.w	r9, r9, fp
 8005f64:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f68:	f04f 0100 	mov.w	r1, #0
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f7c:	4689      	mov	r9, r1
 8005f7e:	4692      	mov	sl, r2
 8005f80:	eb1b 0509 	adds.w	r5, fp, r9
 8005f84:	eb4c 060a 	adc.w	r6, ip, sl
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	f04f 0400 	mov.w	r4, #0
 8005f9a:	0094      	lsls	r4, r2, #2
 8005f9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fa0:	008b      	lsls	r3, r1, #2
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	4623      	mov	r3, r4
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	4631      	mov	r1, r6
 8005faa:	f7fa fd4b 	bl	8000a44 <__aeabi_uldivmod>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	4b9a      	ldr	r3, [pc, #616]	; (8006220 <UART_SetConfig+0x6f4>)
 8005fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	2164      	movs	r1, #100	; 0x64
 8005fbe:	fb01 f303 	mul.w	r3, r1, r3
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	3332      	adds	r3, #50	; 0x32
 8005fc8:	4a95      	ldr	r2, [pc, #596]	; (8006220 <UART_SetConfig+0x6f4>)
 8005fca:	fba2 2303 	umull	r2, r3, r2, r3
 8005fce:	095b      	lsrs	r3, r3, #5
 8005fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fd4:	4498      	add	r8, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	469b      	mov	fp, r3
 8005fda:	f04f 0c00 	mov.w	ip, #0
 8005fde:	46d9      	mov	r9, fp
 8005fe0:	46e2      	mov	sl, ip
 8005fe2:	eb19 0309 	adds.w	r3, r9, r9
 8005fe6:	eb4a 040a 	adc.w	r4, sl, sl
 8005fea:	4699      	mov	r9, r3
 8005fec:	46a2      	mov	sl, r4
 8005fee:	eb19 090b 	adds.w	r9, r9, fp
 8005ff2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ff6:	f04f 0100 	mov.w	r1, #0
 8005ffa:	f04f 0200 	mov.w	r2, #0
 8005ffe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006002:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006006:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800600a:	4689      	mov	r9, r1
 800600c:	4692      	mov	sl, r2
 800600e:	eb1b 0509 	adds.w	r5, fp, r9
 8006012:	eb4c 060a 	adc.w	r6, ip, sl
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	4619      	mov	r1, r3
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	f04f 0400 	mov.w	r4, #0
 8006028:	0094      	lsls	r4, r2, #2
 800602a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800602e:	008b      	lsls	r3, r1, #2
 8006030:	461a      	mov	r2, r3
 8006032:	4623      	mov	r3, r4
 8006034:	4628      	mov	r0, r5
 8006036:	4631      	mov	r1, r6
 8006038:	f7fa fd04 	bl	8000a44 <__aeabi_uldivmod>
 800603c:	4603      	mov	r3, r0
 800603e:	460c      	mov	r4, r1
 8006040:	461a      	mov	r2, r3
 8006042:	4b77      	ldr	r3, [pc, #476]	; (8006220 <UART_SetConfig+0x6f4>)
 8006044:	fba3 1302 	umull	r1, r3, r3, r2
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	2164      	movs	r1, #100	; 0x64
 800604c:	fb01 f303 	mul.w	r3, r1, r3
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	3332      	adds	r3, #50	; 0x32
 8006056:	4a72      	ldr	r2, [pc, #456]	; (8006220 <UART_SetConfig+0x6f4>)
 8006058:	fba2 2303 	umull	r2, r3, r2, r3
 800605c:	095b      	lsrs	r3, r3, #5
 800605e:	f003 020f 	and.w	r2, r3, #15
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4442      	add	r2, r8
 8006068:	609a      	str	r2, [r3, #8]
 800606a:	e0d0      	b.n	800620e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800606c:	f7fd fcbc 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8006070:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	469a      	mov	sl, r3
 8006076:	f04f 0b00 	mov.w	fp, #0
 800607a:	46d0      	mov	r8, sl
 800607c:	46d9      	mov	r9, fp
 800607e:	eb18 0308 	adds.w	r3, r8, r8
 8006082:	eb49 0409 	adc.w	r4, r9, r9
 8006086:	4698      	mov	r8, r3
 8006088:	46a1      	mov	r9, r4
 800608a:	eb18 080a 	adds.w	r8, r8, sl
 800608e:	eb49 090b 	adc.w	r9, r9, fp
 8006092:	f04f 0100 	mov.w	r1, #0
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800609e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060a6:	4688      	mov	r8, r1
 80060a8:	4691      	mov	r9, r2
 80060aa:	eb1a 0508 	adds.w	r5, sl, r8
 80060ae:	eb4b 0609 	adc.w	r6, fp, r9
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	4619      	mov	r1, r3
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	f04f 0400 	mov.w	r4, #0
 80060c4:	0094      	lsls	r4, r2, #2
 80060c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060ca:	008b      	lsls	r3, r1, #2
 80060cc:	461a      	mov	r2, r3
 80060ce:	4623      	mov	r3, r4
 80060d0:	4628      	mov	r0, r5
 80060d2:	4631      	mov	r1, r6
 80060d4:	f7fa fcb6 	bl	8000a44 <__aeabi_uldivmod>
 80060d8:	4603      	mov	r3, r0
 80060da:	460c      	mov	r4, r1
 80060dc:	461a      	mov	r2, r3
 80060de:	4b50      	ldr	r3, [pc, #320]	; (8006220 <UART_SetConfig+0x6f4>)
 80060e0:	fba3 2302 	umull	r2, r3, r3, r2
 80060e4:	095b      	lsrs	r3, r3, #5
 80060e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	469b      	mov	fp, r3
 80060ee:	f04f 0c00 	mov.w	ip, #0
 80060f2:	46d9      	mov	r9, fp
 80060f4:	46e2      	mov	sl, ip
 80060f6:	eb19 0309 	adds.w	r3, r9, r9
 80060fa:	eb4a 040a 	adc.w	r4, sl, sl
 80060fe:	4699      	mov	r9, r3
 8006100:	46a2      	mov	sl, r4
 8006102:	eb19 090b 	adds.w	r9, r9, fp
 8006106:	eb4a 0a0c 	adc.w	sl, sl, ip
 800610a:	f04f 0100 	mov.w	r1, #0
 800610e:	f04f 0200 	mov.w	r2, #0
 8006112:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006116:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800611a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800611e:	4689      	mov	r9, r1
 8006120:	4692      	mov	sl, r2
 8006122:	eb1b 0509 	adds.w	r5, fp, r9
 8006126:	eb4c 060a 	adc.w	r6, ip, sl
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	4619      	mov	r1, r3
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	f04f 0400 	mov.w	r4, #0
 800613c:	0094      	lsls	r4, r2, #2
 800613e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006142:	008b      	lsls	r3, r1, #2
 8006144:	461a      	mov	r2, r3
 8006146:	4623      	mov	r3, r4
 8006148:	4628      	mov	r0, r5
 800614a:	4631      	mov	r1, r6
 800614c:	f7fa fc7a 	bl	8000a44 <__aeabi_uldivmod>
 8006150:	4603      	mov	r3, r0
 8006152:	460c      	mov	r4, r1
 8006154:	461a      	mov	r2, r3
 8006156:	4b32      	ldr	r3, [pc, #200]	; (8006220 <UART_SetConfig+0x6f4>)
 8006158:	fba3 1302 	umull	r1, r3, r3, r2
 800615c:	095b      	lsrs	r3, r3, #5
 800615e:	2164      	movs	r1, #100	; 0x64
 8006160:	fb01 f303 	mul.w	r3, r1, r3
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	011b      	lsls	r3, r3, #4
 8006168:	3332      	adds	r3, #50	; 0x32
 800616a:	4a2d      	ldr	r2, [pc, #180]	; (8006220 <UART_SetConfig+0x6f4>)
 800616c:	fba2 2303 	umull	r2, r3, r2, r3
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006176:	4498      	add	r8, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	469b      	mov	fp, r3
 800617c:	f04f 0c00 	mov.w	ip, #0
 8006180:	46d9      	mov	r9, fp
 8006182:	46e2      	mov	sl, ip
 8006184:	eb19 0309 	adds.w	r3, r9, r9
 8006188:	eb4a 040a 	adc.w	r4, sl, sl
 800618c:	4699      	mov	r9, r3
 800618e:	46a2      	mov	sl, r4
 8006190:	eb19 090b 	adds.w	r9, r9, fp
 8006194:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006198:	f04f 0100 	mov.w	r1, #0
 800619c:	f04f 0200 	mov.w	r2, #0
 80061a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061ac:	4689      	mov	r9, r1
 80061ae:	4692      	mov	sl, r2
 80061b0:	eb1b 0509 	adds.w	r5, fp, r9
 80061b4:	eb4c 060a 	adc.w	r6, ip, sl
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	4619      	mov	r1, r3
 80061be:	f04f 0200 	mov.w	r2, #0
 80061c2:	f04f 0300 	mov.w	r3, #0
 80061c6:	f04f 0400 	mov.w	r4, #0
 80061ca:	0094      	lsls	r4, r2, #2
 80061cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061d0:	008b      	lsls	r3, r1, #2
 80061d2:	461a      	mov	r2, r3
 80061d4:	4623      	mov	r3, r4
 80061d6:	4628      	mov	r0, r5
 80061d8:	4631      	mov	r1, r6
 80061da:	f7fa fc33 	bl	8000a44 <__aeabi_uldivmod>
 80061de:	4603      	mov	r3, r0
 80061e0:	460c      	mov	r4, r1
 80061e2:	461a      	mov	r2, r3
 80061e4:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <UART_SetConfig+0x6f4>)
 80061e6:	fba3 1302 	umull	r1, r3, r3, r2
 80061ea:	095b      	lsrs	r3, r3, #5
 80061ec:	2164      	movs	r1, #100	; 0x64
 80061ee:	fb01 f303 	mul.w	r3, r1, r3
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	3332      	adds	r3, #50	; 0x32
 80061f8:	4a09      	ldr	r2, [pc, #36]	; (8006220 <UART_SetConfig+0x6f4>)
 80061fa:	fba2 2303 	umull	r2, r3, r2, r3
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	f003 020f 	and.w	r2, r3, #15
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4442      	add	r2, r8
 800620a:	609a      	str	r2, [r3, #8]
}
 800620c:	e7ff      	b.n	800620e <UART_SetConfig+0x6e2>
 800620e:	bf00      	nop
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006218:	40011000 	.word	0x40011000
 800621c:	40011400 	.word	0x40011400
 8006220:	51eb851f 	.word	0x51eb851f

08006224 <__errno>:
 8006224:	4b01      	ldr	r3, [pc, #4]	; (800622c <__errno+0x8>)
 8006226:	6818      	ldr	r0, [r3, #0]
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	20000018 	.word	0x20000018

08006230 <__libc_init_array>:
 8006230:	b570      	push	{r4, r5, r6, lr}
 8006232:	4e0d      	ldr	r6, [pc, #52]	; (8006268 <__libc_init_array+0x38>)
 8006234:	4c0d      	ldr	r4, [pc, #52]	; (800626c <__libc_init_array+0x3c>)
 8006236:	1ba4      	subs	r4, r4, r6
 8006238:	10a4      	asrs	r4, r4, #2
 800623a:	2500      	movs	r5, #0
 800623c:	42a5      	cmp	r5, r4
 800623e:	d109      	bne.n	8006254 <__libc_init_array+0x24>
 8006240:	4e0b      	ldr	r6, [pc, #44]	; (8006270 <__libc_init_array+0x40>)
 8006242:	4c0c      	ldr	r4, [pc, #48]	; (8006274 <__libc_init_array+0x44>)
 8006244:	f000 f8c8 	bl	80063d8 <_init>
 8006248:	1ba4      	subs	r4, r4, r6
 800624a:	10a4      	asrs	r4, r4, #2
 800624c:	2500      	movs	r5, #0
 800624e:	42a5      	cmp	r5, r4
 8006250:	d105      	bne.n	800625e <__libc_init_array+0x2e>
 8006252:	bd70      	pop	{r4, r5, r6, pc}
 8006254:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006258:	4798      	blx	r3
 800625a:	3501      	adds	r5, #1
 800625c:	e7ee      	b.n	800623c <__libc_init_array+0xc>
 800625e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006262:	4798      	blx	r3
 8006264:	3501      	adds	r5, #1
 8006266:	e7f2      	b.n	800624e <__libc_init_array+0x1e>
 8006268:	08006418 	.word	0x08006418
 800626c:	08006418 	.word	0x08006418
 8006270:	08006418 	.word	0x08006418
 8006274:	0800641c 	.word	0x0800641c

08006278 <memset>:
 8006278:	4402      	add	r2, r0
 800627a:	4603      	mov	r3, r0
 800627c:	4293      	cmp	r3, r2
 800627e:	d100      	bne.n	8006282 <memset+0xa>
 8006280:	4770      	bx	lr
 8006282:	f803 1b01 	strb.w	r1, [r3], #1
 8006286:	e7f9      	b.n	800627c <memset+0x4>

08006288 <rand>:
 8006288:	b538      	push	{r3, r4, r5, lr}
 800628a:	4b13      	ldr	r3, [pc, #76]	; (80062d8 <rand+0x50>)
 800628c:	681c      	ldr	r4, [r3, #0]
 800628e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006290:	b97b      	cbnz	r3, 80062b2 <rand+0x2a>
 8006292:	2018      	movs	r0, #24
 8006294:	f000 f82c 	bl	80062f0 <malloc>
 8006298:	4a10      	ldr	r2, [pc, #64]	; (80062dc <rand+0x54>)
 800629a:	4b11      	ldr	r3, [pc, #68]	; (80062e0 <rand+0x58>)
 800629c:	63a0      	str	r0, [r4, #56]	; 0x38
 800629e:	e9c0 2300 	strd	r2, r3, [r0]
 80062a2:	4b10      	ldr	r3, [pc, #64]	; (80062e4 <rand+0x5c>)
 80062a4:	6083      	str	r3, [r0, #8]
 80062a6:	230b      	movs	r3, #11
 80062a8:	8183      	strh	r3, [r0, #12]
 80062aa:	2201      	movs	r2, #1
 80062ac:	2300      	movs	r3, #0
 80062ae:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80062b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80062b4:	480c      	ldr	r0, [pc, #48]	; (80062e8 <rand+0x60>)
 80062b6:	690a      	ldr	r2, [r1, #16]
 80062b8:	694b      	ldr	r3, [r1, #20]
 80062ba:	4c0c      	ldr	r4, [pc, #48]	; (80062ec <rand+0x64>)
 80062bc:	4350      	muls	r0, r2
 80062be:	fb04 0003 	mla	r0, r4, r3, r0
 80062c2:	fba2 2304 	umull	r2, r3, r2, r4
 80062c6:	4403      	add	r3, r0
 80062c8:	1c54      	adds	r4, r2, #1
 80062ca:	f143 0500 	adc.w	r5, r3, #0
 80062ce:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80062d2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
 80062d8:	20000018 	.word	0x20000018
 80062dc:	abcd330e 	.word	0xabcd330e
 80062e0:	e66d1234 	.word	0xe66d1234
 80062e4:	0005deec 	.word	0x0005deec
 80062e8:	5851f42d 	.word	0x5851f42d
 80062ec:	4c957f2d 	.word	0x4c957f2d

080062f0 <malloc>:
 80062f0:	4b02      	ldr	r3, [pc, #8]	; (80062fc <malloc+0xc>)
 80062f2:	4601      	mov	r1, r0
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	f000 b803 	b.w	8006300 <_malloc_r>
 80062fa:	bf00      	nop
 80062fc:	20000018 	.word	0x20000018

08006300 <_malloc_r>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	1ccd      	adds	r5, r1, #3
 8006304:	f025 0503 	bic.w	r5, r5, #3
 8006308:	3508      	adds	r5, #8
 800630a:	2d0c      	cmp	r5, #12
 800630c:	bf38      	it	cc
 800630e:	250c      	movcc	r5, #12
 8006310:	2d00      	cmp	r5, #0
 8006312:	4606      	mov	r6, r0
 8006314:	db01      	blt.n	800631a <_malloc_r+0x1a>
 8006316:	42a9      	cmp	r1, r5
 8006318:	d903      	bls.n	8006322 <_malloc_r+0x22>
 800631a:	230c      	movs	r3, #12
 800631c:	6033      	str	r3, [r6, #0]
 800631e:	2000      	movs	r0, #0
 8006320:	bd70      	pop	{r4, r5, r6, pc}
 8006322:	f000 f857 	bl	80063d4 <__malloc_lock>
 8006326:	4a21      	ldr	r2, [pc, #132]	; (80063ac <_malloc_r+0xac>)
 8006328:	6814      	ldr	r4, [r2, #0]
 800632a:	4621      	mov	r1, r4
 800632c:	b991      	cbnz	r1, 8006354 <_malloc_r+0x54>
 800632e:	4c20      	ldr	r4, [pc, #128]	; (80063b0 <_malloc_r+0xb0>)
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	b91b      	cbnz	r3, 800633c <_malloc_r+0x3c>
 8006334:	4630      	mov	r0, r6
 8006336:	f000 f83d 	bl	80063b4 <_sbrk_r>
 800633a:	6020      	str	r0, [r4, #0]
 800633c:	4629      	mov	r1, r5
 800633e:	4630      	mov	r0, r6
 8006340:	f000 f838 	bl	80063b4 <_sbrk_r>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	d124      	bne.n	8006392 <_malloc_r+0x92>
 8006348:	230c      	movs	r3, #12
 800634a:	6033      	str	r3, [r6, #0]
 800634c:	4630      	mov	r0, r6
 800634e:	f000 f842 	bl	80063d6 <__malloc_unlock>
 8006352:	e7e4      	b.n	800631e <_malloc_r+0x1e>
 8006354:	680b      	ldr	r3, [r1, #0]
 8006356:	1b5b      	subs	r3, r3, r5
 8006358:	d418      	bmi.n	800638c <_malloc_r+0x8c>
 800635a:	2b0b      	cmp	r3, #11
 800635c:	d90f      	bls.n	800637e <_malloc_r+0x7e>
 800635e:	600b      	str	r3, [r1, #0]
 8006360:	50cd      	str	r5, [r1, r3]
 8006362:	18cc      	adds	r4, r1, r3
 8006364:	4630      	mov	r0, r6
 8006366:	f000 f836 	bl	80063d6 <__malloc_unlock>
 800636a:	f104 000b 	add.w	r0, r4, #11
 800636e:	1d23      	adds	r3, r4, #4
 8006370:	f020 0007 	bic.w	r0, r0, #7
 8006374:	1ac3      	subs	r3, r0, r3
 8006376:	d0d3      	beq.n	8006320 <_malloc_r+0x20>
 8006378:	425a      	negs	r2, r3
 800637a:	50e2      	str	r2, [r4, r3]
 800637c:	e7d0      	b.n	8006320 <_malloc_r+0x20>
 800637e:	428c      	cmp	r4, r1
 8006380:	684b      	ldr	r3, [r1, #4]
 8006382:	bf16      	itet	ne
 8006384:	6063      	strne	r3, [r4, #4]
 8006386:	6013      	streq	r3, [r2, #0]
 8006388:	460c      	movne	r4, r1
 800638a:	e7eb      	b.n	8006364 <_malloc_r+0x64>
 800638c:	460c      	mov	r4, r1
 800638e:	6849      	ldr	r1, [r1, #4]
 8006390:	e7cc      	b.n	800632c <_malloc_r+0x2c>
 8006392:	1cc4      	adds	r4, r0, #3
 8006394:	f024 0403 	bic.w	r4, r4, #3
 8006398:	42a0      	cmp	r0, r4
 800639a:	d005      	beq.n	80063a8 <_malloc_r+0xa8>
 800639c:	1a21      	subs	r1, r4, r0
 800639e:	4630      	mov	r0, r6
 80063a0:	f000 f808 	bl	80063b4 <_sbrk_r>
 80063a4:	3001      	adds	r0, #1
 80063a6:	d0cf      	beq.n	8006348 <_malloc_r+0x48>
 80063a8:	6025      	str	r5, [r4, #0]
 80063aa:	e7db      	b.n	8006364 <_malloc_r+0x64>
 80063ac:	200000c4 	.word	0x200000c4
 80063b0:	200000c8 	.word	0x200000c8

080063b4 <_sbrk_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	4c06      	ldr	r4, [pc, #24]	; (80063d0 <_sbrk_r+0x1c>)
 80063b8:	2300      	movs	r3, #0
 80063ba:	4605      	mov	r5, r0
 80063bc:	4608      	mov	r0, r1
 80063be:	6023      	str	r3, [r4, #0]
 80063c0:	f7fb fe64 	bl	800208c <_sbrk>
 80063c4:	1c43      	adds	r3, r0, #1
 80063c6:	d102      	bne.n	80063ce <_sbrk_r+0x1a>
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	b103      	cbz	r3, 80063ce <_sbrk_r+0x1a>
 80063cc:	602b      	str	r3, [r5, #0]
 80063ce:	bd38      	pop	{r3, r4, r5, pc}
 80063d0:	20000348 	.word	0x20000348

080063d4 <__malloc_lock>:
 80063d4:	4770      	bx	lr

080063d6 <__malloc_unlock>:
 80063d6:	4770      	bx	lr

080063d8 <_init>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	bf00      	nop
 80063dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063de:	bc08      	pop	{r3}
 80063e0:	469e      	mov	lr, r3
 80063e2:	4770      	bx	lr

080063e4 <_fini>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	bf00      	nop
 80063e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ea:	bc08      	pop	{r3}
 80063ec:	469e      	mov	lr, r3
 80063ee:	4770      	bx	lr

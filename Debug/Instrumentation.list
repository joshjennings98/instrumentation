
Instrumentation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006228  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080063f0  080063f0  000163f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006410  08006410  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08006410  08006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006418  08006418  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006418  08006418  00016418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800641c  0800641c  0001641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000018  08006438  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08006438  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa2f  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021f1  00000000  00000000  0002fa77  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff0  00000000  00000000  00031c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef0  00000000  00000000  00032c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022845  00000000  00000000  00033b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bfb2  00000000  00000000  0005638d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4d00  00000000  00000000  0006233f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013703f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004460  00000000  00000000  001370bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000018 	.word	0x20000018
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080063d8 	.word	0x080063d8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000001c 	.word	0x2000001c
 8000204:	080063d8 	.word	0x080063d8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_d2f>:
 80009e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ec:	bf24      	itt	cs
 80009ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009f6:	d90d      	bls.n	8000a14 <__aeabi_d2f+0x30>
 80009f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a0c:	bf08      	it	eq
 8000a0e:	f020 0001 	biceq.w	r0, r0, #1
 8000a12:	4770      	bx	lr
 8000a14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a18:	d121      	bne.n	8000a5e <__aeabi_d2f+0x7a>
 8000a1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a1e:	bfbc      	itt	lt
 8000a20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a24:	4770      	bxlt	lr
 8000a26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a2e:	f1c2 0218 	rsb	r2, r2, #24
 8000a32:	f1c2 0c20 	rsb	ip, r2, #32
 8000a36:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a3a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a3e:	bf18      	it	ne
 8000a40:	f040 0001 	orrne.w	r0, r0, #1
 8000a44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a50:	ea40 000c 	orr.w	r0, r0, ip
 8000a54:	fa23 f302 	lsr.w	r3, r3, r2
 8000a58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a5c:	e7cc      	b.n	80009f8 <__aeabi_d2f+0x14>
 8000a5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a62:	d107      	bne.n	8000a74 <__aeabi_d2f+0x90>
 8000a64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a68:	bf1e      	ittt	ne
 8000a6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a72:	4770      	bxne	lr
 8000a74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295
 8000a98:	f000 b972 	b.w	8000d80 <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f000 f806 	bl	8000ab4 <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <__udivmoddi4>:
 8000ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab8:	9e08      	ldr	r6, [sp, #32]
 8000aba:	4604      	mov	r4, r0
 8000abc:	4688      	mov	r8, r1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d14b      	bne.n	8000b5a <__udivmoddi4+0xa6>
 8000ac2:	428a      	cmp	r2, r1
 8000ac4:	4615      	mov	r5, r2
 8000ac6:	d967      	bls.n	8000b98 <__udivmoddi4+0xe4>
 8000ac8:	fab2 f282 	clz	r2, r2
 8000acc:	b14a      	cbz	r2, 8000ae2 <__udivmoddi4+0x2e>
 8000ace:	f1c2 0720 	rsb	r7, r2, #32
 8000ad2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ad6:	fa20 f707 	lsr.w	r7, r0, r7
 8000ada:	4095      	lsls	r5, r2
 8000adc:	ea47 0803 	orr.w	r8, r7, r3
 8000ae0:	4094      	lsls	r4, r2
 8000ae2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ae6:	0c23      	lsrs	r3, r4, #16
 8000ae8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000aec:	fa1f fc85 	uxth.w	ip, r5
 8000af0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000af4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af8:	fb07 f10c 	mul.w	r1, r7, ip
 8000afc:	4299      	cmp	r1, r3
 8000afe:	d909      	bls.n	8000b14 <__udivmoddi4+0x60>
 8000b00:	18eb      	adds	r3, r5, r3
 8000b02:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b06:	f080 811b 	bcs.w	8000d40 <__udivmoddi4+0x28c>
 8000b0a:	4299      	cmp	r1, r3
 8000b0c:	f240 8118 	bls.w	8000d40 <__udivmoddi4+0x28c>
 8000b10:	3f02      	subs	r7, #2
 8000b12:	442b      	add	r3, r5
 8000b14:	1a5b      	subs	r3, r3, r1
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b24:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b28:	45a4      	cmp	ip, r4
 8000b2a:	d909      	bls.n	8000b40 <__udivmoddi4+0x8c>
 8000b2c:	192c      	adds	r4, r5, r4
 8000b2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b32:	f080 8107 	bcs.w	8000d44 <__udivmoddi4+0x290>
 8000b36:	45a4      	cmp	ip, r4
 8000b38:	f240 8104 	bls.w	8000d44 <__udivmoddi4+0x290>
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	442c      	add	r4, r5
 8000b40:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b44:	eba4 040c 	sub.w	r4, r4, ip
 8000b48:	2700      	movs	r7, #0
 8000b4a:	b11e      	cbz	r6, 8000b54 <__udivmoddi4+0xa0>
 8000b4c:	40d4      	lsrs	r4, r2
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e9c6 4300 	strd	r4, r3, [r6]
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d909      	bls.n	8000b72 <__udivmoddi4+0xbe>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	f000 80eb 	beq.w	8000d3a <__udivmoddi4+0x286>
 8000b64:	2700      	movs	r7, #0
 8000b66:	e9c6 0100 	strd	r0, r1, [r6]
 8000b6a:	4638      	mov	r0, r7
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	fab3 f783 	clz	r7, r3
 8000b76:	2f00      	cmp	r7, #0
 8000b78:	d147      	bne.n	8000c0a <__udivmoddi4+0x156>
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	d302      	bcc.n	8000b84 <__udivmoddi4+0xd0>
 8000b7e:	4282      	cmp	r2, r0
 8000b80:	f200 80fa 	bhi.w	8000d78 <__udivmoddi4+0x2c4>
 8000b84:	1a84      	subs	r4, r0, r2
 8000b86:	eb61 0303 	sbc.w	r3, r1, r3
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	4698      	mov	r8, r3
 8000b8e:	2e00      	cmp	r6, #0
 8000b90:	d0e0      	beq.n	8000b54 <__udivmoddi4+0xa0>
 8000b92:	e9c6 4800 	strd	r4, r8, [r6]
 8000b96:	e7dd      	b.n	8000b54 <__udivmoddi4+0xa0>
 8000b98:	b902      	cbnz	r2, 8000b9c <__udivmoddi4+0xe8>
 8000b9a:	deff      	udf	#255	; 0xff
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f040 808f 	bne.w	8000cc4 <__udivmoddi4+0x210>
 8000ba6:	1b49      	subs	r1, r1, r5
 8000ba8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bac:	fa1f f885 	uxth.w	r8, r5
 8000bb0:	2701      	movs	r7, #1
 8000bb2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bb6:	0c23      	lsrs	r3, r4, #16
 8000bb8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc0:	fb08 f10c 	mul.w	r1, r8, ip
 8000bc4:	4299      	cmp	r1, r3
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x124>
 8000bc8:	18eb      	adds	r3, r5, r3
 8000bca:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x122>
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2bc>
 8000bd6:	4684      	mov	ip, r0
 8000bd8:	1a59      	subs	r1, r3, r1
 8000bda:	b2a3      	uxth	r3, r4
 8000bdc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000be4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000be8:	fb08 f800 	mul.w	r8, r8, r0
 8000bec:	45a0      	cmp	r8, r4
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x14c>
 8000bf0:	192c      	adds	r4, r5, r4
 8000bf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x14a>
 8000bf8:	45a0      	cmp	r8, r4
 8000bfa:	f200 80b6 	bhi.w	8000d6a <__udivmoddi4+0x2b6>
 8000bfe:	4618      	mov	r0, r3
 8000c00:	eba4 0408 	sub.w	r4, r4, r8
 8000c04:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c08:	e79f      	b.n	8000b4a <__udivmoddi4+0x96>
 8000c0a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c0e:	40bb      	lsls	r3, r7
 8000c10:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c14:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c18:	fa01 f407 	lsl.w	r4, r1, r7
 8000c1c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c20:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c24:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c28:	4325      	orrs	r5, r4
 8000c2a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c2e:	0c2c      	lsrs	r4, r5, #16
 8000c30:	fb08 3319 	mls	r3, r8, r9, r3
 8000c34:	fa1f fa8e 	uxth.w	sl, lr
 8000c38:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c3c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c40:	429c      	cmp	r4, r3
 8000c42:	fa02 f207 	lsl.w	r2, r2, r7
 8000c46:	fa00 f107 	lsl.w	r1, r0, r7
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b0>
 8000c4c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c50:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c54:	f080 8087 	bcs.w	8000d66 <__udivmoddi4+0x2b2>
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	f240 8084 	bls.w	8000d66 <__udivmoddi4+0x2b2>
 8000c5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c62:	4473      	add	r3, lr
 8000c64:	1b1b      	subs	r3, r3, r4
 8000c66:	b2ad      	uxth	r5, r5
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c74:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c78:	45a2      	cmp	sl, r4
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1da>
 8000c7c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	d26b      	bcs.n	8000d5e <__udivmoddi4+0x2aa>
 8000c86:	45a2      	cmp	sl, r4
 8000c88:	d969      	bls.n	8000d5e <__udivmoddi4+0x2aa>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4474      	add	r4, lr
 8000c8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c92:	fba0 8902 	umull	r8, r9, r0, r2
 8000c96:	eba4 040a 	sub.w	r4, r4, sl
 8000c9a:	454c      	cmp	r4, r9
 8000c9c:	46c2      	mov	sl, r8
 8000c9e:	464b      	mov	r3, r9
 8000ca0:	d354      	bcc.n	8000d4c <__udivmoddi4+0x298>
 8000ca2:	d051      	beq.n	8000d48 <__udivmoddi4+0x294>
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d069      	beq.n	8000d7c <__udivmoddi4+0x2c8>
 8000ca8:	ebb1 050a 	subs.w	r5, r1, sl
 8000cac:	eb64 0403 	sbc.w	r4, r4, r3
 8000cb0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cb4:	40fd      	lsrs	r5, r7
 8000cb6:	40fc      	lsrs	r4, r7
 8000cb8:	ea4c 0505 	orr.w	r5, ip, r5
 8000cbc:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e747      	b.n	8000b54 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f703 	lsr.w	r7, r0, r3
 8000ccc:	4095      	lsls	r5, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	4338      	orrs	r0, r7
 8000cdc:	0c01      	lsrs	r1, r0, #16
 8000cde:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ce2:	fa1f f885 	uxth.w	r8, r5
 8000ce6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cee:	fb07 f308 	mul.w	r3, r7, r8
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x256>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d00:	d22f      	bcs.n	8000d62 <__udivmoddi4+0x2ae>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d92d      	bls.n	8000d62 <__udivmoddi4+0x2ae>
 8000d06:	3f02      	subs	r7, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1acb      	subs	r3, r1, r3
 8000d0c:	b281      	uxth	r1, r0
 8000d0e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d12:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d16:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1a:	fb00 f308 	mul.w	r3, r0, r8
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d907      	bls.n	8000d32 <__udivmoddi4+0x27e>
 8000d22:	1869      	adds	r1, r5, r1
 8000d24:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d28:	d217      	bcs.n	8000d5a <__udivmoddi4+0x2a6>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d915      	bls.n	8000d5a <__udivmoddi4+0x2a6>
 8000d2e:	3802      	subs	r0, #2
 8000d30:	4429      	add	r1, r5
 8000d32:	1ac9      	subs	r1, r1, r3
 8000d34:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d38:	e73b      	b.n	8000bb2 <__udivmoddi4+0xfe>
 8000d3a:	4637      	mov	r7, r6
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e709      	b.n	8000b54 <__udivmoddi4+0xa0>
 8000d40:	4607      	mov	r7, r0
 8000d42:	e6e7      	b.n	8000b14 <__udivmoddi4+0x60>
 8000d44:	4618      	mov	r0, r3
 8000d46:	e6fb      	b.n	8000b40 <__udivmoddi4+0x8c>
 8000d48:	4541      	cmp	r1, r8
 8000d4a:	d2ab      	bcs.n	8000ca4 <__udivmoddi4+0x1f0>
 8000d4c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d50:	eb69 020e 	sbc.w	r2, r9, lr
 8000d54:	3801      	subs	r0, #1
 8000d56:	4613      	mov	r3, r2
 8000d58:	e7a4      	b.n	8000ca4 <__udivmoddi4+0x1f0>
 8000d5a:	4660      	mov	r0, ip
 8000d5c:	e7e9      	b.n	8000d32 <__udivmoddi4+0x27e>
 8000d5e:	4618      	mov	r0, r3
 8000d60:	e795      	b.n	8000c8e <__udivmoddi4+0x1da>
 8000d62:	4667      	mov	r7, ip
 8000d64:	e7d1      	b.n	8000d0a <__udivmoddi4+0x256>
 8000d66:	4681      	mov	r9, r0
 8000d68:	e77c      	b.n	8000c64 <__udivmoddi4+0x1b0>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	442c      	add	r4, r5
 8000d6e:	e747      	b.n	8000c00 <__udivmoddi4+0x14c>
 8000d70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d74:	442b      	add	r3, r5
 8000d76:	e72f      	b.n	8000bd8 <__udivmoddi4+0x124>
 8000d78:	4638      	mov	r0, r7
 8000d7a:	e708      	b.n	8000b8e <__udivmoddi4+0xda>
 8000d7c:	4637      	mov	r7, r6
 8000d7e:	e6e9      	b.n	8000b54 <__udivmoddi4+0xa0>

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <AD9833CalculateRegister>:
 */
#include "ad9833.h"
#include "main.h"


void AD9833CalculateRegister(long frequency, int waveform){
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]

	float steps_per_Hz = (float)(0x10000000) / refFreq;
 8000d8e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000e10 <AD9833CalculateRegister+0x8c>
 8000d92:	eddf 6a20 	vldr	s13, [pc, #128]	; 8000e14 <AD9833CalculateRegister+0x90>
 8000d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d9a:	edc7 7a05 	vstr	s15, [r7, #20]

	unsigned long int FreqWord = frequency * steps_per_Hz;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	ee07 3a90 	vmov	s15, r3
 8000da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000db4:	ee17 3a90 	vmov	r3, s15
 8000db8:	613b      	str	r3, [r7, #16]

	int MSB = ((FreqWord & 0xFFFC000) >> 14);    //Only lower 14 bits are used for data
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	0b9b      	lsrs	r3, r3, #14
 8000dbe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000dc2:	60fb      	str	r3, [r7, #12]
	int LSB = (FreqWord & 0x3FFF);
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000dca:	60bb      	str	r3, [r7, #8]

	//Set control bits 15 and 14 to 0 and 1, respectively, for frequency register 0
	LSB |= 0x4000;
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd2:	60bb      	str	r3, [r7, #8]
	MSB |= 0x4000;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dda:	60fb      	str	r3, [r7, #12]

	registerValues[0] = 0x2100;
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <AD9833CalculateRegister+0x94>)
 8000dde:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 8000de2:	801a      	strh	r2, [r3, #0]
	registerValues[1] = LSB;
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <AD9833CalculateRegister+0x94>)
 8000dea:	805a      	strh	r2, [r3, #2]
	registerValues[2] = MSB;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <AD9833CalculateRegister+0x94>)
 8000df2:	809a      	strh	r2, [r3, #4]
	registerValues[3] = 0xC000;
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <AD9833CalculateRegister+0x94>)
 8000df6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000dfa:	80da      	strh	r2, [r3, #6]
	registerValues[4] = waveform; // TODO waveform error check
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <AD9833CalculateRegister+0x94>)
 8000e02:	811a      	strh	r2, [r3, #8]
}
 8000e04:	bf00      	nop
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	4bbebc20 	.word	0x4bbebc20
 8000e14:	4d800000 	.word	0x4d800000
 8000e18:	200000b8 	.word	0x200000b8
 8000e1c:	00000000 	.word	0x00000000

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e26:	f001 fae9 	bl	80023fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2a:	f000 f99f 	bl	800116c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f000 fc01 	bl	8001634 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e32:	f000 fbdf 	bl	80015f4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000e36:	f000 fa7b 	bl	8001330 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000e3a:	f000 fbb1 	bl	80015a0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e3e:	f000 fae7 	bl	8001410 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000e42:	f000 fa05 	bl	8001250 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000e46:	f000 faab 	bl	80013a0 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000e4a:	f000 fb5b 	bl	8001504 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Set All SPI Periperal CS High
  HAL_GPIO_WritePin(PGA_CS_GPIO_Port, PGA_CS_Pin, GPIO_PIN_SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	48af      	ldr	r0, [pc, #700]	; (8001110 <main+0x2f0>)
 8000e54:	f002 fd9e 	bl	8003994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2140      	movs	r1, #64	; 0x40
 8000e5c:	48ad      	ldr	r0, [pc, #692]	; (8001114 <main+0x2f4>)
 8000e5e:	f002 fd99 	bl	8003994 <HAL_GPIO_WritePin>

  // Reset AD9833
  HAL_Delay(10);
 8000e62:	200a      	movs	r0, #10
 8000e64:	f001 fb3c 	bl	80024e0 <HAL_Delay>
  uint16_t resetValue = 0x100;
 8000e68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e6c:	81fb      	strh	r3, [r7, #14]
  HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2140      	movs	r1, #64	; 0x40
 8000e72:	48a8      	ldr	r0, [pc, #672]	; (8001114 <main+0x2f4>)
 8000e74:	f002 fd8e 	bl	8003994 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t*)resetValue, sizeof(resetValue)/sizeof(uint16_t), HAL_MAX_DELAY);
 8000e78:	89fb      	ldrh	r3, [r7, #14]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e80:	2201      	movs	r2, #1
 8000e82:	48a5      	ldr	r0, [pc, #660]	; (8001118 <main+0x2f8>)
 8000e84:	f003 fb34 	bl	80044f0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2140      	movs	r1, #64	; 0x40
 8000e8c:	48a1      	ldr	r0, [pc, #644]	; (8001114 <main+0x2f4>)
 8000e8e:	f002 fd81 	bl	8003994 <HAL_GPIO_WritePin>

  // Reset LEDS
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e98:	48a0      	ldr	r0, [pc, #640]	; (800111c <main+0x2fc>)
 8000e9a:	f002 fd7b 	bl	8003994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GRN_LED_GPIO_Port, GRN_LED_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea4:	489d      	ldr	r0, [pc, #628]	; (800111c <main+0x2fc>)
 8000ea6:	f002 fd75 	bl	8003994 <HAL_GPIO_WritePin>

  // UART interrupts
  HAL_UART_Receive_IT(&huart2, (uint8_t*)uartRxBytes, 12);
 8000eaa:	220c      	movs	r2, #12
 8000eac:	499c      	ldr	r1, [pc, #624]	; (8001120 <main+0x300>)
 8000eae:	489d      	ldr	r0, [pc, #628]	; (8001124 <main+0x304>)
 8000eb0:	f004 fc5e 	bl	8005770 <HAL_UART_Receive_IT>
  //HAL_UART_Receive_DMA(&huart2, (uint8_t*)uartRxBytes, 1);

  // Start timer interrupts
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	489c      	ldr	r0, [pc, #624]	; (8001128 <main+0x308>)
 8000eb8:	f003 fd7e 	bl	80049b8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	489a      	ldr	r0, [pc, #616]	; (8001128 <main+0x308>)
 8000ec0:	f003 fd7a 	bl	80049b8 <HAL_TIM_IC_Start_IT>

  // Start ADC DMA thing
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, 3*ADC_BUF_LEN);
 8000ec4:	221e      	movs	r2, #30
 8000ec6:	4999      	ldr	r1, [pc, #612]	; (800112c <main+0x30c>)
 8000ec8:	4899      	ldr	r0, [pc, #612]	; (8001130 <main+0x310>)
 8000eca:	f001 fb6f 	bl	80025ac <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim3);
 8000ece:	4899      	ldr	r0, [pc, #612]	; (8001134 <main+0x314>)
 8000ed0:	f003 fd19 	bl	8004906 <HAL_TIM_Base_Start_IT>

  // Set relays low

  HAL_GPIO_WritePin(FB_SW6_GPIO_Port, FB_SW6_Pin, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eda:	488d      	ldr	r0, [pc, #564]	; (8001110 <main+0x2f0>)
 8000edc:	f002 fd5a 	bl	8003994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FB_SW5_GPIO_Port, FB_SW5_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee6:	488a      	ldr	r0, [pc, #552]	; (8001110 <main+0x2f0>)
 8000ee8:	f002 fd54 	bl	8003994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FB_SW4_GPIO_Port, FB_SW4_Pin, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef2:	488a      	ldr	r0, [pc, #552]	; (800111c <main+0x2fc>)
 8000ef4:	f002 fd4e 	bl	8003994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FB_SW3_GPIO_Port, FB_SW3_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000efe:	4884      	ldr	r0, [pc, #528]	; (8001110 <main+0x2f0>)
 8000f00:	f002 fd48 	bl	8003994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FB_SW2_GPIO_Port, FB_SW2_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2104      	movs	r1, #4
 8000f08:	4881      	ldr	r0, [pc, #516]	; (8001110 <main+0x2f0>)
 8000f0a:	f002 fd43 	bl	8003994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FB_SW1_GPIO_Port, FB_SW1_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2108      	movs	r1, #8
 8000f12:	487f      	ldr	r0, [pc, #508]	; (8001110 <main+0x2f0>)
 8000f14:	f002 fd3e 	bl	8003994 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TIM3->CNT = 0;
 8000f18:	4b87      	ldr	r3, [pc, #540]	; (8001138 <main+0x318>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
	  // Start loop timer

	  if (newCaptureValue){
 8000f1e:	4b87      	ldr	r3, [pc, #540]	; (800113c <main+0x31c>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <main+0x10c>
		 newCaptureValue = false;
 8000f26:	4b85      	ldr	r3, [pc, #532]	; (800113c <main+0x31c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
	  }

	  // Send Data Packets to AD9833
	  if(updateSignalFreqFlag == true){
 8000f2c:	4b84      	ldr	r3, [pc, #528]	; (8001140 <main+0x320>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00a      	beq.n	8000f4a <main+0x12a>
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f3a:	4878      	ldr	r0, [pc, #480]	; (800111c <main+0x2fc>)
 8000f3c:	f002 fd2a 	bl	8003994 <HAL_GPIO_WritePin>
		  AD9833_Set_Output();
 8000f40:	f000 ff08 	bl	8001d54 <AD9833_Set_Output>
		  updateSignalFreqFlag = false;
 8000f44:	4b7e      	ldr	r3, [pc, #504]	; (8001140 <main+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
	  }
	  // Update PGA Gain
	  if(updatePGAGainFlag == true){
 8000f4a:	4b7e      	ldr	r3, [pc, #504]	; (8001144 <main+0x324>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00a      	beq.n	8000f68 <main+0x148>
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f58:	4870      	ldr	r0, [pc, #448]	; (800111c <main+0x2fc>)
 8000f5a:	f002 fd1b 	bl	8003994 <HAL_GPIO_WritePin>
		  PGA_Set_Gain();
 8000f5e:	f000 ff27 	bl	8001db0 <PGA_Set_Gain>
		  updatePGAGainFlag = false;
 8000f62:	4b78      	ldr	r3, [pc, #480]	; (8001144 <main+0x324>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
	  }

	  if(measureFlag == true){
 8000f68:	4b77      	ldr	r3, [pc, #476]	; (8001148 <main+0x328>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d11a      	bne.n	8000fa6 <main+0x186>
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f76:	4869      	ldr	r0, [pc, #420]	; (800111c <main+0x2fc>)
 8000f78:	f002 fd0c 	bl	8003994 <HAL_GPIO_WritePin>
		  impedanceMag = measureImpedanceMagnitude();
 8000f7c:	f000 fbd8 	bl	8001730 <measureImpedanceMagnitude>
 8000f80:	4602      	mov	r2, r0
 8000f82:	4b72      	ldr	r3, [pc, #456]	; (800114c <main+0x32c>)
 8000f84:	601a      	str	r2, [r3, #0]
		  impedancePhase = measureImpedancePhase();
 8000f86:	f000 fc0b 	bl	80017a0 <measureImpedancePhase>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	4b70      	ldr	r3, [pc, #448]	; (8001150 <main+0x330>)
 8000f8e:	601a      	str	r2, [r3, #0]
		  sendImpedanceMessage(impedanceMag, impedancePhase);
 8000f90:	4b6e      	ldr	r3, [pc, #440]	; (800114c <main+0x32c>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b6e      	ldr	r3, [pc, #440]	; (8001150 <main+0x330>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	f000 fc54 	bl	8001848 <sendImpedanceMessage>
		  measureFlag = false;
 8000fa0:	4b69      	ldr	r3, [pc, #420]	; (8001148 <main+0x328>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
	  }

	  // Toggle LED pin to show we're alive
	  if (loopCounter % 1000 == 0) {
 8000fa6:	4b6b      	ldr	r3, [pc, #428]	; (8001154 <main+0x334>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b6b      	ldr	r3, [pc, #428]	; (8001158 <main+0x338>)
 8000fac:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb0:	099b      	lsrs	r3, r3, #6
 8000fb2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fb6:	fb01 f303 	mul.w	r3, r1, r3
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10a      	bne.n	8000fd6 <main+0x1b6>
		  HAL_GPIO_TogglePin(GRN_LED_GPIO_Port, GRN_LED_Pin);
 8000fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc4:	4855      	ldr	r0, [pc, #340]	; (800111c <main+0x2fc>)
 8000fc6:	f002 fcfe 	bl	80039c6 <HAL_GPIO_TogglePin>
		  sysCount++;
 8000fca:	4b64      	ldr	r3, [pc, #400]	; (800115c <main+0x33c>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b62      	ldr	r3, [pc, #392]	; (800115c <main+0x33c>)
 8000fd4:	701a      	strb	r2, [r3, #0]
	  }

	  if (loopCounter % 2000 == 0) {
 8000fd6:	4b5f      	ldr	r3, [pc, #380]	; (8001154 <main+0x334>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b5f      	ldr	r3, [pc, #380]	; (8001158 <main+0x338>)
 8000fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8000fe0:	09db      	lsrs	r3, r3, #7
 8000fe2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000fe6:	fb01 f303 	mul.w	r3, r1, r3
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d175      	bne.n	80010dc <main+0x2bc>
		  // Send message
		  float avgADCtemp = 0;
 8000ff0:	f04f 0300 	mov.w	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
		  for (int i = 0; i < ADC_BUF_LEN; i++) {
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	e015      	b.n	8001028 <main+0x208>
			  avgADCtemp += adc_buf[i][2];
 8000ffc:	494b      	ldr	r1, [pc, #300]	; (800112c <main+0x30c>)
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	440b      	add	r3, r1
 800100a:	3304      	adds	r3, #4
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001016:	ed97 7a05 	vldr	s14, [r7, #20]
 800101a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101e:	edc7 7a05 	vstr	s15, [r7, #20]
		  for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	3301      	adds	r3, #1
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	2b09      	cmp	r3, #9
 800102c:	dde6      	ble.n	8000ffc <main+0x1dc>
		  }
		  float vTemp = ((3.3*(avgADCtemp / ADC_BUF_LEN)/4096 - 0.76) / 25 + 25);
 800102e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001032:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001036:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800103a:	ee16 0a90 	vmov	r0, s13
 800103e:	f7ff fa47 	bl	80004d0 <__aeabi_f2d>
 8001042:	a32f      	add	r3, pc, #188	; (adr r3, 8001100 <main+0x2e0>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff fa9a 	bl	8000580 <__aeabi_dmul>
 800104c:	4603      	mov	r3, r0
 800104e:	460c      	mov	r4, r1
 8001050:	4618      	mov	r0, r3
 8001052:	4621      	mov	r1, r4
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	4b41      	ldr	r3, [pc, #260]	; (8001160 <main+0x340>)
 800105a:	f7ff fbbb 	bl	80007d4 <__aeabi_ddiv>
 800105e:	4603      	mov	r3, r0
 8001060:	460c      	mov	r4, r1
 8001062:	4618      	mov	r0, r3
 8001064:	4621      	mov	r1, r4
 8001066:	a328      	add	r3, pc, #160	; (adr r3, 8001108 <main+0x2e8>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff f8d0 	bl	8000210 <__aeabi_dsub>
 8001070:	4603      	mov	r3, r0
 8001072:	460c      	mov	r4, r1
 8001074:	4618      	mov	r0, r3
 8001076:	4621      	mov	r1, r4
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	4b39      	ldr	r3, [pc, #228]	; (8001164 <main+0x344>)
 800107e:	f7ff fba9 	bl	80007d4 <__aeabi_ddiv>
 8001082:	4603      	mov	r3, r0
 8001084:	460c      	mov	r4, r1
 8001086:	4618      	mov	r0, r3
 8001088:	4621      	mov	r1, r4
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	4b35      	ldr	r3, [pc, #212]	; (8001164 <main+0x344>)
 8001090:	f7ff f8c0 	bl	8000214 <__adddf3>
 8001094:	4603      	mov	r3, r0
 8001096:	460c      	mov	r4, r1
 8001098:	4618      	mov	r0, r3
 800109a:	4621      	mov	r1, r4
 800109c:	f7ff fca2 	bl	80009e4 <__aeabi_d2f>
 80010a0:	4603      	mov	r3, r0
 80010a2:	60bb      	str	r3, [r7, #8]
		  asm("NOP");
 80010a4:	bf00      	nop
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ac:	481b      	ldr	r0, [pc, #108]	; (800111c <main+0x2fc>)
 80010ae:	f002 fc71 	bl	8003994 <HAL_GPIO_WritePin>
		  uartTxBytes[1] = 0x01;
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <main+0x348>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	705a      	strb	r2, [r3, #1]
		  uartTxBytes[3] = sysCount;
 80010b8:	4b28      	ldr	r3, [pc, #160]	; (800115c <main+0x33c>)
 80010ba:	781a      	ldrb	r2, [r3, #0]
 80010bc:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <main+0x348>)
 80010be:	70da      	strb	r2, [r3, #3]
		  uint8_t checksum = makeCheckSum();
 80010c0:	f000 fe02 	bl	8001cc8 <makeCheckSum>
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
		  uartTxBytes[11] = checksum;
 80010c8:	4a27      	ldr	r2, [pc, #156]	; (8001168 <main+0x348>)
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	72d3      	strb	r3, [r2, #11]
		  HAL_UART_Transmit_IT(&huart2, (uint8_t *)uartTxBytes, 12);
 80010ce:	220c      	movs	r2, #12
 80010d0:	4925      	ldr	r1, [pc, #148]	; (8001168 <main+0x348>)
 80010d2:	4814      	ldr	r0, [pc, #80]	; (8001124 <main+0x304>)
 80010d4:	f004 fb07 	bl	80056e6 <HAL_UART_Transmit_IT>


	  // Arbitrary Loop Delay To stop spamming everything
	  //HAL_Delay(10);

	  while (TIM3->CNT < 1000) {
 80010d8:	e000      	b.n	80010dc <main+0x2bc>
		  // Do nothing
		  asm("NOP");
 80010da:	bf00      	nop
	  while (TIM3->CNT < 1000) {
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <main+0x318>)
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010e4:	d3f9      	bcc.n	80010da <main+0x2ba>
	  }
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ec:	480b      	ldr	r0, [pc, #44]	; (800111c <main+0x2fc>)
 80010ee:	f002 fc51 	bl	8003994 <HAL_GPIO_WritePin>
	  loopCounter++;
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <main+0x334>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	4a16      	ldr	r2, [pc, #88]	; (8001154 <main+0x334>)
 80010fa:	6013      	str	r3, [r2, #0]
	  TIM3->CNT = 0;
 80010fc:	e70c      	b.n	8000f18 <main+0xf8>
 80010fe:	bf00      	nop
 8001100:	66666666 	.word	0x66666666
 8001104:	400a6666 	.word	0x400a6666
 8001108:	851eb852 	.word	0x851eb852
 800110c:	3fe851eb 	.word	0x3fe851eb
 8001110:	40020800 	.word	0x40020800
 8001114:	40020400 	.word	0x40020400
 8001118:	200001c4 	.word	0x200001c4
 800111c:	40020000 	.word	0x40020000
 8001120:	20000150 	.word	0x20000150
 8001124:	20000298 	.word	0x20000298
 8001128:	20000258 	.word	0x20000258
 800112c:	2000021c 	.word	0x2000021c
 8001130:	20000108 	.word	0x20000108
 8001134:	200000c4 	.word	0x200000c4
 8001138:	40000400 	.word	0x40000400
 800113c:	20000046 	.word	0x20000046
 8001140:	20000034 	.word	0x20000034
 8001144:	20000035 	.word	0x20000035
 8001148:	20000048 	.word	0x20000048
 800114c:	20000050 	.word	0x20000050
 8001150:	20000054 	.word	0x20000054
 8001154:	20000058 	.word	0x20000058
 8001158:	10624dd3 	.word	0x10624dd3
 800115c:	2000005c 	.word	0x2000005c
 8001160:	40b00000 	.word	0x40b00000
 8001164:	40390000 	.word	0x40390000
 8001168:	20000000 	.word	0x20000000

0800116c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b094      	sub	sp, #80	; 0x50
 8001170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	2234      	movs	r2, #52	; 0x34
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f005 f924 	bl	80063c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <SystemClock_Config+0xdc>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	4a2b      	ldr	r2, [pc, #172]	; (8001248 <SystemClock_Config+0xdc>)
 800119a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119e:	6413      	str	r3, [r2, #64]	; 0x40
 80011a0:	4b29      	ldr	r3, [pc, #164]	; (8001248 <SystemClock_Config+0xdc>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ac:	2300      	movs	r3, #0
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	4b26      	ldr	r3, [pc, #152]	; (800124c <SystemClock_Config+0xe0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a25      	ldr	r2, [pc, #148]	; (800124c <SystemClock_Config+0xe0>)
 80011b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	4b23      	ldr	r3, [pc, #140]	; (800124c <SystemClock_Config+0xe0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c8:	2302      	movs	r3, #2
 80011ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011cc:	2301      	movs	r3, #1
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d0:	2310      	movs	r3, #16
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d4:	2302      	movs	r3, #2
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d8:	2300      	movs	r3, #0
 80011da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011dc:	2308      	movs	r3, #8
 80011de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80011e0:	23b4      	movs	r3, #180	; 0xb4
 80011e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4618      	mov	r0, r3
 80011f6:	f002 febd 	bl	8003f74 <HAL_RCC_OscConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001200:	f000 fe64 	bl	8001ecc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001204:	f002 fbfa 	bl	80039fc <HAL_PWREx_EnableOverDrive>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800120e:	f000 fe5d 	bl	8001ecc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001212:	230f      	movs	r3, #15
 8001214:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001216:	2302      	movs	r3, #2
 8001218:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800121e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001222:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001228:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	2105      	movs	r1, #5
 8001230:	4618      	mov	r0, r3
 8001232:	f002 fc33 	bl	8003a9c <HAL_RCC_ClockConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800123c:	f000 fe46 	bl	8001ecc <Error_Handler>
  }
}
 8001240:	bf00      	nop
 8001242:	3750      	adds	r7, #80	; 0x50
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	40007000 	.word	0x40007000

08001250 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001256:	463b      	mov	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001262:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <MX_ADC1_Init+0xd0>)
 8001264:	4a2f      	ldr	r2, [pc, #188]	; (8001324 <MX_ADC1_Init+0xd4>)
 8001266:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001268:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <MX_ADC1_Init+0xd0>)
 800126a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800126e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001270:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <MX_ADC1_Init+0xd0>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <MX_ADC1_Init+0xd0>)
 8001278:	2201      	movs	r2, #1
 800127a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800127c:	4b28      	ldr	r3, [pc, #160]	; (8001320 <MX_ADC1_Init+0xd0>)
 800127e:	2201      	movs	r2, #1
 8001280:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001282:	4b27      	ldr	r3, [pc, #156]	; (8001320 <MX_ADC1_Init+0xd0>)
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800128a:	4b25      	ldr	r3, [pc, #148]	; (8001320 <MX_ADC1_Init+0xd0>)
 800128c:	2200      	movs	r2, #0
 800128e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001290:	4b23      	ldr	r3, [pc, #140]	; (8001320 <MX_ADC1_Init+0xd0>)
 8001292:	4a25      	ldr	r2, [pc, #148]	; (8001328 <MX_ADC1_Init+0xd8>)
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001296:	4b22      	ldr	r3, [pc, #136]	; (8001320 <MX_ADC1_Init+0xd0>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800129c:	4b20      	ldr	r3, [pc, #128]	; (8001320 <MX_ADC1_Init+0xd0>)
 800129e:	2203      	movs	r2, #3
 80012a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <MX_ADC1_Init+0xd0>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <MX_ADC1_Init+0xd0>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012b0:	481b      	ldr	r0, [pc, #108]	; (8001320 <MX_ADC1_Init+0xd0>)
 80012b2:	f001 f937 	bl	8002524 <HAL_ADC_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012bc:	f000 fe06 	bl	8001ecc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012c0:	2304      	movs	r3, #4
 80012c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	4813      	ldr	r0, [pc, #76]	; (8001320 <MX_ADC1_Init+0xd0>)
 80012d2:	f001 fa7b 	bl	80027cc <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012dc:	f000 fdf6 	bl	8001ecc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012e0:	2306      	movs	r3, #6
 80012e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80012e4:	2302      	movs	r3, #2
 80012e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <MX_ADC1_Init+0xd0>)
 80012ee:	f001 fa6d 	bl	80027cc <HAL_ADC_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012f8:	f000 fde8 	bl	8001ecc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <MX_ADC1_Init+0xdc>)
 80012fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001300:	2303      	movs	r3, #3
 8001302:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_ADC1_Init+0xd0>)
 800130a:	f001 fa5f 	bl	80027cc <HAL_ADC_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001314:	f000 fdda 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000108 	.word	0x20000108
 8001324:	40012000 	.word	0x40012000
 8001328:	0f000001 	.word	0x0f000001
 800132c:	10000012 	.word	0x10000012

08001330 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_SPI1_Init+0x68>)
 8001336:	4a19      	ldr	r2, [pc, #100]	; (800139c <MX_SPI1_Init+0x6c>)
 8001338:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_SPI1_Init+0x68>)
 800133c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001340:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_SPI1_Init+0x68>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <MX_SPI1_Init+0x68>)
 800134a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800134e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_SPI1_Init+0x68>)
 8001352:	2202      	movs	r2, #2
 8001354:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_SPI1_Init+0x68>)
 8001358:	2200      	movs	r2, #0
 800135a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_SPI1_Init+0x68>)
 800135e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001362:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_SPI1_Init+0x68>)
 8001366:	2238      	movs	r2, #56	; 0x38
 8001368:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MX_SPI1_Init+0x68>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_SPI1_Init+0x68>)
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <MX_SPI1_Init+0x68>)
 8001378:	2200      	movs	r2, #0
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_SPI1_Init+0x68>)
 800137e:	220a      	movs	r2, #10
 8001380:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_SPI1_Init+0x68>)
 8001384:	f003 f850 	bl	8004428 <HAL_SPI_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800138e:	f000 fd9d 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200001c4 	.word	0x200001c4
 800139c:	40013000 	.word	0x40013000

080013a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_SPI2_Init+0x68>)
 80013a6:	4a19      	ldr	r2, [pc, #100]	; (800140c <MX_SPI2_Init+0x6c>)
 80013a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <MX_SPI2_Init+0x68>)
 80013ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <MX_SPI2_Init+0x68>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <MX_SPI2_Init+0x68>)
 80013ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_SPI2_Init+0x68>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MX_SPI2_Init+0x68>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_SPI2_Init+0x68>)
 80013ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_SPI2_Init+0x68>)
 80013d6:	2238      	movs	r2, #56	; 0x38
 80013d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <MX_SPI2_Init+0x68>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_SPI2_Init+0x68>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <MX_SPI2_Init+0x68>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_SPI2_Init+0x68>)
 80013ee:	220a      	movs	r2, #10
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_SPI2_Init+0x68>)
 80013f4:	f003 f818 	bl	8004428 <HAL_SPI_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80013fe:	f000 fd65 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000060 	.word	0x20000060
 800140c:	40003800 	.word	0x40003800

08001410 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0318 	add.w	r3, r7, #24
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800142e:	463b      	mov	r3, r7
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800143a:	4b31      	ldr	r3, [pc, #196]	; (8001500 <MX_TIM2_Init+0xf0>)
 800143c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001440:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001442:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <MX_TIM2_Init+0xf0>)
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001448:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <MX_TIM2_Init+0xf0>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800144e:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <MX_TIM2_Init+0xf0>)
 8001450:	f04f 32ff 	mov.w	r2, #4294967295
 8001454:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001456:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <MX_TIM2_Init+0xf0>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145c:	4b28      	ldr	r3, [pc, #160]	; (8001500 <MX_TIM2_Init+0xf0>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001462:	4827      	ldr	r0, [pc, #156]	; (8001500 <MX_TIM2_Init+0xf0>)
 8001464:	f003 fa24 	bl	80048b0 <HAL_TIM_Base_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800146e:	f000 fd2d 	bl	8001ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001476:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001478:	f107 0318 	add.w	r3, r7, #24
 800147c:	4619      	mov	r1, r3
 800147e:	4820      	ldr	r0, [pc, #128]	; (8001500 <MX_TIM2_Init+0xf0>)
 8001480:	f003 fca6 	bl	8004dd0 <HAL_TIM_ConfigClockSource>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800148a:	f000 fd1f 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800148e:	481c      	ldr	r0, [pc, #112]	; (8001500 <MX_TIM2_Init+0xf0>)
 8001490:	f003 fa5d 	bl	800494e <HAL_TIM_IC_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800149a:	f000 fd17 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	4619      	mov	r1, r3
 80014ac:	4814      	ldr	r0, [pc, #80]	; (8001500 <MX_TIM2_Init+0xf0>)
 80014ae:	f004 f83d 	bl	800552c <HAL_TIMEx_MasterConfigSynchronization>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80014b8:	f000 fd08 	bl	8001ecc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014bc:	2300      	movs	r3, #0
 80014be:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014c0:	2301      	movs	r3, #1
 80014c2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80014c8:	230f      	movs	r3, #15
 80014ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014cc:	463b      	mov	r3, r7
 80014ce:	2200      	movs	r2, #0
 80014d0:	4619      	mov	r1, r3
 80014d2:	480b      	ldr	r0, [pc, #44]	; (8001500 <MX_TIM2_Init+0xf0>)
 80014d4:	f003 fbe0 	bl	8004c98 <HAL_TIM_IC_ConfigChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80014de:	f000 fcf5 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014e2:	463b      	mov	r3, r7
 80014e4:	2204      	movs	r2, #4
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_TIM2_Init+0xf0>)
 80014ea:	f003 fbd5 	bl	8004c98 <HAL_TIM_IC_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80014f4:	f000 fcea 	bl	8001ecc <Error_Handler>
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000258 	.word	0x20000258

08001504 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001518:	463b      	mov	r3, r7
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <MX_TIM3_Init+0x94>)
 8001522:	4a1e      	ldr	r2, [pc, #120]	; (800159c <MX_TIM3_Init+0x98>)
 8001524:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 89;
 8001526:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <MX_TIM3_Init+0x94>)
 8001528:	2259      	movs	r2, #89	; 0x59
 800152a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <MX_TIM3_Init+0x94>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65335;
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <MX_TIM3_Init+0x94>)
 8001534:	f64f 7237 	movw	r2, #65335	; 0xff37
 8001538:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <MX_TIM3_Init+0x94>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <MX_TIM3_Init+0x94>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001546:	4814      	ldr	r0, [pc, #80]	; (8001598 <MX_TIM3_Init+0x94>)
 8001548:	f003 f9b2 	bl	80048b0 <HAL_TIM_Base_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001552:	f000 fcbb 	bl	8001ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800155c:	f107 0308 	add.w	r3, r7, #8
 8001560:	4619      	mov	r1, r3
 8001562:	480d      	ldr	r0, [pc, #52]	; (8001598 <MX_TIM3_Init+0x94>)
 8001564:	f003 fc34 	bl	8004dd0 <HAL_TIM_ConfigClockSource>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800156e:	f000 fcad 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800157a:	463b      	mov	r3, r7
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <MX_TIM3_Init+0x94>)
 8001580:	f003 ffd4 	bl	800552c <HAL_TIMEx_MasterConfigSynchronization>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800158a:	f000 fc9f 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200000c4 	.word	0x200000c4
 800159c:	40000400 	.word	0x40000400

080015a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_USART2_UART_Init+0x4c>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <MX_USART2_UART_Init+0x50>)
 80015a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <MX_USART2_UART_Init+0x4c>)
 80015ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_USART2_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_USART2_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <MX_USART2_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_USART2_UART_Init+0x4c>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <MX_USART2_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_USART2_UART_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_USART2_UART_Init+0x4c>)
 80015d8:	f004 f838 	bl	800564c <HAL_UART_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015e2:	f000 fc73 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000298 	.word	0x20000298
 80015f0:	40004400 	.word	0x40004400

080015f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_DMA_Init+0x3c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <MX_DMA_Init+0x3c>)
 8001604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_DMA_Init+0x3c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2038      	movs	r0, #56	; 0x38
 800161c:	f001 fc61 	bl	8002ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001620:	2038      	movs	r0, #56	; 0x38
 8001622:	f001 fc7a 	bl	8002f1a <HAL_NVIC_EnableIRQ>

}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800

08001634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	4b34      	ldr	r3, [pc, #208]	; (8001720 <MX_GPIO_Init+0xec>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a33      	ldr	r2, [pc, #204]	; (8001720 <MX_GPIO_Init+0xec>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b31      	ldr	r3, [pc, #196]	; (8001720 <MX_GPIO_Init+0xec>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <MX_GPIO_Init+0xec>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a2c      	ldr	r2, [pc, #176]	; (8001720 <MX_GPIO_Init+0xec>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <MX_GPIO_Init+0xec>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <MX_GPIO_Init+0xec>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a25      	ldr	r2, [pc, #148]	; (8001720 <MX_GPIO_Init+0xec>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b23      	ldr	r3, [pc, #140]	; (8001720 <MX_GPIO_Init+0xec>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FB_SW3_Pin|FB_SW2_Pin|FB_SW1_Pin|PGA_CS_Pin 
 800169e:	2200      	movs	r2, #0
 80016a0:	f243 418c 	movw	r1, #13452	; 0x348c
 80016a4:	481f      	ldr	r0, [pc, #124]	; (8001724 <MX_GPIO_Init+0xf0>)
 80016a6:	f002 f975 	bl	8003994 <HAL_GPIO_WritePin>
                          |FB_SW6_Pin|FB_SW5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LED_Pin|GRN_LED_Pin|FB_SW4_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 80016b0:	481d      	ldr	r0, [pc, #116]	; (8001728 <MX_GPIO_Init+0xf4>)
 80016b2:	f002 f96f 	bl	8003994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2140      	movs	r1, #64	; 0x40
 80016ba:	481c      	ldr	r0, [pc, #112]	; (800172c <MX_GPIO_Init+0xf8>)
 80016bc:	f002 f96a 	bl	8003994 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FB_SW3_Pin FB_SW2_Pin FB_SW1_Pin PGA_CS_Pin 
                           FB_SW6_Pin FB_SW5_Pin */
  GPIO_InitStruct.Pin = FB_SW3_Pin|FB_SW2_Pin|FB_SW1_Pin|PGA_CS_Pin 
 80016c0:	f243 438c 	movw	r3, #13452	; 0x348c
 80016c4:	60fb      	str	r3, [r7, #12]
                          |FB_SW6_Pin|FB_SW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	4619      	mov	r1, r3
 80016d8:	4812      	ldr	r0, [pc, #72]	; (8001724 <MX_GPIO_Init+0xf0>)
 80016da:	f001 ffc9 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GRN_LED_Pin FB_SW4_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GRN_LED_Pin|FB_SW4_Pin;
 80016de:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 80016e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	4619      	mov	r1, r3
 80016f6:	480c      	ldr	r0, [pc, #48]	; (8001728 <MX_GPIO_Init+0xf4>)
 80016f8:	f001 ffba 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pin : AD9833_CS_Pin */
  GPIO_InitStruct.Pin = AD9833_CS_Pin;
 80016fc:	2340      	movs	r3, #64	; 0x40
 80016fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	2301      	movs	r3, #1
 8001702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AD9833_CS_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	4619      	mov	r1, r3
 8001712:	4806      	ldr	r0, [pc, #24]	; (800172c <MX_GPIO_Init+0xf8>)
 8001714:	f001 ffac 	bl	8003670 <HAL_GPIO_Init>

}
 8001718:	bf00      	nop
 800171a:	3720      	adds	r7, #32
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40023800 	.word	0x40023800
 8001724:	40020800 	.word	0x40020800
 8001728:	40020000 	.word	0x40020000
 800172c:	40020400 	.word	0x40020400

08001730 <measureImpedanceMagnitude>:

/* USER CODE BEGIN 4 */

uint32_t measureImpedanceMagnitude(void) {
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
	float adcMean = 0;
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < ADC_BUF_LEN; i++) {
 800173c:	2300      	movs	r3, #0
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	e014      	b.n	800176c <measureImpedanceMagnitude+0x3c>
	  adcMean += adc_buf[i][0];
 8001742:	4916      	ldr	r1, [pc, #88]	; (800179c <measureImpedanceMagnitude+0x6c>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	440b      	add	r3, r1
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	ee07 3a90 	vmov	s15, r3
 8001756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800175a:	ed97 7a01 	vldr	s14, [r7, #4]
 800175e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001762:	edc7 7a01 	vstr	s15, [r7, #4]
	for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2b09      	cmp	r3, #9
 8001770:	dde7      	ble.n	8001742 <measureImpedanceMagnitude+0x12>
	}
	adcMean /= (float)ADC_BUF_LEN;
 8001772:	ed97 7a01 	vldr	s14, [r7, #4]
 8001776:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800177a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177e:	edc7 7a01 	vstr	s15, [r7, #4]

	return (uint32_t)adcMean;
 8001782:	edd7 7a01 	vldr	s15, [r7, #4]
 8001786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800178a:	ee17 3a90 	vmov	r3, s15
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2000021c 	.word	0x2000021c

080017a0 <measureImpedancePhase>:

uint32_t measureImpedancePhase(void) {
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b08b      	sub	sp, #44	; 0x2c
 80017a4:	af00      	add	r7, sp, #0
	int freq = refSignalFrequency;
 80017a6:	4b24      	ldr	r3, [pc, #144]	; (8001838 <measureImpedancePhase+0x98>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
	double period = 1.0 / (double)freq;
 80017ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017ae:	f7fe fe7d 	bl	80004ac <__aeabi_i2d>
 80017b2:	4603      	mov	r3, r0
 80017b4:	460c      	mov	r4, r1
 80017b6:	461a      	mov	r2, r3
 80017b8:	4623      	mov	r3, r4
 80017ba:	f04f 0000 	mov.w	r0, #0
 80017be:	491f      	ldr	r1, [pc, #124]	; (800183c <measureImpedancePhase+0x9c>)
 80017c0:	f7ff f808 	bl	80007d4 <__aeabi_ddiv>
 80017c4:	4603      	mov	r3, r0
 80017c6:	460c      	mov	r4, r1
 80017c8:	e9c7 3406 	strd	r3, r4, [r7, #24]

	double periodTicks = (period * 180000000);
 80017cc:	a318      	add	r3, pc, #96	; (adr r3, 8001830 <measureImpedancePhase+0x90>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017d6:	f7fe fed3 	bl	8000580 <__aeabi_dmul>
 80017da:	4603      	mov	r3, r0
 80017dc:	460c      	mov	r4, r1
 80017de:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double count = counterDifference;
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <measureImpedancePhase+0xa0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fe50 	bl	800048c <__aeabi_ui2d>
 80017ec:	4603      	mov	r3, r0
 80017ee:	460c      	mov	r4, r1
 80017f0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	uint32_t phase = (uint32_t)(360.0 * count / periodTicks);
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <measureImpedancePhase+0xa4>)
 80017fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017fe:	f7fe febf 	bl	8000580 <__aeabi_dmul>
 8001802:	4603      	mov	r3, r0
 8001804:	460c      	mov	r4, r1
 8001806:	4618      	mov	r0, r3
 8001808:	4621      	mov	r1, r4
 800180a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800180e:	f7fe ffe1 	bl	80007d4 <__aeabi_ddiv>
 8001812:	4603      	mov	r3, r0
 8001814:	460c      	mov	r4, r1
 8001816:	4618      	mov	r0, r3
 8001818:	4621      	mov	r1, r4
 800181a:	f7ff f8c3 	bl	80009a4 <__aeabi_d2uiz>
 800181e:	4603      	mov	r3, r0
 8001820:	607b      	str	r3, [r7, #4]

	return phase;
 8001822:	687b      	ldr	r3, [r7, #4]
}
 8001824:	4618      	mov	r0, r3
 8001826:	372c      	adds	r7, #44	; 0x2c
 8001828:	46bd      	mov	sp, r7
 800182a:	bd90      	pop	{r4, r7, pc}
 800182c:	f3af 8000 	nop.w
 8001830:	00000000 	.word	0x00000000
 8001834:	41a5752a 	.word	0x41a5752a
 8001838:	2000004c 	.word	0x2000004c
 800183c:	3ff00000 	.word	0x3ff00000
 8001840:	20000040 	.word	0x20000040
 8001844:	40768000 	.word	0x40768000

08001848 <sendImpedanceMessage>:

void sendImpedanceMessage(uint32_t mag, uint32_t phase) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
	uartTxBytes[1] = 0x03;
 8001852:	4b31      	ldr	r3, [pc, #196]	; (8001918 <sendImpedanceMessage+0xd0>)
 8001854:	2203      	movs	r2, #3
 8001856:	705a      	strb	r2, [r3, #1]


	uartTxBytes[3] = mag & 0xFF;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <sendImpedanceMessage+0xd0>)
 800185e:	70da      	strb	r2, [r3, #3]
	uartTxBytes[4] = (mag & 0xFF00) / 0xFF;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001866:	4a2d      	ldr	r2, [pc, #180]	; (800191c <sendImpedanceMessage+0xd4>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	09db      	lsrs	r3, r3, #7
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b29      	ldr	r3, [pc, #164]	; (8001918 <sendImpedanceMessage+0xd0>)
 8001872:	711a      	strb	r2, [r3, #4]
	uartTxBytes[5] = (mag & 0xFF0000) / 0xFFFF;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800187a:	4a29      	ldr	r2, [pc, #164]	; (8001920 <sendImpedanceMessage+0xd8>)
 800187c:	fba2 2303 	umull	r2, r3, r2, r3
 8001880:	0bdb      	lsrs	r3, r3, #15
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b24      	ldr	r3, [pc, #144]	; (8001918 <sendImpedanceMessage+0xd0>)
 8001886:	715a      	strb	r2, [r3, #5]
	uartTxBytes[6] = (mag & 0xFF000000) / 0xFFFFFF;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800188e:	f240 1301 	movw	r3, #257	; 0x101
 8001892:	fba3 1302 	umull	r1, r3, r3, r2
 8001896:	1ad2      	subs	r2, r2, r3
 8001898:	0852      	lsrs	r2, r2, #1
 800189a:	4413      	add	r3, r2
 800189c:	0ddb      	lsrs	r3, r3, #23
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <sendImpedanceMessage+0xd0>)
 80018a2:	719a      	strb	r2, [r3, #6]

	uartTxBytes[7] = phase & 0xFF;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <sendImpedanceMessage+0xd0>)
 80018aa:	71da      	strb	r2, [r3, #7]
	uartTxBytes[8] = (phase & 0xFF00) / 0xFF;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80018b2:	4a1a      	ldr	r2, [pc, #104]	; (800191c <sendImpedanceMessage+0xd4>)
 80018b4:	fba2 2303 	umull	r2, r3, r2, r3
 80018b8:	09db      	lsrs	r3, r3, #7
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b16      	ldr	r3, [pc, #88]	; (8001918 <sendImpedanceMessage+0xd0>)
 80018be:	721a      	strb	r2, [r3, #8]
	uartTxBytes[9] = (phase & 0xFF0000) / 0xFFFF;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80018c6:	4a16      	ldr	r2, [pc, #88]	; (8001920 <sendImpedanceMessage+0xd8>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	0bdb      	lsrs	r3, r3, #15
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <sendImpedanceMessage+0xd0>)
 80018d2:	725a      	strb	r2, [r3, #9]
	uartTxBytes[10] = (phase & 0xFF000000) / 0xFFFFFF;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80018da:	f240 1301 	movw	r3, #257	; 0x101
 80018de:	fba3 1302 	umull	r1, r3, r3, r2
 80018e2:	1ad2      	subs	r2, r2, r3
 80018e4:	0852      	lsrs	r2, r2, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	0ddb      	lsrs	r3, r3, #23
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <sendImpedanceMessage+0xd0>)
 80018ee:	729a      	strb	r2, [r3, #10]

	uint8_t checksum = makeCheckSum();
 80018f0:	f000 f9ea 	bl	8001cc8 <makeCheckSum>
 80018f4:	4603      	mov	r3, r0
 80018f6:	73fb      	strb	r3, [r7, #15]
	uartTxBytes[11] = checksum;
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <sendImpedanceMessage+0xd0>)
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	72d3      	strb	r3, [r2, #11]
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)uartTxBytes, 12);
 80018fe:	220c      	movs	r2, #12
 8001900:	4905      	ldr	r1, [pc, #20]	; (8001918 <sendImpedanceMessage+0xd0>)
 8001902:	4808      	ldr	r0, [pc, #32]	; (8001924 <sendImpedanceMessage+0xdc>)
 8001904:	f003 feef 	bl	80056e6 <HAL_UART_Transmit_IT>
	measureFlag = false;
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <sendImpedanceMessage+0xe0>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000000 	.word	0x20000000
 800191c:	80808081 	.word	0x80808081
 8001920:	80008001 	.word	0x80008001
 8001924:	20000298 	.word	0x20000298
 8001928:	20000048 	.word	0x20000048

0800192c <toggleRelay>:

void toggleRelay(uint8_t relay) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
	switch(relay)
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	3b01      	subs	r3, #1
 800193a:	2b05      	cmp	r3, #5
 800193c:	f200 80e2 	bhi.w	8001b04 <toggleRelay+0x1d8>
 8001940:	a201      	add	r2, pc, #4	; (adr r2, 8001948 <toggleRelay+0x1c>)
 8001942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001946:	bf00      	nop
 8001948:	08001961 	.word	0x08001961
 800194c:	080019a7 	.word	0x080019a7
 8001950:	080019ed 	.word	0x080019ed
 8001954:	08001a33 	.word	0x08001a33
 8001958:	08001a79 	.word	0x08001a79
 800195c:	08001abf 	.word	0x08001abf
		{
		case(0x01):
				HAL_GPIO_WritePin(FB_SW1_GPIO_Port, FB_SW1_Pin, GPIO_PIN_SET);
 8001960:	2201      	movs	r2, #1
 8001962:	2108      	movs	r1, #8
 8001964:	486a      	ldr	r0, [pc, #424]	; (8001b10 <toggleRelay+0x1e4>)
 8001966:	f002 f815 	bl	8003994 <HAL_GPIO_WritePin>
				//HAL_Delay(10);
				HAL_GPIO_WritePin(FB_SW6_GPIO_Port, FB_SW6_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001970:	4867      	ldr	r0, [pc, #412]	; (8001b10 <toggleRelay+0x1e4>)
 8001972:	f002 f80f 	bl	8003994 <HAL_GPIO_WritePin>
		  	  	HAL_GPIO_WritePin(FB_SW5_GPIO_Port, FB_SW5_Pin, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800197c:	4864      	ldr	r0, [pc, #400]	; (8001b10 <toggleRelay+0x1e4>)
 800197e:	f002 f809 	bl	8003994 <HAL_GPIO_WritePin>
		  	  	HAL_GPIO_WritePin(FB_SW4_GPIO_Port, FB_SW4_Pin, GPIO_PIN_RESET);
 8001982:	2200      	movs	r2, #0
 8001984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001988:	4862      	ldr	r0, [pc, #392]	; (8001b14 <toggleRelay+0x1e8>)
 800198a:	f002 f803 	bl	8003994 <HAL_GPIO_WritePin>
		  	  	HAL_GPIO_WritePin(FB_SW3_GPIO_Port, FB_SW3_Pin, GPIO_PIN_RESET);
 800198e:	2200      	movs	r2, #0
 8001990:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001994:	485e      	ldr	r0, [pc, #376]	; (8001b10 <toggleRelay+0x1e4>)
 8001996:	f001 fffd 	bl	8003994 <HAL_GPIO_WritePin>
		  	  	HAL_GPIO_WritePin(FB_SW2_GPIO_Port, FB_SW2_Pin, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	2104      	movs	r1, #4
 800199e:	485c      	ldr	r0, [pc, #368]	; (8001b10 <toggleRelay+0x1e4>)
 80019a0:	f001 fff8 	bl	8003994 <HAL_GPIO_WritePin>
				break;
 80019a4:	e0af      	b.n	8001b06 <toggleRelay+0x1da>
		case(0x02):
				HAL_GPIO_WritePin(FB_SW2_GPIO_Port, FB_SW2_Pin, GPIO_PIN_SET);
 80019a6:	2201      	movs	r2, #1
 80019a8:	2104      	movs	r1, #4
 80019aa:	4859      	ldr	r0, [pc, #356]	; (8001b10 <toggleRelay+0x1e4>)
 80019ac:	f001 fff2 	bl	8003994 <HAL_GPIO_WritePin>
				//HAL_Delay(10);
				HAL_GPIO_WritePin(FB_SW6_GPIO_Port, FB_SW6_Pin, GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019b6:	4856      	ldr	r0, [pc, #344]	; (8001b10 <toggleRelay+0x1e4>)
 80019b8:	f001 ffec 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW5_GPIO_Port, FB_SW5_Pin, GPIO_PIN_RESET);
 80019bc:	2200      	movs	r2, #0
 80019be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019c2:	4853      	ldr	r0, [pc, #332]	; (8001b10 <toggleRelay+0x1e4>)
 80019c4:	f001 ffe6 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW4_GPIO_Port, FB_SW4_Pin, GPIO_PIN_RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ce:	4851      	ldr	r0, [pc, #324]	; (8001b14 <toggleRelay+0x1e8>)
 80019d0:	f001 ffe0 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW3_GPIO_Port, FB_SW3_Pin, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019da:	484d      	ldr	r0, [pc, #308]	; (8001b10 <toggleRelay+0x1e4>)
 80019dc:	f001 ffda 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW1_GPIO_Port, FB_SW1_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2108      	movs	r1, #8
 80019e4:	484a      	ldr	r0, [pc, #296]	; (8001b10 <toggleRelay+0x1e4>)
 80019e6:	f001 ffd5 	bl	8003994 <HAL_GPIO_WritePin>
				break;
 80019ea:	e08c      	b.n	8001b06 <toggleRelay+0x1da>
		case(0x03):
				HAL_GPIO_WritePin(FB_SW3_GPIO_Port, FB_SW3_Pin, GPIO_PIN_SET);
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019f2:	4847      	ldr	r0, [pc, #284]	; (8001b10 <toggleRelay+0x1e4>)
 80019f4:	f001 ffce 	bl	8003994 <HAL_GPIO_WritePin>
				//HAL_Delay(10);
				HAL_GPIO_WritePin(FB_SW6_GPIO_Port, FB_SW6_Pin, GPIO_PIN_RESET);
 80019f8:	2200      	movs	r2, #0
 80019fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019fe:	4844      	ldr	r0, [pc, #272]	; (8001b10 <toggleRelay+0x1e4>)
 8001a00:	f001 ffc8 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW5_GPIO_Port, FB_SW5_Pin, GPIO_PIN_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a0a:	4841      	ldr	r0, [pc, #260]	; (8001b10 <toggleRelay+0x1e4>)
 8001a0c:	f001 ffc2 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW4_GPIO_Port, FB_SW4_Pin, GPIO_PIN_RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a16:	483f      	ldr	r0, [pc, #252]	; (8001b14 <toggleRelay+0x1e8>)
 8001a18:	f001 ffbc 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW2_GPIO_Port, FB_SW2_Pin, GPIO_PIN_RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2104      	movs	r1, #4
 8001a20:	483b      	ldr	r0, [pc, #236]	; (8001b10 <toggleRelay+0x1e4>)
 8001a22:	f001 ffb7 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW1_GPIO_Port, FB_SW1_Pin, GPIO_PIN_RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2108      	movs	r1, #8
 8001a2a:	4839      	ldr	r0, [pc, #228]	; (8001b10 <toggleRelay+0x1e4>)
 8001a2c:	f001 ffb2 	bl	8003994 <HAL_GPIO_WritePin>
				break;
 8001a30:	e069      	b.n	8001b06 <toggleRelay+0x1da>
		case(0x04):
				HAL_GPIO_WritePin(FB_SW4_GPIO_Port, FB_SW4_Pin, GPIO_PIN_SET);
 8001a32:	2201      	movs	r2, #1
 8001a34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a38:	4836      	ldr	r0, [pc, #216]	; (8001b14 <toggleRelay+0x1e8>)
 8001a3a:	f001 ffab 	bl	8003994 <HAL_GPIO_WritePin>
				//HAL_Delay(10);
				HAL_GPIO_WritePin(FB_SW6_GPIO_Port, FB_SW6_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a44:	4832      	ldr	r0, [pc, #200]	; (8001b10 <toggleRelay+0x1e4>)
 8001a46:	f001 ffa5 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW5_GPIO_Port, FB_SW5_Pin, GPIO_PIN_RESET);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a50:	482f      	ldr	r0, [pc, #188]	; (8001b10 <toggleRelay+0x1e4>)
 8001a52:	f001 ff9f 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW3_GPIO_Port, FB_SW3_Pin, GPIO_PIN_RESET);
 8001a56:	2200      	movs	r2, #0
 8001a58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a5c:	482c      	ldr	r0, [pc, #176]	; (8001b10 <toggleRelay+0x1e4>)
 8001a5e:	f001 ff99 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW2_GPIO_Port, FB_SW2_Pin, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2104      	movs	r1, #4
 8001a66:	482a      	ldr	r0, [pc, #168]	; (8001b10 <toggleRelay+0x1e4>)
 8001a68:	f001 ff94 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW1_GPIO_Port, FB_SW1_Pin, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2108      	movs	r1, #8
 8001a70:	4827      	ldr	r0, [pc, #156]	; (8001b10 <toggleRelay+0x1e4>)
 8001a72:	f001 ff8f 	bl	8003994 <HAL_GPIO_WritePin>
				break;
 8001a76:	e046      	b.n	8001b06 <toggleRelay+0x1da>
		case(0x05):
				HAL_GPIO_WritePin(FB_SW5_GPIO_Port, FB_SW5_Pin, GPIO_PIN_SET);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a7e:	4824      	ldr	r0, [pc, #144]	; (8001b10 <toggleRelay+0x1e4>)
 8001a80:	f001 ff88 	bl	8003994 <HAL_GPIO_WritePin>
				//HAL_Delay(10);
				HAL_GPIO_WritePin(FB_SW6_GPIO_Port, FB_SW6_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a8a:	4821      	ldr	r0, [pc, #132]	; (8001b10 <toggleRelay+0x1e4>)
 8001a8c:	f001 ff82 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW4_GPIO_Port, FB_SW4_Pin, GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a96:	481f      	ldr	r0, [pc, #124]	; (8001b14 <toggleRelay+0x1e8>)
 8001a98:	f001 ff7c 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW3_GPIO_Port, FB_SW3_Pin, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aa2:	481b      	ldr	r0, [pc, #108]	; (8001b10 <toggleRelay+0x1e4>)
 8001aa4:	f001 ff76 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW2_GPIO_Port, FB_SW2_Pin, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2104      	movs	r1, #4
 8001aac:	4818      	ldr	r0, [pc, #96]	; (8001b10 <toggleRelay+0x1e4>)
 8001aae:	f001 ff71 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW1_GPIO_Port, FB_SW1_Pin, GPIO_PIN_RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2108      	movs	r1, #8
 8001ab6:	4816      	ldr	r0, [pc, #88]	; (8001b10 <toggleRelay+0x1e4>)
 8001ab8:	f001 ff6c 	bl	8003994 <HAL_GPIO_WritePin>
				break;
 8001abc:	e023      	b.n	8001b06 <toggleRelay+0x1da>
		case(0x06):
				HAL_GPIO_WritePin(FB_SW6_GPIO_Port, FB_SW6_Pin, GPIO_PIN_SET);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ac4:	4812      	ldr	r0, [pc, #72]	; (8001b10 <toggleRelay+0x1e4>)
 8001ac6:	f001 ff65 	bl	8003994 <HAL_GPIO_WritePin>
				//HAL_Delay(10);
				HAL_GPIO_WritePin(FB_SW5_GPIO_Port, FB_SW5_Pin, GPIO_PIN_RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad0:	480f      	ldr	r0, [pc, #60]	; (8001b10 <toggleRelay+0x1e4>)
 8001ad2:	f001 ff5f 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW4_GPIO_Port, FB_SW4_Pin, GPIO_PIN_RESET);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001adc:	480d      	ldr	r0, [pc, #52]	; (8001b14 <toggleRelay+0x1e8>)
 8001ade:	f001 ff59 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW3_GPIO_Port, FB_SW3_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae8:	4809      	ldr	r0, [pc, #36]	; (8001b10 <toggleRelay+0x1e4>)
 8001aea:	f001 ff53 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW2_GPIO_Port, FB_SW2_Pin, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2104      	movs	r1, #4
 8001af2:	4807      	ldr	r0, [pc, #28]	; (8001b10 <toggleRelay+0x1e4>)
 8001af4:	f001 ff4e 	bl	8003994 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FB_SW1_GPIO_Port, FB_SW1_Pin, GPIO_PIN_RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2108      	movs	r1, #8
 8001afc:	4804      	ldr	r0, [pc, #16]	; (8001b10 <toggleRelay+0x1e4>)
 8001afe:	f001 ff49 	bl	8003994 <HAL_GPIO_WritePin>
				break;
 8001b02:	e000      	b.n	8001b06 <toggleRelay+0x1da>
		default:
			break;
 8001b04:	bf00      	nop
		}
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40020800 	.word	0x40020800
 8001b14:	40020000 	.word	0x40020000

08001b18 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if (htim->Instance==TIM2) {
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b28:	d131      	bne.n	8001b8e <HAL_TIM_IC_CaptureCallback+0x76>
	/*
		This works if you set channel 1 then channel 2 of the timer.
		You can set channel 1 twice but then the difference will be wrong.
		The reading will be 0xFFFFFFFF - CounterOneValue since CounterTwoValue = 0.
	*/
	if(startedCounting == 0) {
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10a      	bne.n	8001b48 <HAL_TIM_IC_CaptureCallback+0x30>
      // Get the 1st Input Capture value
      CounterOneValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001b32:	2100      	movs	r1, #0
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f003 fa03 	bl	8004f40 <HAL_TIM_ReadCapturedValue>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <HAL_TIM_IC_CaptureCallback+0x84>)
 8001b3e:	601a      	str	r2, [r3, #0]
      startedCounting = 1;
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	801a      	strh	r2, [r3, #0]
	  newCaptureValue = true;

	  //TIM2->CNT = 0;
    }
  }
}
 8001b46:	e022      	b.n	8001b8e <HAL_TIM_IC_CaptureCallback+0x76>
      CounterTwoValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001b48:	2104      	movs	r1, #4
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f003 f9f8 	bl	8004f40 <HAL_TIM_ReadCapturedValue>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001b54:	601a      	str	r2, [r3, #0]
	  if (CounterTwoValue > CounterOneValue) {
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <HAL_TIM_IC_CaptureCallback+0x84>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d907      	bls.n	8001b72 <HAL_TIM_IC_CaptureCallback+0x5a>
		counterDifference = (CounterTwoValue - CounterOneValue);
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_TIM_IC_CaptureCallback+0x84>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ba4 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	e007      	b.n	8001b82 <HAL_TIM_IC_CaptureCallback+0x6a>
		counterDifference = ((0xFFFFFFFF - CounterOneValue) + CounterTwoValue);
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_TIM_IC_CaptureCallback+0x84>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	4a09      	ldr	r2, [pc, #36]	; (8001ba4 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001b80:	6013      	str	r3, [r2, #0]
	  startedCounting = 0;
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	801a      	strh	r2, [r3, #0]
	  newCaptureValue = true;
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000044 	.word	0x20000044
 8001b9c:	20000038 	.word	0x20000038
 8001ba0:	2000003c 	.word	0x2000003c
 8001ba4:	20000040 	.word	0x20000040
 8001ba8:	20000046 	.word	0x20000046

08001bac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	// Handle Recieved Message
	UART_Rx_Handler();
 8001bb4:	f000 f80e 	bl	8001bd4 <UART_Rx_Handler>

	// Stage Rx of Next UART Message
	HAL_UART_Receive_IT(&huart2, (uint8_t*)uartRxBytes, 12);
 8001bb8:	220c      	movs	r2, #12
 8001bba:	4904      	ldr	r1, [pc, #16]	; (8001bcc <HAL_UART_RxCpltCallback+0x20>)
 8001bbc:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <HAL_UART_RxCpltCallback+0x24>)
 8001bbe:	f003 fdd7 	bl	8005770 <HAL_UART_Receive_IT>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000150 	.word	0x20000150
 8001bd0:	20000298 	.word	0x20000298

08001bd4 <UART_Rx_Handler>:

void UART_Rx_Handler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0

	if(uartRxBytes[0] != 0xFF) 	// If header byte is not first byte abandon
 8001bda:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <UART_Rx_Handler+0xdc>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2bff      	cmp	r3, #255	; 0xff
 8001be0:	d15d      	bne.n	8001c9e <UART_Rx_Handler+0xca>
		return;

	//Calculate Checksum to Check Data is Valid
	if(!CalculateRxDataChecksum())
 8001be2:	f000 f88f 	bl	8001d04 <CalculateRxDataChecksum>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f083 0301 	eor.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d157      	bne.n	8001ca2 <UART_Rx_Handler+0xce>
		return;

	// Data is valid so handle it

	int freq = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
	int signal = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	603b      	str	r3, [r7, #0]
	// Switch on Data ID
	switch(uartRxBytes[1])
 8001bfa:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <UART_Rx_Handler+0xdc>)
 8001bfc:	785b      	ldrb	r3, [r3, #1]
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d851      	bhi.n	8001ca6 <UART_Rx_Handler+0xd2>
 8001c02:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <UART_Rx_Handler+0x34>)
 8001c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c08:	08001ca7 	.word	0x08001ca7
 8001c0c:	08001ca7 	.word	0x08001ca7
 8001c10:	08001c25 	.word	0x08001c25
 8001c14:	08001ca7 	.word	0x08001ca7
 8001c18:	08001c2d 	.word	0x08001c2d
 8001c1c:	08001c83 	.word	0x08001c83
 8001c20:	08001c93 	.word	0x08001c93
	case(0x00):
			break;
	case(0x01):
			break;
	case(0x02):
			measureFlag = true;
 8001c24:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <UART_Rx_Handler+0xe0>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
			break;
 8001c2a:	e03d      	b.n	8001ca8 <UART_Rx_Handler+0xd4>
	case(0x04): // frequency change message
			freq = uartRxBytes[6] | ((int)uartRxBytes[5] << 8) | ((int)uartRxBytes[4] << 16) | ((int)uartRxBytes[3] << 24);
 8001c2c:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <UART_Rx_Handler+0xdc>)
 8001c2e:	799b      	ldrb	r3, [r3, #6]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <UART_Rx_Handler+0xdc>)
 8001c34:	795b      	ldrb	r3, [r3, #5]
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <UART_Rx_Handler+0xdc>)
 8001c3c:	791b      	ldrb	r3, [r3, #4]
 8001c3e:	041b      	lsls	r3, r3, #16
 8001c40:	431a      	orrs	r2, r3
 8001c42:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <UART_Rx_Handler+0xdc>)
 8001c44:	78db      	ldrb	r3, [r3, #3]
 8001c46:	061b      	lsls	r3, r3, #24
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	607b      	str	r3, [r7, #4]
			signal = uartRxBytes[10] | ((int)uartRxBytes[9] << 8) | ((int)uartRxBytes[8] << 16) | ((int)uartRxBytes[7] << 24);
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <UART_Rx_Handler+0xdc>)
 8001c4e:	7a9b      	ldrb	r3, [r3, #10]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <UART_Rx_Handler+0xdc>)
 8001c54:	7a5b      	ldrb	r3, [r3, #9]
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <UART_Rx_Handler+0xdc>)
 8001c5c:	7a1b      	ldrb	r3, [r3, #8]
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	431a      	orrs	r2, r3
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <UART_Rx_Handler+0xdc>)
 8001c64:	79db      	ldrb	r3, [r3, #7]
 8001c66:	061b      	lsls	r3, r3, #24
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	603b      	str	r3, [r7, #0]
			AD9833CalculateRegister(freq, signal);
 8001c6c:	6839      	ldr	r1, [r7, #0]
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff f888 	bl	8000d84 <AD9833CalculateRegister>
			// Set Update Frequency Flag so AD9833 updates in main task loop
			updateSignalFreqFlag = true;
 8001c74:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <UART_Rx_Handler+0xe4>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]
			refSignalFrequency = freq;
 8001c7a:	4a10      	ldr	r2, [pc, #64]	; (8001cbc <UART_Rx_Handler+0xe8>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6013      	str	r3, [r2, #0]
			break;
 8001c80:	e012      	b.n	8001ca8 <UART_Rx_Handler+0xd4>
	case(0x05): // set PGA gain message
			pgaGainValue = uartRxBytes[3];
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <UART_Rx_Handler+0xdc>)
 8001c84:	78da      	ldrb	r2, [r3, #3]
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <UART_Rx_Handler+0xec>)
 8001c88:	701a      	strb	r2, [r3, #0]
			updatePGAGainFlag = true;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <UART_Rx_Handler+0xf0>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
			break;
 8001c90:	e00a      	b.n	8001ca8 <UART_Rx_Handler+0xd4>
	case(0x06): // toggle relay
			toggleRelay(uartRxBytes[3]);
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <UART_Rx_Handler+0xdc>)
 8001c94:	78db      	ldrb	r3, [r3, #3]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fe48 	bl	800192c <toggleRelay>
			break;
 8001c9c:	e004      	b.n	8001ca8 <UART_Rx_Handler+0xd4>
		return;
 8001c9e:	bf00      	nop
 8001ca0:	e002      	b.n	8001ca8 <UART_Rx_Handler+0xd4>
		return;
 8001ca2:	bf00      	nop
 8001ca4:	e000      	b.n	8001ca8 <UART_Rx_Handler+0xd4>
	default:
		break;
 8001ca6:	bf00      	nop
	}
}
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000150 	.word	0x20000150
 8001cb4:	20000048 	.word	0x20000048
 8001cb8:	20000034 	.word	0x20000034
 8001cbc:	2000004c 	.word	0x2000004c
 8001cc0:	20000104 	.word	0x20000104
 8001cc4:	20000035 	.word	0x20000035

08001cc8 <makeCheckSum>:

uint8_t makeCheckSum(void) {
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	71fb      	strb	r3, [r7, #7]

	int i;
	// Checksum is bitwise xor of all bytes except checksum
	for(i = 0; i < (sizeof(uartTxBytes)/sizeof(uint8_t) - 1); i++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	e009      	b.n	8001cec <makeCheckSum+0x24>
		result = result ^ uartTxBytes[i];
 8001cd8:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <makeCheckSum+0x38>)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	4413      	add	r3, r2
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	4053      	eors	r3, r2
 8001ce4:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < (sizeof(uartTxBytes)/sizeof(uint8_t) - 1); i++)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2b0a      	cmp	r3, #10
 8001cf0:	d9f2      	bls.n	8001cd8 <makeCheckSum+0x10>
	return result;
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	20000000 	.word	0x20000000

08001d04 <CalculateRxDataChecksum>:

bool CalculateRxDataChecksum(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	71fb      	strb	r3, [r7, #7]

	int i;
	// Checksum is bitwise xor of all bytes except checksum
	for(i = 0; i < (sizeof(uartRxBytes)/sizeof(uint8_t) - 1); i++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	e009      	b.n	8001d28 <CalculateRxDataChecksum+0x24>
		result = result ^ uartRxBytes[i];
 8001d14:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <CalculateRxDataChecksum+0x4c>)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	4413      	add	r3, r2
 8001d1a:	781a      	ldrb	r2, [r3, #0]
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	4053      	eors	r3, r2
 8001d20:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < (sizeof(uartRxBytes)/sizeof(uint8_t) - 1); i++)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	3301      	adds	r3, #1
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2b0a      	cmp	r3, #10
 8001d2c:	d9f2      	bls.n	8001d14 <CalculateRxDataChecksum+0x10>

	if(result == uartRxBytes[i])
 8001d2e:	4a08      	ldr	r2, [pc, #32]	; (8001d50 <CalculateRxDataChecksum+0x4c>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	79fa      	ldrb	r2, [r7, #7]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d101      	bne.n	8001d40 <CalculateRxDataChecksum+0x3c>
		return true;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <CalculateRxDataChecksum+0x3e>
	else
		return false;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000150 	.word	0x20000150

08001d54 <AD9833_Set_Output>:

void AD9833_Set_Output(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2140      	movs	r1, #64	; 0x40
 8001d5e:	4811      	ldr	r0, [pc, #68]	; (8001da4 <AD9833_Set_Output+0x50>)
 8001d60:	f001 fe18 	bl	8003994 <HAL_GPIO_WritePin>
	uint16_t size = 1;
 8001d64:	2301      	movs	r3, #1
 8001d66:	817b      	strh	r3, [r7, #10]
	uint8_t * base = (uint8_t*)registerValues;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <AD9833_Set_Output+0x54>)
 8001d6a:	607b      	str	r3, [r7, #4]
	uint8_t * dataPointer = (uint8_t*)registerValues;
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <AD9833_Set_Output+0x54>)
 8001d6e:	60fb      	str	r3, [r7, #12]
	while(dataPointer < base + sizeof(registerValues))
 8001d70:	e009      	b.n	8001d86 <AD9833_Set_Output+0x32>
	{
		//HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_RESET);
		HAL_SPI_Transmit(&hspi1, dataPointer, size, HAL_MAX_DELAY);
 8001d72:	897a      	ldrh	r2, [r7, #10]
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	480c      	ldr	r0, [pc, #48]	; (8001dac <AD9833_Set_Output+0x58>)
 8001d7c:	f002 fbb8 	bl	80044f0 <HAL_SPI_Transmit>
		//HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_SET);
		dataPointer += sizeof(uint16_t);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3302      	adds	r3, #2
 8001d84:	60fb      	str	r3, [r7, #12]
	while(dataPointer < base + sizeof(registerValues))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	330a      	adds	r3, #10
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d3f0      	bcc.n	8001d72 <AD9833_Set_Output+0x1e>
	}
	HAL_GPIO_WritePin(AD9833_CS_GPIO_Port, AD9833_CS_Pin, GPIO_PIN_SET);
 8001d90:	2201      	movs	r2, #1
 8001d92:	2140      	movs	r1, #64	; 0x40
 8001d94:	4803      	ldr	r0, [pc, #12]	; (8001da4 <AD9833_Set_Output+0x50>)
 8001d96:	f001 fdfd 	bl	8003994 <HAL_GPIO_WritePin>
}
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40020400 	.word	0x40020400
 8001da8:	200000b8 	.word	0x200000b8
 8001dac:	200001c4 	.word	0x200001c4

08001db0 <PGA_Set_Gain>:

void PGA_Set_Gain(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
	// 8 bit values for seperate instruction and control registers
	// Channel select register is not needed as single channel device used
	uint8_t instructionReg = 0x40; // write to gain register
 8001db6:	2340      	movs	r3, #64	; 0x40
 8001db8:	73bb      	strb	r3, [r7, #14]
	uint8_t controlReg;

	// Switch on allowable gain values, and set relevant bits in control reg
	switch(pgaGainValue){
 8001dba:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <PGA_Set_Gain+0x110>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	d87a      	bhi.n	8001eb8 <PGA_Set_Gain+0x108>
 8001dc2:	a201      	add	r2, pc, #4	; (adr r2, 8001dc8 <PGA_Set_Gain+0x18>)
 8001dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc8:	08001e7d 	.word	0x08001e7d
 8001dcc:	08001e4d 	.word	0x08001e4d
 8001dd0:	08001e53 	.word	0x08001e53
 8001dd4:	08001eb9 	.word	0x08001eb9
 8001dd8:	08001e59 	.word	0x08001e59
 8001ddc:	08001e5f 	.word	0x08001e5f
 8001de0:	08001eb9 	.word	0x08001eb9
 8001de4:	08001eb9 	.word	0x08001eb9
 8001de8:	08001e65 	.word	0x08001e65
 8001dec:	08001eb9 	.word	0x08001eb9
 8001df0:	08001e6b 	.word	0x08001e6b
 8001df4:	08001eb9 	.word	0x08001eb9
 8001df8:	08001eb9 	.word	0x08001eb9
 8001dfc:	08001eb9 	.word	0x08001eb9
 8001e00:	08001eb9 	.word	0x08001eb9
 8001e04:	08001eb9 	.word	0x08001eb9
 8001e08:	08001e71 	.word	0x08001e71
 8001e0c:	08001eb9 	.word	0x08001eb9
 8001e10:	08001eb9 	.word	0x08001eb9
 8001e14:	08001eb9 	.word	0x08001eb9
 8001e18:	08001eb9 	.word	0x08001eb9
 8001e1c:	08001eb9 	.word	0x08001eb9
 8001e20:	08001eb9 	.word	0x08001eb9
 8001e24:	08001eb9 	.word	0x08001eb9
 8001e28:	08001eb9 	.word	0x08001eb9
 8001e2c:	08001eb9 	.word	0x08001eb9
 8001e30:	08001eb9 	.word	0x08001eb9
 8001e34:	08001eb9 	.word	0x08001eb9
 8001e38:	08001eb9 	.word	0x08001eb9
 8001e3c:	08001eb9 	.word	0x08001eb9
 8001e40:	08001eb9 	.word	0x08001eb9
 8001e44:	08001eb9 	.word	0x08001eb9
 8001e48:	08001e77 	.word	0x08001e77
	case 0x0 : // TODO implement shutdown/sleep whatever its called
		break;
	case 1 :
		controlReg = 0x0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]
		break;
 8001e50:	e015      	b.n	8001e7e <PGA_Set_Gain+0xce>
	case 2 :
		controlReg = 0x1;
 8001e52:	2301      	movs	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
		break;
 8001e56:	e012      	b.n	8001e7e <PGA_Set_Gain+0xce>
	case 4 :
		controlReg = 0x2;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	73fb      	strb	r3, [r7, #15]
		break;
 8001e5c:	e00f      	b.n	8001e7e <PGA_Set_Gain+0xce>
	case 5 :
		controlReg = 0x3;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	73fb      	strb	r3, [r7, #15]
		break;
 8001e62:	e00c      	b.n	8001e7e <PGA_Set_Gain+0xce>
	case 8:
		controlReg = 0x4;
 8001e64:	2304      	movs	r3, #4
 8001e66:	73fb      	strb	r3, [r7, #15]
		break;
 8001e68:	e009      	b.n	8001e7e <PGA_Set_Gain+0xce>
	case 10:
		controlReg = 0x5;
 8001e6a:	2305      	movs	r3, #5
 8001e6c:	73fb      	strb	r3, [r7, #15]
		break;
 8001e6e:	e006      	b.n	8001e7e <PGA_Set_Gain+0xce>
	case 16:
		controlReg = 0x6;
 8001e70:	2306      	movs	r3, #6
 8001e72:	73fb      	strb	r3, [r7, #15]
		break;
 8001e74:	e003      	b.n	8001e7e <PGA_Set_Gain+0xce>
	case 32:
		controlReg = 0x7;
 8001e76:	2307      	movs	r3, #7
 8001e78:	73fb      	strb	r3, [r7, #15]
		break;
 8001e7a:	e000      	b.n	8001e7e <PGA_Set_Gain+0xce>
		break;
 8001e7c:	bf00      	nop
	default:	// gain was not valid so don't send a command
		return;
	}

	// Assemble data to send via SPI
	uint16_t spiWord = ((uint16_t)instructionReg << 8) | controlReg;
 8001e7e:	7bbb      	ldrb	r3, [r7, #14]
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	b21b      	sxth	r3, r3
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	80fb      	strh	r3, [r7, #6]

	// Get Data pointer
	uint8_t * dataAddr = &spiWord;
 8001e90:	1dbb      	adds	r3, r7, #6
 8001e92:	60bb      	str	r3, [r7, #8]


	// Set CS Low
	HAL_GPIO_WritePin(PGA_CS_GPIO_Port, PGA_CS_Pin, GPIO_PIN_RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2180      	movs	r1, #128	; 0x80
 8001e98:	480a      	ldr	r0, [pc, #40]	; (8001ec4 <PGA_Set_Gain+0x114>)
 8001e9a:	f001 fd7b 	bl	8003994 <HAL_GPIO_WritePin>
	// Send SPI data
	HAL_SPI_Transmit(&hspi2, dataAddr, sizeof(spiWord)/sizeof(uint16_t), HAL_MAX_DELAY);
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	4808      	ldr	r0, [pc, #32]	; (8001ec8 <PGA_Set_Gain+0x118>)
 8001ea8:	f002 fb22 	bl	80044f0 <HAL_SPI_Transmit>
	// Set CS High
	HAL_GPIO_WritePin(PGA_CS_GPIO_Port, PGA_CS_Pin, GPIO_PIN_SET);
 8001eac:	2201      	movs	r2, #1
 8001eae:	2180      	movs	r1, #128	; 0x80
 8001eb0:	4804      	ldr	r0, [pc, #16]	; (8001ec4 <PGA_Set_Gain+0x114>)
 8001eb2:	f001 fd6f 	bl	8003994 <HAL_GPIO_WritePin>
 8001eb6:	e000      	b.n	8001eba <PGA_Set_Gain+0x10a>
		return;
 8001eb8:	bf00      	nop


}
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000104 	.word	0x20000104
 8001ec4:	40020800 	.word	0x40020800
 8001ec8:	20000060 	.word	0x20000060

08001ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_MspInit+0x4c>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <HAL_MspInit+0x4c>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_MspInit+0x4c>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_MspInit+0x4c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <HAL_MspInit+0x4c>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_MspInit+0x4c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a2f      	ldr	r2, [pc, #188]	; (8002008 <HAL_ADC_MspInit+0xdc>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d157      	bne.n	8001ffe <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	4b2e      	ldr	r3, [pc, #184]	; (800200c <HAL_ADC_MspInit+0xe0>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a2d      	ldr	r2, [pc, #180]	; (800200c <HAL_ADC_MspInit+0xe0>)
 8001f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_ADC_MspInit+0xe0>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	4b27      	ldr	r3, [pc, #156]	; (800200c <HAL_ADC_MspInit+0xe0>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a26      	ldr	r2, [pc, #152]	; (800200c <HAL_ADC_MspInit+0xe0>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b24      	ldr	r3, [pc, #144]	; (800200c <HAL_ADC_MspInit+0xe0>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001f86:	2350      	movs	r3, #80	; 0x50
 8001f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	4619      	mov	r1, r3
 8001f98:	481d      	ldr	r0, [pc, #116]	; (8002010 <HAL_ADC_MspInit+0xe4>)
 8001f9a:	f001 fb69 	bl	8003670 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <HAL_ADC_MspInit+0xec>)
 8001fa2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb0:	4b18      	ldr	r3, [pc, #96]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fbc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fc4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fcc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fd4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fe2:	480c      	ldr	r0, [pc, #48]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fe4:	f000 ffb4 	bl	8002f50 <HAL_DMA_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001fee:	f7ff ff6d 	bl	8001ecc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a07      	ldr	r2, [pc, #28]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001ff6:	639a      	str	r2, [r3, #56]	; 0x38
 8001ff8:	4a06      	ldr	r2, [pc, #24]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ffe:	bf00      	nop
 8002000:	3728      	adds	r7, #40	; 0x28
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40012000 	.word	0x40012000
 800200c:	40023800 	.word	0x40023800
 8002010:	40020000 	.word	0x40020000
 8002014:	20000164 	.word	0x20000164
 8002018:	40026410 	.word	0x40026410

0800201c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08c      	sub	sp, #48	; 0x30
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 031c 	add.w	r3, r7, #28
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a41      	ldr	r2, [pc, #260]	; (8002140 <HAL_SPI_MspInit+0x124>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d12c      	bne.n	8002098 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	4b40      	ldr	r3, [pc, #256]	; (8002144 <HAL_SPI_MspInit+0x128>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	4a3f      	ldr	r2, [pc, #252]	; (8002144 <HAL_SPI_MspInit+0x128>)
 8002048:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800204c:	6453      	str	r3, [r2, #68]	; 0x44
 800204e:	4b3d      	ldr	r3, [pc, #244]	; (8002144 <HAL_SPI_MspInit+0x128>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002056:	61bb      	str	r3, [r7, #24]
 8002058:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	4b39      	ldr	r3, [pc, #228]	; (8002144 <HAL_SPI_MspInit+0x128>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a38      	ldr	r2, [pc, #224]	; (8002144 <HAL_SPI_MspInit+0x128>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b36      	ldr	r3, [pc, #216]	; (8002144 <HAL_SPI_MspInit+0x128>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002076:	23a0      	movs	r3, #160	; 0xa0
 8002078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002082:	2303      	movs	r3, #3
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002086:	2305      	movs	r3, #5
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	4619      	mov	r1, r3
 8002090:	482d      	ldr	r0, [pc, #180]	; (8002148 <HAL_SPI_MspInit+0x12c>)
 8002092:	f001 faed 	bl	8003670 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002096:	e04f      	b.n	8002138 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a2b      	ldr	r2, [pc, #172]	; (800214c <HAL_SPI_MspInit+0x130>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d14a      	bne.n	8002138 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	4b27      	ldr	r3, [pc, #156]	; (8002144 <HAL_SPI_MspInit+0x128>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	4a26      	ldr	r2, [pc, #152]	; (8002144 <HAL_SPI_MspInit+0x128>)
 80020ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b0:	6413      	str	r3, [r2, #64]	; 0x40
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_SPI_MspInit+0x128>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_SPI_MspInit+0x128>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a1f      	ldr	r2, [pc, #124]	; (8002144 <HAL_SPI_MspInit+0x128>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_SPI_MspInit+0x128>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_SPI_MspInit+0x128>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a18      	ldr	r2, [pc, #96]	; (8002144 <HAL_SPI_MspInit+0x128>)
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_SPI_MspInit+0x128>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020f6:	2302      	movs	r3, #2
 80020f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002106:	2307      	movs	r3, #7
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	4619      	mov	r1, r3
 8002110:	480f      	ldr	r0, [pc, #60]	; (8002150 <HAL_SPI_MspInit+0x134>)
 8002112:	f001 faad 	bl	8003670 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002128:	2305      	movs	r3, #5
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	4619      	mov	r1, r3
 8002132:	4808      	ldr	r0, [pc, #32]	; (8002154 <HAL_SPI_MspInit+0x138>)
 8002134:	f001 fa9c 	bl	8003670 <HAL_GPIO_Init>
}
 8002138:	bf00      	nop
 800213a:	3730      	adds	r7, #48	; 0x30
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40013000 	.word	0x40013000
 8002144:	40023800 	.word	0x40023800
 8002148:	40020000 	.word	0x40020000
 800214c:	40003800 	.word	0x40003800
 8002150:	40020800 	.word	0x40020800
 8002154:	40020400 	.word	0x40020400

08002158 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002178:	d134      	bne.n	80021e4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	4b29      	ldr	r3, [pc, #164]	; (8002224 <HAL_TIM_Base_MspInit+0xcc>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	4a28      	ldr	r2, [pc, #160]	; (8002224 <HAL_TIM_Base_MspInit+0xcc>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6413      	str	r3, [r2, #64]	; 0x40
 800218a:	4b26      	ldr	r3, [pc, #152]	; (8002224 <HAL_TIM_Base_MspInit+0xcc>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	4b22      	ldr	r3, [pc, #136]	; (8002224 <HAL_TIM_Base_MspInit+0xcc>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a21      	ldr	r2, [pc, #132]	; (8002224 <HAL_TIM_Base_MspInit+0xcc>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <HAL_TIM_Base_MspInit+0xcc>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021b2:	2303      	movs	r3, #3
 80021b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021ba:	2302      	movs	r3, #2
 80021bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021c2:	2301      	movs	r3, #1
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	4816      	ldr	r0, [pc, #88]	; (8002228 <HAL_TIM_Base_MspInit+0xd0>)
 80021ce:	f001 fa4f 	bl	8003670 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	201c      	movs	r0, #28
 80021d8:	f000 fe83 	bl	8002ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021dc:	201c      	movs	r0, #28
 80021de:	f000 fe9c 	bl	8002f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021e2:	e01a      	b.n	800221a <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a10      	ldr	r2, [pc, #64]	; (800222c <HAL_TIM_Base_MspInit+0xd4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d115      	bne.n	800221a <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <HAL_TIM_Base_MspInit+0xcc>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a0b      	ldr	r2, [pc, #44]	; (8002224 <HAL_TIM_Base_MspInit+0xcc>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_TIM_Base_MspInit+0xcc>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	201d      	movs	r0, #29
 8002210:	f000 fe67 	bl	8002ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002214:	201d      	movs	r0, #29
 8002216:	f000 fe80 	bl	8002f1a <HAL_NVIC_EnableIRQ>
}
 800221a:	bf00      	nop
 800221c:	3728      	adds	r7, #40	; 0x28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	40020000 	.word	0x40020000
 800222c:	40000400 	.word	0x40000400

08002230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_UART_MspInit+0x94>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d133      	bne.n	80022ba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <HAL_UART_MspInit+0x98>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a1b      	ldr	r2, [pc, #108]	; (80022c8 <HAL_UART_MspInit+0x98>)
 800225c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_UART_MspInit+0x98>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_UART_MspInit+0x98>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <HAL_UART_MspInit+0x98>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_UART_MspInit+0x98>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800228a:	230c      	movs	r3, #12
 800228c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002296:	2303      	movs	r3, #3
 8002298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800229a:	2307      	movs	r3, #7
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	4619      	mov	r1, r3
 80022a4:	4809      	ldr	r0, [pc, #36]	; (80022cc <HAL_UART_MspInit+0x9c>)
 80022a6:	f001 f9e3 	bl	8003670 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	2026      	movs	r0, #38	; 0x26
 80022b0:	f000 fe17 	bl	8002ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022b4:	2026      	movs	r0, #38	; 0x26
 80022b6:	f000 fe30 	bl	8002f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022ba:	bf00      	nop
 80022bc:	3728      	adds	r7, #40	; 0x28
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40004400 	.word	0x40004400
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40020000 	.word	0x40020000

080022d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e2:	e7fe      	b.n	80022e2 <HardFault_Handler+0x4>

080022e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <MemManage_Handler+0x4>

080022ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ee:	e7fe      	b.n	80022ee <BusFault_Handler+0x4>

080022f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <UsageFault_Handler+0x4>

080022f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002324:	f000 f8bc 	bl	80024a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <TIM2_IRQHandler+0x10>)
 8002332:	f002 fba9 	bl	8004a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000258 	.word	0x20000258

08002340 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002344:	4802      	ldr	r0, [pc, #8]	; (8002350 <TIM3_IRQHandler+0x10>)
 8002346:	f002 fb9f 	bl	8004a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200000c4 	.word	0x200000c4

08002354 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002358:	4802      	ldr	r0, [pc, #8]	; (8002364 <USART2_IRQHandler+0x10>)
 800235a:	f003 fa5f 	bl	800581c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000298 	.word	0x20000298

08002368 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <DMA2_Stream0_IRQHandler+0x10>)
 800236e:	f000 ff17 	bl	80031a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000164 	.word	0x20000164

0800237c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <SystemInit+0x28>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	4a07      	ldr	r2, [pc, #28]	; (80023a4 <SystemInit+0x28>)
 8002388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800238c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <SystemInit+0x28>)
 8002392:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002396:	609a      	str	r2, [r3, #8]
#endif
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <Reset_Handler>:
 80023a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023e0 <LoopFillZerobss+0x14>
 80023ac:	2100      	movs	r1, #0
 80023ae:	e003      	b.n	80023b8 <LoopCopyDataInit>

080023b0 <CopyDataInit>:
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <LoopFillZerobss+0x18>)
 80023b2:	585b      	ldr	r3, [r3, r1]
 80023b4:	5043      	str	r3, [r0, r1]
 80023b6:	3104      	adds	r1, #4

080023b8 <LoopCopyDataInit>:
 80023b8:	480b      	ldr	r0, [pc, #44]	; (80023e8 <LoopFillZerobss+0x1c>)
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <LoopFillZerobss+0x20>)
 80023bc:	1842      	adds	r2, r0, r1
 80023be:	429a      	cmp	r2, r3
 80023c0:	d3f6      	bcc.n	80023b0 <CopyDataInit>
 80023c2:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <LoopFillZerobss+0x24>)
 80023c4:	e002      	b.n	80023cc <LoopFillZerobss>

080023c6 <FillZerobss>:
 80023c6:	2300      	movs	r3, #0
 80023c8:	f842 3b04 	str.w	r3, [r2], #4

080023cc <LoopFillZerobss>:
 80023cc:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <LoopFillZerobss+0x28>)
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d3f9      	bcc.n	80023c6 <FillZerobss>
 80023d2:	f7ff ffd3 	bl	800237c <SystemInit>
 80023d6:	f003 ffd3 	bl	8006380 <__libc_init_array>
 80023da:	f7fe fd21 	bl	8000e20 <main>
 80023de:	4770      	bx	lr
 80023e0:	20020000 	.word	0x20020000
 80023e4:	08006420 	.word	0x08006420
 80023e8:	20000000 	.word	0x20000000
 80023ec:	20000018 	.word	0x20000018
 80023f0:	20000018 	.word	0x20000018
 80023f4:	200002dc 	.word	0x200002dc

080023f8 <ADC_IRQHandler>:
 80023f8:	e7fe      	b.n	80023f8 <ADC_IRQHandler>
	...

080023fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <HAL_Init+0x40>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0d      	ldr	r2, [pc, #52]	; (800243c <HAL_Init+0x40>)
 8002406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800240a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_Init+0x40>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0a      	ldr	r2, [pc, #40]	; (800243c <HAL_Init+0x40>)
 8002412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <HAL_Init+0x40>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a07      	ldr	r2, [pc, #28]	; (800243c <HAL_Init+0x40>)
 800241e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002424:	2003      	movs	r0, #3
 8002426:	f000 fd51 	bl	8002ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800242a:	2000      	movs	r0, #0
 800242c:	f000 f808 	bl	8002440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002430:	f7ff fd54 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023c00 	.word	0x40023c00

08002440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_InitTick+0x54>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_InitTick+0x58>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4619      	mov	r1, r3
 8002452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002456:	fbb3 f3f1 	udiv	r3, r3, r1
 800245a:	fbb2 f3f3 	udiv	r3, r2, r3
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fd69 	bl	8002f36 <HAL_SYSTICK_Config>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e00e      	b.n	800248c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b0f      	cmp	r3, #15
 8002472:	d80a      	bhi.n	800248a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002474:	2200      	movs	r2, #0
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f000 fd31 	bl	8002ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002480:	4a06      	ldr	r2, [pc, #24]	; (800249c <HAL_InitTick+0x5c>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e000      	b.n	800248c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	2000000c 	.word	0x2000000c
 8002498:	20000014 	.word	0x20000014
 800249c:	20000010 	.word	0x20000010

080024a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_IncTick+0x20>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_IncTick+0x24>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <HAL_IncTick+0x24>)
 80024b2:	6013      	str	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000014 	.word	0x20000014
 80024c4:	200002d8 	.word	0x200002d8

080024c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return uwTick;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_GetTick+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	200002d8 	.word	0x200002d8

080024e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff ffee 	bl	80024c8 <HAL_GetTick>
 80024ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d005      	beq.n	8002506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_Delay+0x40>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002506:	bf00      	nop
 8002508:	f7ff ffde 	bl	80024c8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d8f7      	bhi.n	8002508 <HAL_Delay+0x28>
  {
  }
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000014 	.word	0x20000014

08002524 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e033      	b.n	80025a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff fcf2 	bl	8001f2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b00      	cmp	r3, #0
 8002560:	d118      	bne.n	8002594 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800256a:	f023 0302 	bic.w	r3, r3, #2
 800256e:	f043 0202 	orr.w	r2, r3, #2
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fa5a 	bl	8002a30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f023 0303 	bic.w	r3, r3, #3
 800258a:	f043 0201 	orr.w	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
 8002592:	e001      	b.n	8002598 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_Start_DMA+0x1e>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e0cc      	b.n	8002764 <HAL_ADC_Start_DMA+0x1b8>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d018      	beq.n	8002612 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025f0:	4b5e      	ldr	r3, [pc, #376]	; (800276c <HAL_ADC_Start_DMA+0x1c0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a5e      	ldr	r2, [pc, #376]	; (8002770 <HAL_ADC_Start_DMA+0x1c4>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	0c9a      	lsrs	r2, r3, #18
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002604:	e002      	b.n	800260c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	3b01      	subs	r3, #1
 800260a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f9      	bne.n	8002606 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	f040 80a0 	bne.w	8002762 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d007      	beq.n	8002654 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800264c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800265c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002660:	d106      	bne.n	8002670 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f023 0206 	bic.w	r2, r3, #6
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	645a      	str	r2, [r3, #68]	; 0x44
 800266e:	e002      	b.n	8002676 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800267e:	4b3d      	ldr	r3, [pc, #244]	; (8002774 <HAL_ADC_Start_DMA+0x1c8>)
 8002680:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002686:	4a3c      	ldr	r2, [pc, #240]	; (8002778 <HAL_ADC_Start_DMA+0x1cc>)
 8002688:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268e:	4a3b      	ldr	r2, [pc, #236]	; (800277c <HAL_ADC_Start_DMA+0x1d0>)
 8002690:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002696:	4a3a      	ldr	r2, [pc, #232]	; (8002780 <HAL_ADC_Start_DMA+0x1d4>)
 8002698:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80026b2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026c2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	334c      	adds	r3, #76	; 0x4c
 80026ce:	4619      	mov	r1, r3
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f000 fcea 	bl	80030ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d12a      	bne.n	800273a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a26      	ldr	r2, [pc, #152]	; (8002784 <HAL_ADC_Start_DMA+0x1d8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d015      	beq.n	800271a <HAL_ADC_Start_DMA+0x16e>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a25      	ldr	r2, [pc, #148]	; (8002788 <HAL_ADC_Start_DMA+0x1dc>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d105      	bne.n	8002704 <HAL_ADC_Start_DMA+0x158>
 80026f8:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <HAL_ADC_Start_DMA+0x1c8>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a20      	ldr	r2, [pc, #128]	; (800278c <HAL_ADC_Start_DMA+0x1e0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d129      	bne.n	8002762 <HAL_ADC_Start_DMA+0x1b6>
 800270e:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_ADC_Start_DMA+0x1c8>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	2b0f      	cmp	r3, #15
 8002718:	d823      	bhi.n	8002762 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d11c      	bne.n	8002762 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	e013      	b.n	8002762 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a11      	ldr	r2, [pc, #68]	; (8002784 <HAL_ADC_Start_DMA+0x1d8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d10e      	bne.n	8002762 <HAL_ADC_Start_DMA+0x1b6>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d107      	bne.n	8002762 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002760:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	2000000c 	.word	0x2000000c
 8002770:	431bde83 	.word	0x431bde83
 8002774:	40012300 	.word	0x40012300
 8002778:	08002c29 	.word	0x08002c29
 800277c:	08002ce3 	.word	0x08002ce3
 8002780:	08002cff 	.word	0x08002cff
 8002784:	40012000 	.word	0x40012000
 8002788:	40012100 	.word	0x40012100
 800278c:	40012200 	.word	0x40012200

08002790 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x1c>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e113      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x244>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b09      	cmp	r3, #9
 80027f6:	d925      	bls.n	8002844 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68d9      	ldr	r1, [r3, #12]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	3b1e      	subs	r3, #30
 800280e:	2207      	movs	r2, #7
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43da      	mvns	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	400a      	ands	r2, r1
 800281c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68d9      	ldr	r1, [r3, #12]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	b29b      	uxth	r3, r3
 800282e:	4618      	mov	r0, r3
 8002830:	4603      	mov	r3, r0
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4403      	add	r3, r0
 8002836:	3b1e      	subs	r3, #30
 8002838:	409a      	lsls	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	e022      	b.n	800288a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6919      	ldr	r1, [r3, #16]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	461a      	mov	r2, r3
 8002852:	4613      	mov	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	2207      	movs	r2, #7
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	400a      	ands	r2, r1
 8002866:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6919      	ldr	r1, [r3, #16]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	4618      	mov	r0, r3
 800287a:	4603      	mov	r3, r0
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4403      	add	r3, r0
 8002880:	409a      	lsls	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b06      	cmp	r3, #6
 8002890:	d824      	bhi.n	80028dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	3b05      	subs	r3, #5
 80028a4:	221f      	movs	r2, #31
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43da      	mvns	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	400a      	ands	r2, r1
 80028b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	4618      	mov	r0, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	3b05      	subs	r3, #5
 80028ce:	fa00 f203 	lsl.w	r2, r0, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	635a      	str	r2, [r3, #52]	; 0x34
 80028da:	e04c      	b.n	8002976 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b0c      	cmp	r3, #12
 80028e2:	d824      	bhi.n	800292e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	3b23      	subs	r3, #35	; 0x23
 80028f6:	221f      	movs	r2, #31
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43da      	mvns	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	400a      	ands	r2, r1
 8002904:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	b29b      	uxth	r3, r3
 8002912:	4618      	mov	r0, r3
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	3b23      	subs	r3, #35	; 0x23
 8002920:	fa00 f203 	lsl.w	r2, r0, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
 800292c:	e023      	b.n	8002976 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	3b41      	subs	r3, #65	; 0x41
 8002940:	221f      	movs	r2, #31
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43da      	mvns	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	400a      	ands	r2, r1
 800294e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	4618      	mov	r0, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	3b41      	subs	r3, #65	; 0x41
 800296a:	fa00 f203 	lsl.w	r2, r0, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002976:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <HAL_ADC_ConfigChannel+0x250>)
 8002978:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a28      	ldr	r2, [pc, #160]	; (8002a20 <HAL_ADC_ConfigChannel+0x254>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d10f      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x1d8>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b12      	cmp	r3, #18
 800298a:	d10b      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1d      	ldr	r2, [pc, #116]	; (8002a20 <HAL_ADC_ConfigChannel+0x254>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d12b      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x23a>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <HAL_ADC_ConfigChannel+0x258>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d003      	beq.n	80029c0 <HAL_ADC_ConfigChannel+0x1f4>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b11      	cmp	r3, #17
 80029be:	d122      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a11      	ldr	r2, [pc, #68]	; (8002a24 <HAL_ADC_ConfigChannel+0x258>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d111      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_ADC_ConfigChannel+0x25c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a11      	ldr	r2, [pc, #68]	; (8002a2c <HAL_ADC_ConfigChannel+0x260>)
 80029e8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ec:	0c9a      	lsrs	r2, r3, #18
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029f8:	e002      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f9      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	40012300 	.word	0x40012300
 8002a20:	40012000 	.word	0x40012000
 8002a24:	10000012 	.word	0x10000012
 8002a28:	2000000c 	.word	0x2000000c
 8002a2c:	431bde83 	.word	0x431bde83

08002a30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a38:	4b79      	ldr	r3, [pc, #484]	; (8002c20 <ADC_Init+0x1f0>)
 8002a3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	021a      	lsls	r2, r3, #8
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6899      	ldr	r1, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac2:	4a58      	ldr	r2, [pc, #352]	; (8002c24 <ADC_Init+0x1f4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d022      	beq.n	8002b0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ad6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6899      	ldr	r1, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002af8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6899      	ldr	r1, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	e00f      	b.n	8002b2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0202 	bic.w	r2, r2, #2
 8002b3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6899      	ldr	r1, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7e1b      	ldrb	r3, [r3, #24]
 8002b48:	005a      	lsls	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d01b      	beq.n	8002b94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6859      	ldr	r1, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	3b01      	subs	r3, #1
 8002b88:	035a      	lsls	r2, r3, #13
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	e007      	b.n	8002ba4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ba2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	051a      	lsls	r2, r3, #20
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6899      	ldr	r1, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002be6:	025a      	lsls	r2, r3, #9
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6899      	ldr	r1, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	029a      	lsls	r2, r3, #10
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	609a      	str	r2, [r3, #8]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	40012300 	.word	0x40012300
 8002c24:	0f000001 	.word	0x0f000001

08002c28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c34:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d13c      	bne.n	8002cbc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d12b      	bne.n	8002cb4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d127      	bne.n	8002cb4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d006      	beq.n	8002c80 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d119      	bne.n	8002cb4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0220 	bic.w	r2, r2, #32
 8002c8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d105      	bne.n	8002cb4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f043 0201 	orr.w	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f7ff fd6b 	bl	8002790 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cba:	e00e      	b.n	8002cda <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7ff fd75 	bl	80027b8 <HAL_ADC_ErrorCallback>
}
 8002cce:	e004      	b.n	8002cda <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	4798      	blx	r3
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f7ff fd57 	bl	80027a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2240      	movs	r2, #64	; 0x40
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f043 0204 	orr.w	r2, r3, #4
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f7ff fd4a 	bl	80027b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d5e:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	60d3      	str	r3, [r2, #12]
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d78:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <__NVIC_GetPriorityGrouping+0x18>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	f003 0307 	and.w	r3, r3, #7
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	db0b      	blt.n	8002dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	f003 021f 	and.w	r2, r3, #31
 8002da8:	4907      	ldr	r1, [pc, #28]	; (8002dc8 <__NVIC_EnableIRQ+0x38>)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	2001      	movs	r0, #1
 8002db2:	fa00 f202 	lsl.w	r2, r0, r2
 8002db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000e100 	.word	0xe000e100

08002dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	6039      	str	r1, [r7, #0]
 8002dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	db0a      	blt.n	8002df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	490c      	ldr	r1, [pc, #48]	; (8002e18 <__NVIC_SetPriority+0x4c>)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	0112      	lsls	r2, r2, #4
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	440b      	add	r3, r1
 8002df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df4:	e00a      	b.n	8002e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4908      	ldr	r1, [pc, #32]	; (8002e1c <__NVIC_SetPriority+0x50>)
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	3b04      	subs	r3, #4
 8002e04:	0112      	lsls	r2, r2, #4
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	440b      	add	r3, r1
 8002e0a:	761a      	strb	r2, [r3, #24]
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	e000e100 	.word	0xe000e100
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	; 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f1c3 0307 	rsb	r3, r3, #7
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	bf28      	it	cs
 8002e3e:	2304      	movcs	r3, #4
 8002e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3304      	adds	r3, #4
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d902      	bls.n	8002e50 <NVIC_EncodePriority+0x30>
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3b03      	subs	r3, #3
 8002e4e:	e000      	b.n	8002e52 <NVIC_EncodePriority+0x32>
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	f04f 32ff 	mov.w	r2, #4294967295
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	401a      	ands	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e68:	f04f 31ff 	mov.w	r1, #4294967295
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	43d9      	mvns	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	4313      	orrs	r3, r2
         );
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3724      	adds	r7, #36	; 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e98:	d301      	bcc.n	8002e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e00f      	b.n	8002ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <SysTick_Config+0x40>)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ea6:	210f      	movs	r1, #15
 8002ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eac:	f7ff ff8e 	bl	8002dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <SysTick_Config+0x40>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eb6:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <SysTick_Config+0x40>)
 8002eb8:	2207      	movs	r2, #7
 8002eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	e000e010 	.word	0xe000e010

08002ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ff29 	bl	8002d2c <__NVIC_SetPriorityGrouping>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	4603      	mov	r3, r0
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef4:	f7ff ff3e 	bl	8002d74 <__NVIC_GetPriorityGrouping>
 8002ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	6978      	ldr	r0, [r7, #20]
 8002f00:	f7ff ff8e 	bl	8002e20 <NVIC_EncodePriority>
 8002f04:	4602      	mov	r2, r0
 8002f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff ff5d 	bl	8002dcc <__NVIC_SetPriority>
}
 8002f12:	bf00      	nop
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff31 	bl	8002d90 <__NVIC_EnableIRQ>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff ffa2 	bl	8002e88 <SysTick_Config>
 8002f44:	4603      	mov	r3, r0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f5c:	f7ff fab4 	bl	80024c8 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e099      	b.n	80030a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0201 	bic.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f8c:	e00f      	b.n	8002fae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f8e:	f7ff fa9b 	bl	80024c8 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b05      	cmp	r3, #5
 8002f9a:	d908      	bls.n	8002fae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e078      	b.n	80030a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e8      	bne.n	8002f8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <HAL_DMA_Init+0x158>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	2b04      	cmp	r3, #4
 8003006:	d107      	bne.n	8003018 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	4313      	orrs	r3, r2
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f023 0307 	bic.w	r3, r3, #7
 800302e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	2b04      	cmp	r3, #4
 8003040:	d117      	bne.n	8003072 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00e      	beq.n	8003072 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fa91 	bl	800357c <DMA_CheckFifoParam>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2240      	movs	r2, #64	; 0x40
 8003064:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800306e:	2301      	movs	r3, #1
 8003070:	e016      	b.n	80030a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fa48 	bl	8003510 <DMA_CalcBaseAndBitshift>
 8003080:	4603      	mov	r3, r0
 8003082:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003088:	223f      	movs	r2, #63	; 0x3f
 800308a:	409a      	lsls	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	f010803f 	.word	0xf010803f

080030ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_DMA_Start_IT+0x26>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e040      	b.n	8003154 <HAL_DMA_Start_IT+0xa8>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d12f      	bne.n	8003146 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f9da 	bl	80034b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003104:	223f      	movs	r2, #63	; 0x3f
 8003106:	409a      	lsls	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0216 	orr.w	r2, r2, #22
 800311a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0208 	orr.w	r2, r2, #8
 8003132:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	e005      	b.n	8003152 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800314e:	2302      	movs	r3, #2
 8003150:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003152:	7dfb      	ldrb	r3, [r7, #23]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d004      	beq.n	800317a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2280      	movs	r2, #128	; 0x80
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e00c      	b.n	8003194 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2205      	movs	r2, #5
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0201 	bic.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031ac:	4b92      	ldr	r3, [pc, #584]	; (80033f8 <HAL_DMA_IRQHandler+0x258>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a92      	ldr	r2, [pc, #584]	; (80033fc <HAL_DMA_IRQHandler+0x25c>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	0a9b      	lsrs	r3, r3, #10
 80031b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ca:	2208      	movs	r2, #8
 80031cc:	409a      	lsls	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d01a      	beq.n	800320c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0204 	bic.w	r2, r2, #4
 80031f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f8:	2208      	movs	r2, #8
 80031fa:	409a      	lsls	r2, r3
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003204:	f043 0201 	orr.w	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003210:	2201      	movs	r2, #1
 8003212:	409a      	lsls	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d012      	beq.n	8003242 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00b      	beq.n	8003242 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322e:	2201      	movs	r2, #1
 8003230:	409a      	lsls	r2, r3
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	f043 0202 	orr.w	r2, r3, #2
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	2204      	movs	r2, #4
 8003248:	409a      	lsls	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d012      	beq.n	8003278 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00b      	beq.n	8003278 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	2204      	movs	r2, #4
 8003266:	409a      	lsls	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	f043 0204 	orr.w	r2, r3, #4
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	2210      	movs	r2, #16
 800327e:	409a      	lsls	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d043      	beq.n	8003310 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d03c      	beq.n	8003310 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329a:	2210      	movs	r2, #16
 800329c:	409a      	lsls	r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d018      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d108      	bne.n	80032d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d024      	beq.n	8003310 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	4798      	blx	r3
 80032ce:	e01f      	b.n	8003310 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d01b      	beq.n	8003310 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4798      	blx	r3
 80032e0:	e016      	b.n	8003310 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d107      	bne.n	8003300 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0208 	bic.w	r2, r2, #8
 80032fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003314:	2220      	movs	r2, #32
 8003316:	409a      	lsls	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 808e 	beq.w	800343e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8086 	beq.w	800343e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003336:	2220      	movs	r2, #32
 8003338:	409a      	lsls	r2, r3
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b05      	cmp	r3, #5
 8003348:	d136      	bne.n	80033b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0216 	bic.w	r2, r2, #22
 8003358:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695a      	ldr	r2, [r3, #20]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003368:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	2b00      	cmp	r3, #0
 8003370:	d103      	bne.n	800337a <HAL_DMA_IRQHandler+0x1da>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0208 	bic.w	r2, r2, #8
 8003388:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338e:	223f      	movs	r2, #63	; 0x3f
 8003390:	409a      	lsls	r2, r3
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d07d      	beq.n	80034aa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	4798      	blx	r3
        }
        return;
 80033b6:	e078      	b.n	80034aa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d01c      	beq.n	8003400 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d108      	bne.n	80033e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d030      	beq.n	800343e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4798      	blx	r3
 80033e4:	e02b      	b.n	800343e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d027      	beq.n	800343e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	4798      	blx	r3
 80033f6:	e022      	b.n	800343e <HAL_DMA_IRQHandler+0x29e>
 80033f8:	2000000c 	.word	0x2000000c
 80033fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10f      	bne.n	800342e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0210 	bic.w	r2, r2, #16
 800341c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003442:	2b00      	cmp	r3, #0
 8003444:	d032      	beq.n	80034ac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d022      	beq.n	8003498 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2205      	movs	r2, #5
 8003456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0201 	bic.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	3301      	adds	r3, #1
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	429a      	cmp	r2, r3
 8003474:	d307      	bcc.n	8003486 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f2      	bne.n	800346a <HAL_DMA_IRQHandler+0x2ca>
 8003484:	e000      	b.n	8003488 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003486:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
 80034a8:	e000      	b.n	80034ac <HAL_DMA_IRQHandler+0x30c>
        return;
 80034aa:	bf00      	nop
    }
  }
}
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop

080034b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b40      	cmp	r3, #64	; 0x40
 80034e0:	d108      	bne.n	80034f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034f2:	e007      	b.n	8003504 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	60da      	str	r2, [r3, #12]
}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	3b10      	subs	r3, #16
 8003520:	4a14      	ldr	r2, [pc, #80]	; (8003574 <DMA_CalcBaseAndBitshift+0x64>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	091b      	lsrs	r3, r3, #4
 8003528:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800352a:	4a13      	ldr	r2, [pc, #76]	; (8003578 <DMA_CalcBaseAndBitshift+0x68>)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d909      	bls.n	8003552 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003546:	f023 0303 	bic.w	r3, r3, #3
 800354a:	1d1a      	adds	r2, r3, #4
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	659a      	str	r2, [r3, #88]	; 0x58
 8003550:	e007      	b.n	8003562 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800355a:	f023 0303 	bic.w	r3, r3, #3
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	aaaaaaab 	.word	0xaaaaaaab
 8003578:	08006408 	.word	0x08006408

0800357c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d11f      	bne.n	80035d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b03      	cmp	r3, #3
 800359a:	d855      	bhi.n	8003648 <DMA_CheckFifoParam+0xcc>
 800359c:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <DMA_CheckFifoParam+0x28>)
 800359e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a2:	bf00      	nop
 80035a4:	080035b5 	.word	0x080035b5
 80035a8:	080035c7 	.word	0x080035c7
 80035ac:	080035b5 	.word	0x080035b5
 80035b0:	08003649 	.word	0x08003649
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d045      	beq.n	800364c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c4:	e042      	b.n	800364c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035ce:	d13f      	bne.n	8003650 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d4:	e03c      	b.n	8003650 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035de:	d121      	bne.n	8003624 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d836      	bhi.n	8003654 <DMA_CheckFifoParam+0xd8>
 80035e6:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <DMA_CheckFifoParam+0x70>)
 80035e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ec:	080035fd 	.word	0x080035fd
 80035f0:	08003603 	.word	0x08003603
 80035f4:	080035fd 	.word	0x080035fd
 80035f8:	08003615 	.word	0x08003615
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003600:	e02f      	b.n	8003662 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d024      	beq.n	8003658 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003612:	e021      	b.n	8003658 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800361c:	d11e      	bne.n	800365c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003622:	e01b      	b.n	800365c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d902      	bls.n	8003630 <DMA_CheckFifoParam+0xb4>
 800362a:	2b03      	cmp	r3, #3
 800362c:	d003      	beq.n	8003636 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800362e:	e018      	b.n	8003662 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      break;
 8003634:	e015      	b.n	8003662 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00e      	beq.n	8003660 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
      break;
 8003646:	e00b      	b.n	8003660 <DMA_CheckFifoParam+0xe4>
      break;
 8003648:	bf00      	nop
 800364a:	e00a      	b.n	8003662 <DMA_CheckFifoParam+0xe6>
      break;
 800364c:	bf00      	nop
 800364e:	e008      	b.n	8003662 <DMA_CheckFifoParam+0xe6>
      break;
 8003650:	bf00      	nop
 8003652:	e006      	b.n	8003662 <DMA_CheckFifoParam+0xe6>
      break;
 8003654:	bf00      	nop
 8003656:	e004      	b.n	8003662 <DMA_CheckFifoParam+0xe6>
      break;
 8003658:	bf00      	nop
 800365a:	e002      	b.n	8003662 <DMA_CheckFifoParam+0xe6>
      break;   
 800365c:	bf00      	nop
 800365e:	e000      	b.n	8003662 <DMA_CheckFifoParam+0xe6>
      break;
 8003660:	bf00      	nop
    }
  } 
  
  return status; 
 8003662:	7bfb      	ldrb	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003670:	b480      	push	{r7}
 8003672:	b089      	sub	sp, #36	; 0x24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	e165      	b.n	8003958 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800368c:	2201      	movs	r2, #1
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4013      	ands	r3, r2
 800369e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	f040 8154 	bne.w	8003952 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d00b      	beq.n	80036ca <HAL_GPIO_Init+0x5a>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d007      	beq.n	80036ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036be:	2b11      	cmp	r3, #17
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b12      	cmp	r3, #18
 80036c8:	d130      	bne.n	800372c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	2203      	movs	r2, #3
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4013      	ands	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003700:	2201      	movs	r2, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 0201 	and.w	r2, r3, #1
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4313      	orrs	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	2203      	movs	r2, #3
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b02      	cmp	r3, #2
 8003762:	d003      	beq.n	800376c <HAL_GPIO_Init+0xfc>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b12      	cmp	r3, #18
 800376a:	d123      	bne.n	80037b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	08da      	lsrs	r2, r3, #3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3208      	adds	r2, #8
 8003774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003778:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	220f      	movs	r2, #15
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	08da      	lsrs	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3208      	adds	r2, #8
 80037ae:	69b9      	ldr	r1, [r7, #24]
 80037b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	2203      	movs	r2, #3
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 0203 	and.w	r2, r3, #3
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80ae 	beq.w	8003952 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	4b5c      	ldr	r3, [pc, #368]	; (800396c <HAL_GPIO_Init+0x2fc>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	4a5b      	ldr	r2, [pc, #364]	; (800396c <HAL_GPIO_Init+0x2fc>)
 8003800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003804:	6453      	str	r3, [r2, #68]	; 0x44
 8003806:	4b59      	ldr	r3, [pc, #356]	; (800396c <HAL_GPIO_Init+0x2fc>)
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003812:	4a57      	ldr	r2, [pc, #348]	; (8003970 <HAL_GPIO_Init+0x300>)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	089b      	lsrs	r3, r3, #2
 8003818:	3302      	adds	r3, #2
 800381a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	220f      	movs	r2, #15
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a4e      	ldr	r2, [pc, #312]	; (8003974 <HAL_GPIO_Init+0x304>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d025      	beq.n	800388a <HAL_GPIO_Init+0x21a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a4d      	ldr	r2, [pc, #308]	; (8003978 <HAL_GPIO_Init+0x308>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01f      	beq.n	8003886 <HAL_GPIO_Init+0x216>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a4c      	ldr	r2, [pc, #304]	; (800397c <HAL_GPIO_Init+0x30c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d019      	beq.n	8003882 <HAL_GPIO_Init+0x212>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a4b      	ldr	r2, [pc, #300]	; (8003980 <HAL_GPIO_Init+0x310>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <HAL_GPIO_Init+0x20e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a4a      	ldr	r2, [pc, #296]	; (8003984 <HAL_GPIO_Init+0x314>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00d      	beq.n	800387a <HAL_GPIO_Init+0x20a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a49      	ldr	r2, [pc, #292]	; (8003988 <HAL_GPIO_Init+0x318>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d007      	beq.n	8003876 <HAL_GPIO_Init+0x206>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a48      	ldr	r2, [pc, #288]	; (800398c <HAL_GPIO_Init+0x31c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <HAL_GPIO_Init+0x202>
 800386e:	2306      	movs	r3, #6
 8003870:	e00c      	b.n	800388c <HAL_GPIO_Init+0x21c>
 8003872:	2307      	movs	r3, #7
 8003874:	e00a      	b.n	800388c <HAL_GPIO_Init+0x21c>
 8003876:	2305      	movs	r3, #5
 8003878:	e008      	b.n	800388c <HAL_GPIO_Init+0x21c>
 800387a:	2304      	movs	r3, #4
 800387c:	e006      	b.n	800388c <HAL_GPIO_Init+0x21c>
 800387e:	2303      	movs	r3, #3
 8003880:	e004      	b.n	800388c <HAL_GPIO_Init+0x21c>
 8003882:	2302      	movs	r3, #2
 8003884:	e002      	b.n	800388c <HAL_GPIO_Init+0x21c>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <HAL_GPIO_Init+0x21c>
 800388a:	2300      	movs	r3, #0
 800388c:	69fa      	ldr	r2, [r7, #28]
 800388e:	f002 0203 	and.w	r2, r2, #3
 8003892:	0092      	lsls	r2, r2, #2
 8003894:	4093      	lsls	r3, r2
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800389c:	4934      	ldr	r1, [pc, #208]	; (8003970 <HAL_GPIO_Init+0x300>)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	089b      	lsrs	r3, r3, #2
 80038a2:	3302      	adds	r3, #2
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038aa:	4b39      	ldr	r3, [pc, #228]	; (8003990 <HAL_GPIO_Init+0x320>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	43db      	mvns	r3, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4013      	ands	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038ce:	4a30      	ldr	r2, [pc, #192]	; (8003990 <HAL_GPIO_Init+0x320>)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038d4:	4b2e      	ldr	r3, [pc, #184]	; (8003990 <HAL_GPIO_Init+0x320>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038f8:	4a25      	ldr	r2, [pc, #148]	; (8003990 <HAL_GPIO_Init+0x320>)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038fe:	4b24      	ldr	r3, [pc, #144]	; (8003990 <HAL_GPIO_Init+0x320>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003922:	4a1b      	ldr	r2, [pc, #108]	; (8003990 <HAL_GPIO_Init+0x320>)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_GPIO_Init+0x320>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800394c:	4a10      	ldr	r2, [pc, #64]	; (8003990 <HAL_GPIO_Init+0x320>)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3301      	adds	r3, #1
 8003956:	61fb      	str	r3, [r7, #28]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	2b0f      	cmp	r3, #15
 800395c:	f67f ae96 	bls.w	800368c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003960:	bf00      	nop
 8003962:	3724      	adds	r7, #36	; 0x24
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	40023800 	.word	0x40023800
 8003970:	40013800 	.word	0x40013800
 8003974:	40020000 	.word	0x40020000
 8003978:	40020400 	.word	0x40020400
 800397c:	40020800 	.word	0x40020800
 8003980:	40020c00 	.word	0x40020c00
 8003984:	40021000 	.word	0x40021000
 8003988:	40021400 	.word	0x40021400
 800398c:	40021800 	.word	0x40021800
 8003990:	40013c00 	.word	0x40013c00

08003994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	807b      	strh	r3, [r7, #2]
 80039a0:	4613      	mov	r3, r2
 80039a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039a4:	787b      	ldrb	r3, [r7, #1]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039aa:	887a      	ldrh	r2, [r7, #2]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039b0:	e003      	b.n	80039ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039b2:	887b      	ldrh	r3, [r7, #2]
 80039b4:	041a      	lsls	r2, r3, #16
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	619a      	str	r2, [r3, #24]
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	460b      	mov	r3, r1
 80039d0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	887b      	ldrh	r3, [r7, #2]
 80039d8:	401a      	ands	r2, r3
 80039da:	887b      	ldrh	r3, [r7, #2]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d104      	bne.n	80039ea <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80039e0:	887b      	ldrh	r3, [r7, #2]
 80039e2:	041a      	lsls	r2, r3, #16
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80039e8:	e002      	b.n	80039f0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80039ea:	887a      	ldrh	r2, [r7, #2]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	619a      	str	r2, [r3, #24]
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <HAL_PWREx_EnableOverDrive+0x90>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	4a1f      	ldr	r2, [pc, #124]	; (8003a8c <HAL_PWREx_EnableOverDrive+0x90>)
 8003a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a14:	6413      	str	r3, [r2, #64]	; 0x40
 8003a16:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <HAL_PWREx_EnableOverDrive+0x90>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a22:	4b1b      	ldr	r3, [pc, #108]	; (8003a90 <HAL_PWREx_EnableOverDrive+0x94>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a28:	f7fe fd4e 	bl	80024c8 <HAL_GetTick>
 8003a2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a2e:	e009      	b.n	8003a44 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a30:	f7fe fd4a 	bl	80024c8 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a3e:	d901      	bls.n	8003a44 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e01f      	b.n	8003a84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a44:	4b13      	ldr	r3, [pc, #76]	; (8003a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a50:	d1ee      	bne.n	8003a30 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a52:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a58:	f7fe fd36 	bl	80024c8 <HAL_GetTick>
 8003a5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a5e:	e009      	b.n	8003a74 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a60:	f7fe fd32 	bl	80024c8 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a6e:	d901      	bls.n	8003a74 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e007      	b.n	8003a84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a74:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a80:	d1ee      	bne.n	8003a60 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	420e0040 	.word	0x420e0040
 8003a94:	40007000 	.word	0x40007000
 8003a98:	420e0044 	.word	0x420e0044

08003a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0cc      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab0:	4b68      	ldr	r3, [pc, #416]	; (8003c54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d90c      	bls.n	8003ad8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003abe:	4b65      	ldr	r3, [pc, #404]	; (8003c54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac6:	4b63      	ldr	r3, [pc, #396]	; (8003c54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0b8      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d020      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003af0:	4b59      	ldr	r3, [pc, #356]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	4a58      	ldr	r2, [pc, #352]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003afa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b08:	4b53      	ldr	r3, [pc, #332]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	4a52      	ldr	r2, [pc, #328]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b14:	4b50      	ldr	r3, [pc, #320]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	494d      	ldr	r1, [pc, #308]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d044      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d107      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3a:	4b47      	ldr	r3, [pc, #284]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d119      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e07f      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d003      	beq.n	8003b5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d107      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5a:	4b3f      	ldr	r3, [pc, #252]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e06f      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6a:	4b3b      	ldr	r3, [pc, #236]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e067      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b7a:	4b37      	ldr	r3, [pc, #220]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f023 0203 	bic.w	r2, r3, #3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4934      	ldr	r1, [pc, #208]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b8c:	f7fe fc9c 	bl	80024c8 <HAL_GetTick>
 8003b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b92:	e00a      	b.n	8003baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b94:	f7fe fc98 	bl	80024c8 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e04f      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003baa:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 020c 	and.w	r2, r3, #12
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d1eb      	bne.n	8003b94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bbc:	4b25      	ldr	r3, [pc, #148]	; (8003c54 <HAL_RCC_ClockConfig+0x1b8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d20c      	bcs.n	8003be4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bca:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <HAL_RCC_ClockConfig+0x1b8>)
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd2:	4b20      	ldr	r3, [pc, #128]	; (8003c54 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e032      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bf0:	4b19      	ldr	r3, [pc, #100]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4916      	ldr	r1, [pc, #88]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c0e:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	490e      	ldr	r1, [pc, #56]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c22:	f000 f855 	bl	8003cd0 <HAL_RCC_GetSysClockFreq>
 8003c26:	4601      	mov	r1, r0
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	091b      	lsrs	r3, r3, #4
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <HAL_RCC_ClockConfig+0x1c0>)
 8003c34:	5cd3      	ldrb	r3, [r2, r3]
 8003c36:	fa21 f303 	lsr.w	r3, r1, r3
 8003c3a:	4a09      	ldr	r2, [pc, #36]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c3e:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fe fbfc 	bl	8002440 <HAL_InitTick>

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40023c00 	.word	0x40023c00
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	080063f0 	.word	0x080063f0
 8003c60:	2000000c 	.word	0x2000000c
 8003c64:	20000010 	.word	0x20000010

08003c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c6c:	4b03      	ldr	r3, [pc, #12]	; (8003c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	2000000c 	.word	0x2000000c

08003c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c84:	f7ff fff0 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003c88:	4601      	mov	r1, r0
 8003c8a:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	0a9b      	lsrs	r3, r3, #10
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4a03      	ldr	r2, [pc, #12]	; (8003ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c96:	5cd3      	ldrb	r3, [r2, r3]
 8003c98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	08006400 	.word	0x08006400

08003ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cac:	f7ff ffdc 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003cb0:	4601      	mov	r1, r0
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	0b5b      	lsrs	r3, r3, #13
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	4a03      	ldr	r2, [pc, #12]	; (8003ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cbe:	5cd3      	ldrb	r3, [r2, r3]
 8003cc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	08006400 	.word	0x08006400

08003cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cea:	4b9f      	ldr	r3, [pc, #636]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x298>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
 8003cf2:	2b0c      	cmp	r3, #12
 8003cf4:	f200 8130 	bhi.w	8003f58 <HAL_RCC_GetSysClockFreq+0x288>
 8003cf8:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <HAL_RCC_GetSysClockFreq+0x30>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d35 	.word	0x08003d35
 8003d04:	08003f59 	.word	0x08003f59
 8003d08:	08003f59 	.word	0x08003f59
 8003d0c:	08003f59 	.word	0x08003f59
 8003d10:	08003d3b 	.word	0x08003d3b
 8003d14:	08003f59 	.word	0x08003f59
 8003d18:	08003f59 	.word	0x08003f59
 8003d1c:	08003f59 	.word	0x08003f59
 8003d20:	08003d41 	.word	0x08003d41
 8003d24:	08003f59 	.word	0x08003f59
 8003d28:	08003f59 	.word	0x08003f59
 8003d2c:	08003f59 	.word	0x08003f59
 8003d30:	08003e4f 	.word	0x08003e4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d34:	4b8d      	ldr	r3, [pc, #564]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x29c>)
 8003d36:	613b      	str	r3, [r7, #16]
       break;
 8003d38:	e111      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d3a:	4b8d      	ldr	r3, [pc, #564]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003d3c:	613b      	str	r3, [r7, #16]
      break;
 8003d3e:	e10e      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d40:	4b89      	ldr	r3, [pc, #548]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x298>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d48:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d4a:	4b87      	ldr	r3, [pc, #540]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x298>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d023      	beq.n	8003d9e <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d56:	4b84      	ldr	r3, [pc, #528]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x298>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	099b      	lsrs	r3, r3, #6
 8003d5c:	f04f 0400 	mov.w	r4, #0
 8003d60:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	ea03 0501 	and.w	r5, r3, r1
 8003d6c:	ea04 0602 	and.w	r6, r4, r2
 8003d70:	4a7f      	ldr	r2, [pc, #508]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003d72:	fb02 f106 	mul.w	r1, r2, r6
 8003d76:	2200      	movs	r2, #0
 8003d78:	fb02 f205 	mul.w	r2, r2, r5
 8003d7c:	440a      	add	r2, r1
 8003d7e:	497c      	ldr	r1, [pc, #496]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003d80:	fba5 0101 	umull	r0, r1, r5, r1
 8003d84:	1853      	adds	r3, r2, r1
 8003d86:	4619      	mov	r1, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f04f 0400 	mov.w	r4, #0
 8003d8e:	461a      	mov	r2, r3
 8003d90:	4623      	mov	r3, r4
 8003d92:	f7fc fe77 	bl	8000a84 <__aeabi_uldivmod>
 8003d96:	4603      	mov	r3, r0
 8003d98:	460c      	mov	r4, r1
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	e049      	b.n	8003e32 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d9e:	4b72      	ldr	r3, [pc, #456]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x298>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	099b      	lsrs	r3, r3, #6
 8003da4:	f04f 0400 	mov.w	r4, #0
 8003da8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	ea03 0501 	and.w	r5, r3, r1
 8003db4:	ea04 0602 	and.w	r6, r4, r2
 8003db8:	4629      	mov	r1, r5
 8003dba:	4632      	mov	r2, r6
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	f04f 0400 	mov.w	r4, #0
 8003dc4:	0154      	lsls	r4, r2, #5
 8003dc6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dca:	014b      	lsls	r3, r1, #5
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4622      	mov	r2, r4
 8003dd0:	1b49      	subs	r1, r1, r5
 8003dd2:	eb62 0206 	sbc.w	r2, r2, r6
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	f04f 0400 	mov.w	r4, #0
 8003dde:	0194      	lsls	r4, r2, #6
 8003de0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003de4:	018b      	lsls	r3, r1, #6
 8003de6:	1a5b      	subs	r3, r3, r1
 8003de8:	eb64 0402 	sbc.w	r4, r4, r2
 8003dec:	f04f 0100 	mov.w	r1, #0
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	00e2      	lsls	r2, r4, #3
 8003df6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dfa:	00d9      	lsls	r1, r3, #3
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4614      	mov	r4, r2
 8003e00:	195b      	adds	r3, r3, r5
 8003e02:	eb44 0406 	adc.w	r4, r4, r6
 8003e06:	f04f 0100 	mov.w	r1, #0
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	02a2      	lsls	r2, r4, #10
 8003e10:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e14:	0299      	lsls	r1, r3, #10
 8003e16:	460b      	mov	r3, r1
 8003e18:	4614      	mov	r4, r2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f04f 0400 	mov.w	r4, #0
 8003e24:	461a      	mov	r2, r3
 8003e26:	4623      	mov	r3, r4
 8003e28:	f7fc fe2c 	bl	8000a84 <__aeabi_uldivmod>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	460c      	mov	r4, r1
 8003e30:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e32:	4b4d      	ldr	r3, [pc, #308]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x298>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	0c1b      	lsrs	r3, r3, #16
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4a:	613b      	str	r3, [r7, #16]
      break;
 8003e4c:	e087      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e4e:	4b46      	ldr	r3, [pc, #280]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x298>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e56:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e58:	4b43      	ldr	r3, [pc, #268]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x298>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d023      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e64:	4b40      	ldr	r3, [pc, #256]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x298>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	099b      	lsrs	r3, r3, #6
 8003e6a:	f04f 0400 	mov.w	r4, #0
 8003e6e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	ea03 0501 	and.w	r5, r3, r1
 8003e7a:	ea04 0602 	and.w	r6, r4, r2
 8003e7e:	4a3c      	ldr	r2, [pc, #240]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003e80:	fb02 f106 	mul.w	r1, r2, r6
 8003e84:	2200      	movs	r2, #0
 8003e86:	fb02 f205 	mul.w	r2, r2, r5
 8003e8a:	440a      	add	r2, r1
 8003e8c:	4938      	ldr	r1, [pc, #224]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003e8e:	fba5 0101 	umull	r0, r1, r5, r1
 8003e92:	1853      	adds	r3, r2, r1
 8003e94:	4619      	mov	r1, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f04f 0400 	mov.w	r4, #0
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	4623      	mov	r3, r4
 8003ea0:	f7fc fdf0 	bl	8000a84 <__aeabi_uldivmod>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	e049      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eac:	4b2e      	ldr	r3, [pc, #184]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x298>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	099b      	lsrs	r3, r3, #6
 8003eb2:	f04f 0400 	mov.w	r4, #0
 8003eb6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	ea03 0501 	and.w	r5, r3, r1
 8003ec2:	ea04 0602 	and.w	r6, r4, r2
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	4632      	mov	r2, r6
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	f04f 0400 	mov.w	r4, #0
 8003ed2:	0154      	lsls	r4, r2, #5
 8003ed4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ed8:	014b      	lsls	r3, r1, #5
 8003eda:	4619      	mov	r1, r3
 8003edc:	4622      	mov	r2, r4
 8003ede:	1b49      	subs	r1, r1, r5
 8003ee0:	eb62 0206 	sbc.w	r2, r2, r6
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	f04f 0400 	mov.w	r4, #0
 8003eec:	0194      	lsls	r4, r2, #6
 8003eee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ef2:	018b      	lsls	r3, r1, #6
 8003ef4:	1a5b      	subs	r3, r3, r1
 8003ef6:	eb64 0402 	sbc.w	r4, r4, r2
 8003efa:	f04f 0100 	mov.w	r1, #0
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	00e2      	lsls	r2, r4, #3
 8003f04:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f08:	00d9      	lsls	r1, r3, #3
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4614      	mov	r4, r2
 8003f0e:	195b      	adds	r3, r3, r5
 8003f10:	eb44 0406 	adc.w	r4, r4, r6
 8003f14:	f04f 0100 	mov.w	r1, #0
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	02a2      	lsls	r2, r4, #10
 8003f1e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f22:	0299      	lsls	r1, r3, #10
 8003f24:	460b      	mov	r3, r1
 8003f26:	4614      	mov	r4, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f04f 0400 	mov.w	r4, #0
 8003f32:	461a      	mov	r2, r3
 8003f34:	4623      	mov	r3, r4
 8003f36:	f7fc fda5 	bl	8000a84 <__aeabi_uldivmod>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f40:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x298>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	0f1b      	lsrs	r3, r3, #28
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	613b      	str	r3, [r7, #16]
      break;
 8003f56:	e002      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f58:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x29c>)
 8003f5a:	613b      	str	r3, [r7, #16]
      break;
 8003f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f5e:	693b      	ldr	r3, [r7, #16]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	371c      	adds	r7, #28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	00f42400 	.word	0x00f42400
 8003f70:	017d7840 	.word	0x017d7840

08003f74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8083 	beq.w	8004094 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f8e:	4b95      	ldr	r3, [pc, #596]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d019      	beq.n	8003fce <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f9a:	4b92      	ldr	r3, [pc, #584]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d106      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fa6:	4b8f      	ldr	r3, [pc, #572]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fb2:	d00c      	beq.n	8003fce <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb4:	4b8b      	ldr	r3, [pc, #556]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fbc:	2b0c      	cmp	r3, #12
 8003fbe:	d112      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fc0:	4b88      	ldr	r3, [pc, #544]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fcc:	d10b      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fce:	4b85      	ldr	r3, [pc, #532]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d05b      	beq.n	8004092 <HAL_RCC_OscConfig+0x11e>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d157      	bne.n	8004092 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e216      	b.n	8004414 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fee:	d106      	bne.n	8003ffe <HAL_RCC_OscConfig+0x8a>
 8003ff0:	4b7c      	ldr	r3, [pc, #496]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a7b      	ldr	r2, [pc, #492]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8003ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	e01d      	b.n	800403a <HAL_RCC_OscConfig+0xc6>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004006:	d10c      	bne.n	8004022 <HAL_RCC_OscConfig+0xae>
 8004008:	4b76      	ldr	r3, [pc, #472]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a75      	ldr	r2, [pc, #468]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 800400e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	4b73      	ldr	r3, [pc, #460]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a72      	ldr	r2, [pc, #456]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 800401a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	e00b      	b.n	800403a <HAL_RCC_OscConfig+0xc6>
 8004022:	4b70      	ldr	r3, [pc, #448]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a6f      	ldr	r2, [pc, #444]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	4b6d      	ldr	r3, [pc, #436]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a6c      	ldr	r2, [pc, #432]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004038:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d013      	beq.n	800406a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004042:	f7fe fa41 	bl	80024c8 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800404a:	f7fe fa3d 	bl	80024c8 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b64      	cmp	r3, #100	; 0x64
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e1db      	b.n	8004414 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405c:	4b61      	ldr	r3, [pc, #388]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <HAL_RCC_OscConfig+0xd6>
 8004068:	e014      	b.n	8004094 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406a:	f7fe fa2d 	bl	80024c8 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004072:	f7fe fa29 	bl	80024c8 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b64      	cmp	r3, #100	; 0x64
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e1c7      	b.n	8004414 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004084:	4b57      	ldr	r3, [pc, #348]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1f0      	bne.n	8004072 <HAL_RCC_OscConfig+0xfe>
 8004090:	e000      	b.n	8004094 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004092:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d06f      	beq.n	8004180 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040a0:	4b50      	ldr	r3, [pc, #320]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 030c 	and.w	r3, r3, #12
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d017      	beq.n	80040dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040ac:	4b4d      	ldr	r3, [pc, #308]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d105      	bne.n	80040c4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040b8:	4b4a      	ldr	r3, [pc, #296]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00b      	beq.n	80040dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040c4:	4b47      	ldr	r3, [pc, #284]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040cc:	2b0c      	cmp	r3, #12
 80040ce:	d11c      	bne.n	800410a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040d0:	4b44      	ldr	r3, [pc, #272]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d116      	bne.n	800410a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040dc:	4b41      	ldr	r3, [pc, #260]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_RCC_OscConfig+0x180>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e18f      	b.n	8004414 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f4:	4b3b      	ldr	r3, [pc, #236]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4938      	ldr	r1, [pc, #224]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004104:	4313      	orrs	r3, r2
 8004106:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004108:	e03a      	b.n	8004180 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d020      	beq.n	8004154 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004112:	4b35      	ldr	r3, [pc, #212]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 8004114:	2201      	movs	r2, #1
 8004116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004118:	f7fe f9d6 	bl	80024c8 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004120:	f7fe f9d2 	bl	80024c8 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e170      	b.n	8004414 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004132:	4b2c      	ldr	r3, [pc, #176]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800413e:	4b29      	ldr	r3, [pc, #164]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	4925      	ldr	r1, [pc, #148]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 800414e:	4313      	orrs	r3, r2
 8004150:	600b      	str	r3, [r1, #0]
 8004152:	e015      	b.n	8004180 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004154:	4b24      	ldr	r3, [pc, #144]	; (80041e8 <HAL_RCC_OscConfig+0x274>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415a:	f7fe f9b5 	bl	80024c8 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004162:	f7fe f9b1 	bl	80024c8 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e14f      	b.n	8004414 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004174:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f0      	bne.n	8004162 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d037      	beq.n	80041fc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d016      	beq.n	80041c2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004194:	4b15      	ldr	r3, [pc, #84]	; (80041ec <HAL_RCC_OscConfig+0x278>)
 8004196:	2201      	movs	r2, #1
 8004198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419a:	f7fe f995 	bl	80024c8 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041a2:	f7fe f991 	bl	80024c8 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e12f      	b.n	8004414 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b4:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <HAL_RCC_OscConfig+0x270>)
 80041b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0f0      	beq.n	80041a2 <HAL_RCC_OscConfig+0x22e>
 80041c0:	e01c      	b.n	80041fc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041c2:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <HAL_RCC_OscConfig+0x278>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fe f97e 	bl	80024c8 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ce:	e00f      	b.n	80041f0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d0:	f7fe f97a 	bl	80024c8 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d908      	bls.n	80041f0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e118      	b.n	8004414 <HAL_RCC_OscConfig+0x4a0>
 80041e2:	bf00      	nop
 80041e4:	40023800 	.word	0x40023800
 80041e8:	42470000 	.word	0x42470000
 80041ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f0:	4b8a      	ldr	r3, [pc, #552]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 80041f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e9      	bne.n	80041d0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 8097 	beq.w	8004338 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800420a:	2300      	movs	r3, #0
 800420c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800420e:	4b83      	ldr	r3, [pc, #524]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10f      	bne.n	800423a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	4b7f      	ldr	r3, [pc, #508]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	4a7e      	ldr	r2, [pc, #504]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 8004224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004228:	6413      	str	r3, [r2, #64]	; 0x40
 800422a:	4b7c      	ldr	r3, [pc, #496]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004236:	2301      	movs	r3, #1
 8004238:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423a:	4b79      	ldr	r3, [pc, #484]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d118      	bne.n	8004278 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004246:	4b76      	ldr	r3, [pc, #472]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a75      	ldr	r2, [pc, #468]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 800424c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004252:	f7fe f939 	bl	80024c8 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425a:	f7fe f935 	bl	80024c8 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e0d3      	b.n	8004414 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426c:	4b6c      	ldr	r3, [pc, #432]	; (8004420 <HAL_RCC_OscConfig+0x4ac>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0f0      	beq.n	800425a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d106      	bne.n	800428e <HAL_RCC_OscConfig+0x31a>
 8004280:	4b66      	ldr	r3, [pc, #408]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	4a65      	ldr	r2, [pc, #404]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 8004286:	f043 0301 	orr.w	r3, r3, #1
 800428a:	6713      	str	r3, [r2, #112]	; 0x70
 800428c:	e01c      	b.n	80042c8 <HAL_RCC_OscConfig+0x354>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b05      	cmp	r3, #5
 8004294:	d10c      	bne.n	80042b0 <HAL_RCC_OscConfig+0x33c>
 8004296:	4b61      	ldr	r3, [pc, #388]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	4a60      	ldr	r2, [pc, #384]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 800429c:	f043 0304 	orr.w	r3, r3, #4
 80042a0:	6713      	str	r3, [r2, #112]	; 0x70
 80042a2:	4b5e      	ldr	r3, [pc, #376]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	4a5d      	ldr	r2, [pc, #372]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 80042a8:	f043 0301 	orr.w	r3, r3, #1
 80042ac:	6713      	str	r3, [r2, #112]	; 0x70
 80042ae:	e00b      	b.n	80042c8 <HAL_RCC_OscConfig+0x354>
 80042b0:	4b5a      	ldr	r3, [pc, #360]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 80042b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b4:	4a59      	ldr	r2, [pc, #356]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	6713      	str	r3, [r2, #112]	; 0x70
 80042bc:	4b57      	ldr	r3, [pc, #348]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 80042be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c0:	4a56      	ldr	r2, [pc, #344]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 80042c2:	f023 0304 	bic.w	r3, r3, #4
 80042c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d015      	beq.n	80042fc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d0:	f7fe f8fa 	bl	80024c8 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d6:	e00a      	b.n	80042ee <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d8:	f7fe f8f6 	bl	80024c8 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e092      	b.n	8004414 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ee:	4b4b      	ldr	r3, [pc, #300]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0ee      	beq.n	80042d8 <HAL_RCC_OscConfig+0x364>
 80042fa:	e014      	b.n	8004326 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fc:	f7fe f8e4 	bl	80024c8 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004302:	e00a      	b.n	800431a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004304:	f7fe f8e0 	bl	80024c8 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e07c      	b.n	8004414 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800431a:	4b40      	ldr	r3, [pc, #256]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 800431c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1ee      	bne.n	8004304 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004326:	7dfb      	ldrb	r3, [r7, #23]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d105      	bne.n	8004338 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800432c:	4b3b      	ldr	r3, [pc, #236]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	4a3a      	ldr	r2, [pc, #232]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 8004332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004336:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d068      	beq.n	8004412 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004340:	4b36      	ldr	r3, [pc, #216]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 030c 	and.w	r3, r3, #12
 8004348:	2b08      	cmp	r3, #8
 800434a:	d060      	beq.n	800440e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	2b02      	cmp	r3, #2
 8004352:	d145      	bne.n	80043e0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004354:	4b33      	ldr	r3, [pc, #204]	; (8004424 <HAL_RCC_OscConfig+0x4b0>)
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435a:	f7fe f8b5 	bl	80024c8 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004362:	f7fe f8b1 	bl	80024c8 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e04f      	b.n	8004414 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004374:	4b29      	ldr	r3, [pc, #164]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1f0      	bne.n	8004362 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	019b      	lsls	r3, r3, #6
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	085b      	lsrs	r3, r3, #1
 8004398:	3b01      	subs	r3, #1
 800439a:	041b      	lsls	r3, r3, #16
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a2:	061b      	lsls	r3, r3, #24
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	071b      	lsls	r3, r3, #28
 80043ac:	491b      	ldr	r1, [pc, #108]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b2:	4b1c      	ldr	r3, [pc, #112]	; (8004424 <HAL_RCC_OscConfig+0x4b0>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fe f886 	bl	80024c8 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fe f882 	bl	80024c8 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e020      	b.n	8004414 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d2:	4b12      	ldr	r3, [pc, #72]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x44c>
 80043de:	e018      	b.n	8004412 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e0:	4b10      	ldr	r3, [pc, #64]	; (8004424 <HAL_RCC_OscConfig+0x4b0>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e6:	f7fe f86f 	bl	80024c8 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ee:	f7fe f86b 	bl	80024c8 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e009      	b.n	8004414 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <HAL_RCC_OscConfig+0x4a8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1f0      	bne.n	80043ee <HAL_RCC_OscConfig+0x47a>
 800440c:	e001      	b.n	8004412 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40023800 	.word	0x40023800
 8004420:	40007000 	.word	0x40007000
 8004424:	42470060 	.word	0x42470060

08004428 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e056      	b.n	80044e8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7fd fde1 	bl	800201c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2202      	movs	r2, #2
 800445e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004470:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	ea42 0103 	orr.w	r1, r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	0c1b      	lsrs	r3, r3, #16
 80044b8:	f003 0104 	and.w	r1, r3, #4
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69da      	ldr	r2, [r3, #28]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	4613      	mov	r3, r2
 80044fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004500:	2300      	movs	r3, #0
 8004502:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_SPI_Transmit+0x22>
 800450e:	2302      	movs	r3, #2
 8004510:	e11e      	b.n	8004750 <HAL_SPI_Transmit+0x260>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800451a:	f7fd ffd5 	bl	80024c8 <HAL_GetTick>
 800451e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004520:	88fb      	ldrh	r3, [r7, #6]
 8004522:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d002      	beq.n	8004536 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004530:	2302      	movs	r3, #2
 8004532:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004534:	e103      	b.n	800473e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <HAL_SPI_Transmit+0x52>
 800453c:	88fb      	ldrh	r3, [r7, #6]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d102      	bne.n	8004548 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004546:	e0fa      	b.n	800473e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2203      	movs	r2, #3
 800454c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	88fa      	ldrh	r2, [r7, #6]
 8004560:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	88fa      	ldrh	r2, [r7, #6]
 8004566:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800458e:	d107      	bne.n	80045a0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800459e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d007      	beq.n	80045be <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045c6:	d14b      	bne.n	8004660 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <HAL_SPI_Transmit+0xe6>
 80045d0:	8afb      	ldrh	r3, [r7, #22]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d13e      	bne.n	8004654 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	881a      	ldrh	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	1c9a      	adds	r2, r3, #2
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045fa:	e02b      	b.n	8004654 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b02      	cmp	r3, #2
 8004608:	d112      	bne.n	8004630 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	881a      	ldrh	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	1c9a      	adds	r2, r3, #2
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	86da      	strh	r2, [r3, #54]	; 0x36
 800462e:	e011      	b.n	8004654 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004630:	f7fd ff4a 	bl	80024c8 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d803      	bhi.n	8004648 <HAL_SPI_Transmit+0x158>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004646:	d102      	bne.n	800464e <HAL_SPI_Transmit+0x15e>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d102      	bne.n	8004654 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004652:	e074      	b.n	800473e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1ce      	bne.n	80045fc <HAL_SPI_Transmit+0x10c>
 800465e:	e04c      	b.n	80046fa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_SPI_Transmit+0x17e>
 8004668:	8afb      	ldrh	r3, [r7, #22]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d140      	bne.n	80046f0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	330c      	adds	r3, #12
 8004678:	7812      	ldrb	r2, [r2, #0]
 800467a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004694:	e02c      	b.n	80046f0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d113      	bne.n	80046cc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	330c      	adds	r3, #12
 80046ae:	7812      	ldrb	r2, [r2, #0]
 80046b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80046ca:	e011      	b.n	80046f0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046cc:	f7fd fefc 	bl	80024c8 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d803      	bhi.n	80046e4 <HAL_SPI_Transmit+0x1f4>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e2:	d102      	bne.n	80046ea <HAL_SPI_Transmit+0x1fa>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d102      	bne.n	80046f0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046ee:	e026      	b.n	800473e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1cd      	bne.n	8004696 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	6839      	ldr	r1, [r7, #0]
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f894 	bl	800482c <SPI_EndRxTxTransaction>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10a      	bne.n	800472e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004718:	2300      	movs	r3, #0
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	613b      	str	r3, [r7, #16]
 800472c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	77fb      	strb	r3, [r7, #31]
 800473a:	e000      	b.n	800473e <HAL_SPI_Transmit+0x24e>
  }

error:
 800473c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800474e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3720      	adds	r7, #32
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	4613      	mov	r3, r2
 8004766:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004768:	e04c      	b.n	8004804 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004770:	d048      	beq.n	8004804 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004772:	f7fd fea9 	bl	80024c8 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d902      	bls.n	8004788 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d13d      	bne.n	8004804 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004796:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047a0:	d111      	bne.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047aa:	d004      	beq.n	80047b6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b4:	d107      	bne.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ce:	d10f      	bne.n	80047f0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e00f      	b.n	8004824 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4013      	ands	r3, r2
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	429a      	cmp	r2, r3
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	429a      	cmp	r2, r3
 8004820:	d1a3      	bne.n	800476a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af02      	add	r7, sp, #8
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004838:	4b1b      	ldr	r3, [pc, #108]	; (80048a8 <SPI_EndRxTxTransaction+0x7c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <SPI_EndRxTxTransaction+0x80>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	0d5b      	lsrs	r3, r3, #21
 8004844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004848:	fb02 f303 	mul.w	r3, r2, r3
 800484c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004856:	d112      	bne.n	800487e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2200      	movs	r2, #0
 8004860:	2180      	movs	r1, #128	; 0x80
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f7ff ff78 	bl	8004758 <SPI_WaitFlagStateUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d016      	beq.n	800489c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004872:	f043 0220 	orr.w	r2, r3, #32
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e00f      	b.n	800489e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	3b01      	subs	r3, #1
 8004888:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004894:	2b80      	cmp	r3, #128	; 0x80
 8004896:	d0f2      	beq.n	800487e <SPI_EndRxTxTransaction+0x52>
 8004898:	e000      	b.n	800489c <SPI_EndRxTxTransaction+0x70>
        break;
 800489a:	bf00      	nop
  }

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	2000000c 	.word	0x2000000c
 80048ac:	165e9f81 	.word	0x165e9f81

080048b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e01d      	b.n	80048fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fd fc3e 	bl	8002158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3304      	adds	r3, #4
 80048ec:	4619      	mov	r1, r3
 80048ee:	4610      	mov	r0, r2
 80048f0:	f000 fb92 	bl	8005018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004906:	b480      	push	{r7}
 8004908:	b085      	sub	sp, #20
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 0201 	orr.w	r2, r2, #1
 800491c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b06      	cmp	r3, #6
 800492e:	d007      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0201 	orr.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e01d      	b.n	800499c <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f815 	bl	80049a4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2202      	movs	r2, #2
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3304      	adds	r3, #4
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f000 fb43 	bl	8005018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b0c      	cmp	r3, #12
 80049c6:	d841      	bhi.n	8004a4c <HAL_TIM_IC_Start_IT+0x94>
 80049c8:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <HAL_TIM_IC_Start_IT+0x18>)
 80049ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ce:	bf00      	nop
 80049d0:	08004a05 	.word	0x08004a05
 80049d4:	08004a4d 	.word	0x08004a4d
 80049d8:	08004a4d 	.word	0x08004a4d
 80049dc:	08004a4d 	.word	0x08004a4d
 80049e0:	08004a17 	.word	0x08004a17
 80049e4:	08004a4d 	.word	0x08004a4d
 80049e8:	08004a4d 	.word	0x08004a4d
 80049ec:	08004a4d 	.word	0x08004a4d
 80049f0:	08004a29 	.word	0x08004a29
 80049f4:	08004a4d 	.word	0x08004a4d
 80049f8:	08004a4d 	.word	0x08004a4d
 80049fc:	08004a4d 	.word	0x08004a4d
 8004a00:	08004a3b 	.word	0x08004a3b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0202 	orr.w	r2, r2, #2
 8004a12:	60da      	str	r2, [r3, #12]
      break;
 8004a14:	e01b      	b.n	8004a4e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0204 	orr.w	r2, r2, #4
 8004a24:	60da      	str	r2, [r3, #12]
      break;
 8004a26:	e012      	b.n	8004a4e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0208 	orr.w	r2, r2, #8
 8004a36:	60da      	str	r2, [r3, #12]
      break;
 8004a38:	e009      	b.n	8004a4e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0210 	orr.w	r2, r2, #16
 8004a48:	60da      	str	r2, [r3, #12]
      break;
 8004a4a:	e000      	b.n	8004a4e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004a4c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2201      	movs	r2, #1
 8004a54:	6839      	ldr	r1, [r7, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fd42 	bl	80054e0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b06      	cmp	r3, #6
 8004a6c:	d007      	beq.n	8004a7e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0201 	orr.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d122      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d11b      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0202 	mvn.w	r2, #2
 8004ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fd f824 	bl	8001b18 <HAL_TIM_IC_CaptureCallback>
 8004ad0:	e005      	b.n	8004ade <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fa82 	bl	8004fdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 fa89 	bl	8004ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f003 0304 	and.w	r3, r3, #4
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d122      	bne.n	8004b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d11b      	bne.n	8004b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0204 	mvn.w	r2, #4
 8004b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fc fffa 	bl	8001b18 <HAL_TIM_IC_CaptureCallback>
 8004b24:	e005      	b.n	8004b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fa58 	bl	8004fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 fa5f 	bl	8004ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b08      	cmp	r3, #8
 8004b44:	d122      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d11b      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0208 	mvn.w	r2, #8
 8004b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2204      	movs	r2, #4
 8004b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fc ffd0 	bl	8001b18 <HAL_TIM_IC_CaptureCallback>
 8004b78:	e005      	b.n	8004b86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fa2e 	bl	8004fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fa35 	bl	8004ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	2b10      	cmp	r3, #16
 8004b98:	d122      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b10      	cmp	r3, #16
 8004ba6:	d11b      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0210 	mvn.w	r2, #16
 8004bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2208      	movs	r2, #8
 8004bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fc ffa6 	bl	8001b18 <HAL_TIM_IC_CaptureCallback>
 8004bcc:	e005      	b.n	8004bda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fa04 	bl	8004fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fa0b 	bl	8004ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d10e      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d107      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0201 	mvn.w	r2, #1
 8004c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f9de 	bl	8004fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c16:	2b80      	cmp	r3, #128	; 0x80
 8004c18:	d10e      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c24:	2b80      	cmp	r3, #128	; 0x80
 8004c26:	d107      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fd00 	bl	8005638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c42:	2b40      	cmp	r3, #64	; 0x40
 8004c44:	d10e      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c50:	2b40      	cmp	r3, #64	; 0x40
 8004c52:	d107      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f9d0 	bl	8005004 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	d10e      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0320 	and.w	r3, r3, #32
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d107      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0220 	mvn.w	r2, #32
 8004c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fcca 	bl	8005624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c90:	bf00      	nop
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e08a      	b.n	8004dc8 <HAL_TIM_IC_ConfigChannel+0x130>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d11b      	bne.n	8004d00 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	6819      	ldr	r1, [r3, #0]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f000 fa3e 	bl	8005158 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 020c 	bic.w	r2, r2, #12
 8004cea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6999      	ldr	r1, [r3, #24]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	619a      	str	r2, [r3, #24]
 8004cfe:	e05a      	b.n	8004db6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d11c      	bne.n	8004d40 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6818      	ldr	r0, [r3, #0]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	6819      	ldr	r1, [r3, #0]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f000 fac2 	bl	800529e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	699a      	ldr	r2, [r3, #24]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d28:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6999      	ldr	r1, [r3, #24]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	021a      	lsls	r2, r3, #8
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	619a      	str	r2, [r3, #24]
 8004d3e:	e03a      	b.n	8004db6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d11b      	bne.n	8004d7e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6818      	ldr	r0, [r3, #0]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	6819      	ldr	r1, [r3, #0]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f000 fb0f 	bl	8005378 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69da      	ldr	r2, [r3, #28]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 020c 	bic.w	r2, r2, #12
 8004d68:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69d9      	ldr	r1, [r3, #28]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	61da      	str	r2, [r3, #28]
 8004d7c:	e01b      	b.n	8004db6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	6819      	ldr	r1, [r3, #0]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f000 fb2f 	bl	80053f0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004da0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69d9      	ldr	r1, [r3, #28]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	021a      	lsls	r2, r3, #8
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_TIM_ConfigClockSource+0x18>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e0a6      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x166>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b40      	cmp	r3, #64	; 0x40
 8004e1e:	d067      	beq.n	8004ef0 <HAL_TIM_ConfigClockSource+0x120>
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d80b      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x6c>
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	d073      	beq.n	8004f10 <HAL_TIM_ConfigClockSource+0x140>
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d802      	bhi.n	8004e32 <HAL_TIM_ConfigClockSource+0x62>
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d06f      	beq.n	8004f10 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004e30:	e078      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d06c      	beq.n	8004f10 <HAL_TIM_ConfigClockSource+0x140>
 8004e36:	2b30      	cmp	r3, #48	; 0x30
 8004e38:	d06a      	beq.n	8004f10 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004e3a:	e073      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e3c:	2b70      	cmp	r3, #112	; 0x70
 8004e3e:	d00d      	beq.n	8004e5c <HAL_TIM_ConfigClockSource+0x8c>
 8004e40:	2b70      	cmp	r3, #112	; 0x70
 8004e42:	d804      	bhi.n	8004e4e <HAL_TIM_ConfigClockSource+0x7e>
 8004e44:	2b50      	cmp	r3, #80	; 0x50
 8004e46:	d033      	beq.n	8004eb0 <HAL_TIM_ConfigClockSource+0xe0>
 8004e48:	2b60      	cmp	r3, #96	; 0x60
 8004e4a:	d041      	beq.n	8004ed0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004e4c:	e06a      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e52:	d066      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0x152>
 8004e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e58:	d017      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004e5a:	e063      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	6899      	ldr	r1, [r3, #8]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f000 fb18 	bl	80054a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	609a      	str	r2, [r3, #8]
      break;
 8004e88:	e04c      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6899      	ldr	r1, [r3, #8]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f000 fb01 	bl	80054a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eac:	609a      	str	r2, [r3, #8]
      break;
 8004eae:	e039      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	6859      	ldr	r1, [r3, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f000 f9bf 	bl	8005240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2150      	movs	r1, #80	; 0x50
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 face 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 8004ece:	e029      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	6859      	ldr	r1, [r3, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	461a      	mov	r2, r3
 8004ede:	f000 fa1b 	bl	8005318 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2160      	movs	r1, #96	; 0x60
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 fabe 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 8004eee:	e019      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	6859      	ldr	r1, [r3, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	461a      	mov	r2, r3
 8004efe:	f000 f99f 	bl	8005240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2140      	movs	r1, #64	; 0x40
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 faae 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 8004f0e:	e009      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	f000 faa5 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 8004f20:	e000      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004f22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b0c      	cmp	r3, #12
 8004f52:	d831      	bhi.n	8004fb8 <HAL_TIM_ReadCapturedValue+0x78>
 8004f54:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5a:	bf00      	nop
 8004f5c:	08004f91 	.word	0x08004f91
 8004f60:	08004fb9 	.word	0x08004fb9
 8004f64:	08004fb9 	.word	0x08004fb9
 8004f68:	08004fb9 	.word	0x08004fb9
 8004f6c:	08004f9b 	.word	0x08004f9b
 8004f70:	08004fb9 	.word	0x08004fb9
 8004f74:	08004fb9 	.word	0x08004fb9
 8004f78:	08004fb9 	.word	0x08004fb9
 8004f7c:	08004fa5 	.word	0x08004fa5
 8004f80:	08004fb9 	.word	0x08004fb9
 8004f84:	08004fb9 	.word	0x08004fb9
 8004f88:	08004fb9 	.word	0x08004fb9
 8004f8c:	08004faf 	.word	0x08004faf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f96:	60fb      	str	r3, [r7, #12]

      break;
 8004f98:	e00f      	b.n	8004fba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	60fb      	str	r3, [r7, #12]

      break;
 8004fa2:	e00a      	b.n	8004fba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004faa:	60fb      	str	r3, [r7, #12]

      break;
 8004fac:	e005      	b.n	8004fba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	60fb      	str	r3, [r7, #12]

      break;
 8004fb6:	e000      	b.n	8004fba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004fb8:	bf00      	nop
  }

  return tmpreg;
 8004fba:	68fb      	ldr	r3, [r7, #12]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a40      	ldr	r2, [pc, #256]	; (800512c <TIM_Base_SetConfig+0x114>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d013      	beq.n	8005058 <TIM_Base_SetConfig+0x40>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005036:	d00f      	beq.n	8005058 <TIM_Base_SetConfig+0x40>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a3d      	ldr	r2, [pc, #244]	; (8005130 <TIM_Base_SetConfig+0x118>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00b      	beq.n	8005058 <TIM_Base_SetConfig+0x40>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a3c      	ldr	r2, [pc, #240]	; (8005134 <TIM_Base_SetConfig+0x11c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d007      	beq.n	8005058 <TIM_Base_SetConfig+0x40>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a3b      	ldr	r2, [pc, #236]	; (8005138 <TIM_Base_SetConfig+0x120>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d003      	beq.n	8005058 <TIM_Base_SetConfig+0x40>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a3a      	ldr	r2, [pc, #232]	; (800513c <TIM_Base_SetConfig+0x124>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d108      	bne.n	800506a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a2f      	ldr	r2, [pc, #188]	; (800512c <TIM_Base_SetConfig+0x114>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d02b      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005078:	d027      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a2c      	ldr	r2, [pc, #176]	; (8005130 <TIM_Base_SetConfig+0x118>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d023      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a2b      	ldr	r2, [pc, #172]	; (8005134 <TIM_Base_SetConfig+0x11c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d01f      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a2a      	ldr	r2, [pc, #168]	; (8005138 <TIM_Base_SetConfig+0x120>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d01b      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a29      	ldr	r2, [pc, #164]	; (800513c <TIM_Base_SetConfig+0x124>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d017      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a28      	ldr	r2, [pc, #160]	; (8005140 <TIM_Base_SetConfig+0x128>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d013      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a27      	ldr	r2, [pc, #156]	; (8005144 <TIM_Base_SetConfig+0x12c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00f      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a26      	ldr	r2, [pc, #152]	; (8005148 <TIM_Base_SetConfig+0x130>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00b      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a25      	ldr	r2, [pc, #148]	; (800514c <TIM_Base_SetConfig+0x134>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d007      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a24      	ldr	r2, [pc, #144]	; (8005150 <TIM_Base_SetConfig+0x138>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d003      	beq.n	80050ca <TIM_Base_SetConfig+0xb2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a23      	ldr	r2, [pc, #140]	; (8005154 <TIM_Base_SetConfig+0x13c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d108      	bne.n	80050dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4313      	orrs	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a0a      	ldr	r2, [pc, #40]	; (800512c <TIM_Base_SetConfig+0x114>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d003      	beq.n	8005110 <TIM_Base_SetConfig+0xf8>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a0c      	ldr	r2, [pc, #48]	; (800513c <TIM_Base_SetConfig+0x124>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d103      	bne.n	8005118 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	615a      	str	r2, [r3, #20]
}
 800511e:	bf00      	nop
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40010000 	.word	0x40010000
 8005130:	40000400 	.word	0x40000400
 8005134:	40000800 	.word	0x40000800
 8005138:	40000c00 	.word	0x40000c00
 800513c:	40010400 	.word	0x40010400
 8005140:	40014000 	.word	0x40014000
 8005144:	40014400 	.word	0x40014400
 8005148:	40014800 	.word	0x40014800
 800514c:	40001800 	.word	0x40001800
 8005150:	40001c00 	.word	0x40001c00
 8005154:	40002000 	.word	0x40002000

08005158 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f023 0201 	bic.w	r2, r3, #1
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4a28      	ldr	r2, [pc, #160]	; (8005224 <TIM_TI1_SetConfig+0xcc>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d01b      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518c:	d017      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4a25      	ldr	r2, [pc, #148]	; (8005228 <TIM_TI1_SetConfig+0xd0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4a24      	ldr	r2, [pc, #144]	; (800522c <TIM_TI1_SetConfig+0xd4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00f      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a23      	ldr	r2, [pc, #140]	; (8005230 <TIM_TI1_SetConfig+0xd8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00b      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4a22      	ldr	r2, [pc, #136]	; (8005234 <TIM_TI1_SetConfig+0xdc>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d007      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4a21      	ldr	r2, [pc, #132]	; (8005238 <TIM_TI1_SetConfig+0xe0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d003      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4a20      	ldr	r2, [pc, #128]	; (800523c <TIM_TI1_SetConfig+0xe4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d101      	bne.n	80051c2 <TIM_TI1_SetConfig+0x6a>
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <TIM_TI1_SetConfig+0x6c>
 80051c2:	2300      	movs	r3, #0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f023 0303 	bic.w	r3, r3, #3
 80051ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	e003      	b.n	80051e2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f043 0301 	orr.w	r3, r3, #1
 80051e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f023 030a 	bic.w	r3, r3, #10
 80051fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f003 030a 	and.w	r3, r3, #10
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	621a      	str	r2, [r3, #32]
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40010000 	.word	0x40010000
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800
 8005230:	40000c00 	.word	0x40000c00
 8005234:	40010400 	.word	0x40010400
 8005238:	40014000 	.word	0x40014000
 800523c:	40001800 	.word	0x40001800

08005240 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f023 0201 	bic.w	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800526a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f023 030a 	bic.w	r3, r3, #10
 800527c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	621a      	str	r2, [r3, #32]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800529e:	b480      	push	{r7}
 80052a0:	b087      	sub	sp, #28
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	f023 0210 	bic.w	r2, r3, #16
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	021b      	lsls	r3, r3, #8
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	031b      	lsls	r3, r3, #12
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	621a      	str	r2, [r3, #32]
}
 800530c:	bf00      	nop
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f023 0210 	bic.w	r2, r3, #16
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005342:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	031b      	lsls	r3, r3, #12
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005354:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	621a      	str	r2, [r3, #32]
}
 800536c:	bf00      	nop
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f023 0303 	bic.w	r3, r3, #3
 80053a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80053c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	621a      	str	r2, [r3, #32]
}
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800542e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	031b      	lsls	r3, r3, #12
 8005434:	b29b      	uxth	r3, r3
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005442:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	031b      	lsls	r3, r3, #12
 8005448:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	621a      	str	r2, [r3, #32]
}
 800545e:	bf00      	nop
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800546a:	b480      	push	{r7}
 800546c:	b085      	sub	sp, #20
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005480:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	f043 0307 	orr.w	r3, r3, #7
 800548c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	609a      	str	r2, [r3, #8]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	021a      	lsls	r2, r3, #8
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	609a      	str	r2, [r3, #8]
}
 80054d4:	bf00      	nop
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f003 031f 	and.w	r3, r3, #31
 80054f2:	2201      	movs	r2, #1
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a1a      	ldr	r2, [r3, #32]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	43db      	mvns	r3, r3
 8005502:	401a      	ands	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a1a      	ldr	r2, [r3, #32]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f003 031f 	and.w	r3, r3, #31
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	fa01 f303 	lsl.w	r3, r1, r3
 8005518:	431a      	orrs	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005540:	2302      	movs	r3, #2
 8005542:	e05a      	b.n	80055fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a21      	ldr	r2, [pc, #132]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d022      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005590:	d01d      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1d      	ldr	r2, [pc, #116]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d018      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1b      	ldr	r2, [pc, #108]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1a      	ldr	r2, [pc, #104]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00e      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a18      	ldr	r2, [pc, #96]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d009      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a17      	ldr	r2, [pc, #92]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d004      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a15      	ldr	r2, [pc, #84]	; (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d10c      	bne.n	80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40010000 	.word	0x40010000
 800560c:	40000400 	.word	0x40000400
 8005610:	40000800 	.word	0x40000800
 8005614:	40000c00 	.word	0x40000c00
 8005618:	40010400 	.word	0x40010400
 800561c:	40014000 	.word	0x40014000
 8005620:	40001800 	.word	0x40001800

08005624 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e03f      	b.n	80056de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d106      	bne.n	8005678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fc fddc 	bl	8002230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2224      	movs	r2, #36	; 0x24
 800567c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800568e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 faf9 	bl	8005c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695a      	ldr	r2, [r3, #20]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b085      	sub	sp, #20
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	60f8      	str	r0, [r7, #12]
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	4613      	mov	r3, r2
 80056f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d130      	bne.n	8005762 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <HAL_UART_Transmit_IT+0x26>
 8005706:	88fb      	ldrh	r3, [r7, #6]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e029      	b.n	8005764 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <HAL_UART_Transmit_IT+0x38>
 800571a:	2302      	movs	r3, #2
 800571c:	e022      	b.n	8005764 <HAL_UART_Transmit_IT+0x7e>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	88fa      	ldrh	r2, [r7, #6]
 8005730:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	88fa      	ldrh	r2, [r7, #6]
 8005736:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2221      	movs	r2, #33	; 0x21
 8005742:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800575c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	e000      	b.n	8005764 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005762:	2302      	movs	r3, #2
  }
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	4613      	mov	r3, r2
 800577c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b20      	cmp	r3, #32
 8005788:	d140      	bne.n	800580c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <HAL_UART_Receive_IT+0x26>
 8005790:	88fb      	ldrh	r3, [r7, #6]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e039      	b.n	800580e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_UART_Receive_IT+0x38>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e032      	b.n	800580e <HAL_UART_Receive_IT+0x9e>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	88fa      	ldrh	r2, [r7, #6]
 80057ba:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	88fa      	ldrh	r2, [r7, #6]
 80057c0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2222      	movs	r2, #34	; 0x22
 80057cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695a      	ldr	r2, [r3, #20]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0220 	orr.w	r2, r2, #32
 8005806:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	e000      	b.n	800580e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800580c:	2302      	movs	r3, #2
  }
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
	...

0800581c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b088      	sub	sp, #32
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800583c:	2300      	movs	r3, #0
 800583e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10d      	bne.n	800586e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	f003 0320 	and.w	r3, r3, #32
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <HAL_UART_IRQHandler+0x52>
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f98c 	bl	8005b84 <UART_Receive_IT>
      return;
 800586c:	e0d1      	b.n	8005a12 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 80b0 	beq.w	80059d6 <HAL_UART_IRQHandler+0x1ba>
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d105      	bne.n	800588c <HAL_UART_IRQHandler+0x70>
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 80a5 	beq.w	80059d6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_UART_IRQHandler+0x90>
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a4:	f043 0201 	orr.w	r2, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f003 0304 	and.w	r3, r3, #4
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <HAL_UART_IRQHandler+0xb0>
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c4:	f043 0202 	orr.w	r2, r3, #2
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <HAL_UART_IRQHandler+0xd0>
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e4:	f043 0204 	orr.w	r2, r3, #4
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00f      	beq.n	8005916 <HAL_UART_IRQHandler+0xfa>
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d104      	bne.n	800590a <HAL_UART_IRQHandler+0xee>
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d005      	beq.n	8005916 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590e:	f043 0208 	orr.w	r2, r3, #8
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591a:	2b00      	cmp	r3, #0
 800591c:	d078      	beq.n	8005a10 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d007      	beq.n	8005938 <HAL_UART_IRQHandler+0x11c>
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f926 	bl	8005b84 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005942:	2b40      	cmp	r3, #64	; 0x40
 8005944:	bf0c      	ite	eq
 8005946:	2301      	moveq	r3, #1
 8005948:	2300      	movne	r3, #0
 800594a:	b2db      	uxtb	r3, r3
 800594c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b00      	cmp	r3, #0
 8005958:	d102      	bne.n	8005960 <HAL_UART_IRQHandler+0x144>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d031      	beq.n	80059c4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f86f 	bl	8005a44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005970:	2b40      	cmp	r3, #64	; 0x40
 8005972:	d123      	bne.n	80059bc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695a      	ldr	r2, [r3, #20]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005982:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005988:	2b00      	cmp	r3, #0
 800598a:	d013      	beq.n	80059b4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005990:	4a21      	ldr	r2, [pc, #132]	; (8005a18 <HAL_UART_IRQHandler+0x1fc>)
 8005992:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005998:	4618      	mov	r0, r3
 800599a:	f7fd fbdf 	bl	800315c <HAL_DMA_Abort_IT>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d016      	beq.n	80059d2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059ae:	4610      	mov	r0, r2
 80059b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b2:	e00e      	b.n	80059d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f83b 	bl	8005a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ba:	e00a      	b.n	80059d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f837 	bl	8005a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c2:	e006      	b.n	80059d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f833 	bl	8005a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80059d0:	e01e      	b.n	8005a10 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d2:	bf00      	nop
    return;
 80059d4:	e01c      	b.n	8005a10 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d008      	beq.n	80059f2 <HAL_UART_IRQHandler+0x1d6>
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f85c 	bl	8005aa8 <UART_Transmit_IT>
    return;
 80059f0:	e00f      	b.n	8005a12 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <HAL_UART_IRQHandler+0x1f6>
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f8a4 	bl	8005b54 <UART_EndTransmit_IT>
    return;
 8005a0c:	bf00      	nop
 8005a0e:	e000      	b.n	8005a12 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005a10:	bf00      	nop
  }
}
 8005a12:	3720      	adds	r7, #32
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	08005a81 	.word	0x08005a81

08005a1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a5a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695a      	ldr	r2, [r3, #20]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0201 	bic.w	r2, r2, #1
 8005a6a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f7ff ffc8 	bl	8005a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aa0:	bf00      	nop
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b21      	cmp	r3, #33	; 0x21
 8005aba:	d144      	bne.n	8005b46 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac4:	d11a      	bne.n	8005afc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ada:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d105      	bne.n	8005af0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	1c9a      	adds	r2, r3, #2
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	621a      	str	r2, [r3, #32]
 8005aee:	e00e      	b.n	8005b0e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	621a      	str	r2, [r3, #32]
 8005afa:	e008      	b.n	8005b0e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	1c59      	adds	r1, r3, #1
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6211      	str	r1, [r2, #32]
 8005b06:	781a      	ldrb	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10f      	bne.n	8005b42 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	e000      	b.n	8005b48 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005b46:	2302      	movs	r3, #2
  }
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b6a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff ff51 	bl	8005a1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b22      	cmp	r3, #34	; 0x22
 8005b96:	d171      	bne.n	8005c7c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba0:	d123      	bne.n	8005bea <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10e      	bne.n	8005bce <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc6:	1c9a      	adds	r2, r3, #2
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	629a      	str	r2, [r3, #40]	; 0x28
 8005bcc:	e029      	b.n	8005c22 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	629a      	str	r2, [r3, #40]	; 0x28
 8005be8:	e01b      	b.n	8005c22 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6858      	ldr	r0, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfc:	1c59      	adds	r1, r3, #1
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	6291      	str	r1, [r2, #40]	; 0x28
 8005c02:	b2c2      	uxtb	r2, r0
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	e00c      	b.n	8005c22 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c14:	1c58      	adds	r0, r3, #1
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	6288      	str	r0, [r1, #40]	; 0x28
 8005c1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d120      	bne.n	8005c78 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0220 	bic.w	r2, r2, #32
 8005c44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695a      	ldr	r2, [r3, #20]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0201 	bic.w	r2, r2, #1
 8005c64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7fb ff9c 	bl	8001bac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	e002      	b.n	8005c7e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	e000      	b.n	8005c7e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005c7c:	2302      	movs	r3, #2
  }
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005cca:	f023 030c 	bic.w	r3, r3, #12
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6812      	ldr	r2, [r2, #0]
 8005cd2:	68f9      	ldr	r1, [r7, #12]
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cf6:	f040 818b 	bne.w	8006010 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4ac1      	ldr	r2, [pc, #772]	; (8006004 <UART_SetConfig+0x37c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d005      	beq.n	8005d10 <UART_SetConfig+0x88>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4abf      	ldr	r2, [pc, #764]	; (8006008 <UART_SetConfig+0x380>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	f040 80bd 	bne.w	8005e8a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d10:	f7fd ffca 	bl	8003ca8 <HAL_RCC_GetPCLK2Freq>
 8005d14:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	461d      	mov	r5, r3
 8005d1a:	f04f 0600 	mov.w	r6, #0
 8005d1e:	46a8      	mov	r8, r5
 8005d20:	46b1      	mov	r9, r6
 8005d22:	eb18 0308 	adds.w	r3, r8, r8
 8005d26:	eb49 0409 	adc.w	r4, r9, r9
 8005d2a:	4698      	mov	r8, r3
 8005d2c:	46a1      	mov	r9, r4
 8005d2e:	eb18 0805 	adds.w	r8, r8, r5
 8005d32:	eb49 0906 	adc.w	r9, r9, r6
 8005d36:	f04f 0100 	mov.w	r1, #0
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d42:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d46:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d4a:	4688      	mov	r8, r1
 8005d4c:	4691      	mov	r9, r2
 8005d4e:	eb18 0005 	adds.w	r0, r8, r5
 8005d52:	eb49 0106 	adc.w	r1, r9, r6
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	461d      	mov	r5, r3
 8005d5c:	f04f 0600 	mov.w	r6, #0
 8005d60:	196b      	adds	r3, r5, r5
 8005d62:	eb46 0406 	adc.w	r4, r6, r6
 8005d66:	461a      	mov	r2, r3
 8005d68:	4623      	mov	r3, r4
 8005d6a:	f7fa fe8b 	bl	8000a84 <__aeabi_uldivmod>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	460c      	mov	r4, r1
 8005d72:	461a      	mov	r2, r3
 8005d74:	4ba5      	ldr	r3, [pc, #660]	; (800600c <UART_SetConfig+0x384>)
 8005d76:	fba3 2302 	umull	r2, r3, r3, r2
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	461d      	mov	r5, r3
 8005d84:	f04f 0600 	mov.w	r6, #0
 8005d88:	46a9      	mov	r9, r5
 8005d8a:	46b2      	mov	sl, r6
 8005d8c:	eb19 0309 	adds.w	r3, r9, r9
 8005d90:	eb4a 040a 	adc.w	r4, sl, sl
 8005d94:	4699      	mov	r9, r3
 8005d96:	46a2      	mov	sl, r4
 8005d98:	eb19 0905 	adds.w	r9, r9, r5
 8005d9c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005da0:	f04f 0100 	mov.w	r1, #0
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005db0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005db4:	4689      	mov	r9, r1
 8005db6:	4692      	mov	sl, r2
 8005db8:	eb19 0005 	adds.w	r0, r9, r5
 8005dbc:	eb4a 0106 	adc.w	r1, sl, r6
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	461d      	mov	r5, r3
 8005dc6:	f04f 0600 	mov.w	r6, #0
 8005dca:	196b      	adds	r3, r5, r5
 8005dcc:	eb46 0406 	adc.w	r4, r6, r6
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4623      	mov	r3, r4
 8005dd4:	f7fa fe56 	bl	8000a84 <__aeabi_uldivmod>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	460c      	mov	r4, r1
 8005ddc:	461a      	mov	r2, r3
 8005dde:	4b8b      	ldr	r3, [pc, #556]	; (800600c <UART_SetConfig+0x384>)
 8005de0:	fba3 1302 	umull	r1, r3, r3, r2
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	2164      	movs	r1, #100	; 0x64
 8005de8:	fb01 f303 	mul.w	r3, r1, r3
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	3332      	adds	r3, #50	; 0x32
 8005df2:	4a86      	ldr	r2, [pc, #536]	; (800600c <UART_SetConfig+0x384>)
 8005df4:	fba2 2303 	umull	r2, r3, r2, r3
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e00:	4498      	add	r8, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	461d      	mov	r5, r3
 8005e06:	f04f 0600 	mov.w	r6, #0
 8005e0a:	46a9      	mov	r9, r5
 8005e0c:	46b2      	mov	sl, r6
 8005e0e:	eb19 0309 	adds.w	r3, r9, r9
 8005e12:	eb4a 040a 	adc.w	r4, sl, sl
 8005e16:	4699      	mov	r9, r3
 8005e18:	46a2      	mov	sl, r4
 8005e1a:	eb19 0905 	adds.w	r9, r9, r5
 8005e1e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e22:	f04f 0100 	mov.w	r1, #0
 8005e26:	f04f 0200 	mov.w	r2, #0
 8005e2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e36:	4689      	mov	r9, r1
 8005e38:	4692      	mov	sl, r2
 8005e3a:	eb19 0005 	adds.w	r0, r9, r5
 8005e3e:	eb4a 0106 	adc.w	r1, sl, r6
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	461d      	mov	r5, r3
 8005e48:	f04f 0600 	mov.w	r6, #0
 8005e4c:	196b      	adds	r3, r5, r5
 8005e4e:	eb46 0406 	adc.w	r4, r6, r6
 8005e52:	461a      	mov	r2, r3
 8005e54:	4623      	mov	r3, r4
 8005e56:	f7fa fe15 	bl	8000a84 <__aeabi_uldivmod>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	461a      	mov	r2, r3
 8005e60:	4b6a      	ldr	r3, [pc, #424]	; (800600c <UART_SetConfig+0x384>)
 8005e62:	fba3 1302 	umull	r1, r3, r3, r2
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	2164      	movs	r1, #100	; 0x64
 8005e6a:	fb01 f303 	mul.w	r3, r1, r3
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	3332      	adds	r3, #50	; 0x32
 8005e74:	4a65      	ldr	r2, [pc, #404]	; (800600c <UART_SetConfig+0x384>)
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	f003 0207 	and.w	r2, r3, #7
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4442      	add	r2, r8
 8005e86:	609a      	str	r2, [r3, #8]
 8005e88:	e26f      	b.n	800636a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e8a:	f7fd fef9 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8005e8e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	461d      	mov	r5, r3
 8005e94:	f04f 0600 	mov.w	r6, #0
 8005e98:	46a8      	mov	r8, r5
 8005e9a:	46b1      	mov	r9, r6
 8005e9c:	eb18 0308 	adds.w	r3, r8, r8
 8005ea0:	eb49 0409 	adc.w	r4, r9, r9
 8005ea4:	4698      	mov	r8, r3
 8005ea6:	46a1      	mov	r9, r4
 8005ea8:	eb18 0805 	adds.w	r8, r8, r5
 8005eac:	eb49 0906 	adc.w	r9, r9, r6
 8005eb0:	f04f 0100 	mov.w	r1, #0
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ebc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ec0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ec4:	4688      	mov	r8, r1
 8005ec6:	4691      	mov	r9, r2
 8005ec8:	eb18 0005 	adds.w	r0, r8, r5
 8005ecc:	eb49 0106 	adc.w	r1, r9, r6
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	461d      	mov	r5, r3
 8005ed6:	f04f 0600 	mov.w	r6, #0
 8005eda:	196b      	adds	r3, r5, r5
 8005edc:	eb46 0406 	adc.w	r4, r6, r6
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4623      	mov	r3, r4
 8005ee4:	f7fa fdce 	bl	8000a84 <__aeabi_uldivmod>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	460c      	mov	r4, r1
 8005eec:	461a      	mov	r2, r3
 8005eee:	4b47      	ldr	r3, [pc, #284]	; (800600c <UART_SetConfig+0x384>)
 8005ef0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef4:	095b      	lsrs	r3, r3, #5
 8005ef6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	461d      	mov	r5, r3
 8005efe:	f04f 0600 	mov.w	r6, #0
 8005f02:	46a9      	mov	r9, r5
 8005f04:	46b2      	mov	sl, r6
 8005f06:	eb19 0309 	adds.w	r3, r9, r9
 8005f0a:	eb4a 040a 	adc.w	r4, sl, sl
 8005f0e:	4699      	mov	r9, r3
 8005f10:	46a2      	mov	sl, r4
 8005f12:	eb19 0905 	adds.w	r9, r9, r5
 8005f16:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f1a:	f04f 0100 	mov.w	r1, #0
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f2e:	4689      	mov	r9, r1
 8005f30:	4692      	mov	sl, r2
 8005f32:	eb19 0005 	adds.w	r0, r9, r5
 8005f36:	eb4a 0106 	adc.w	r1, sl, r6
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	461d      	mov	r5, r3
 8005f40:	f04f 0600 	mov.w	r6, #0
 8005f44:	196b      	adds	r3, r5, r5
 8005f46:	eb46 0406 	adc.w	r4, r6, r6
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	4623      	mov	r3, r4
 8005f4e:	f7fa fd99 	bl	8000a84 <__aeabi_uldivmod>
 8005f52:	4603      	mov	r3, r0
 8005f54:	460c      	mov	r4, r1
 8005f56:	461a      	mov	r2, r3
 8005f58:	4b2c      	ldr	r3, [pc, #176]	; (800600c <UART_SetConfig+0x384>)
 8005f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	2164      	movs	r1, #100	; 0x64
 8005f62:	fb01 f303 	mul.w	r3, r1, r3
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	3332      	adds	r3, #50	; 0x32
 8005f6c:	4a27      	ldr	r2, [pc, #156]	; (800600c <UART_SetConfig+0x384>)
 8005f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f7a:	4498      	add	r8, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	461d      	mov	r5, r3
 8005f80:	f04f 0600 	mov.w	r6, #0
 8005f84:	46a9      	mov	r9, r5
 8005f86:	46b2      	mov	sl, r6
 8005f88:	eb19 0309 	adds.w	r3, r9, r9
 8005f8c:	eb4a 040a 	adc.w	r4, sl, sl
 8005f90:	4699      	mov	r9, r3
 8005f92:	46a2      	mov	sl, r4
 8005f94:	eb19 0905 	adds.w	r9, r9, r5
 8005f98:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f9c:	f04f 0100 	mov.w	r1, #0
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fa8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fb0:	4689      	mov	r9, r1
 8005fb2:	4692      	mov	sl, r2
 8005fb4:	eb19 0005 	adds.w	r0, r9, r5
 8005fb8:	eb4a 0106 	adc.w	r1, sl, r6
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	461d      	mov	r5, r3
 8005fc2:	f04f 0600 	mov.w	r6, #0
 8005fc6:	196b      	adds	r3, r5, r5
 8005fc8:	eb46 0406 	adc.w	r4, r6, r6
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4623      	mov	r3, r4
 8005fd0:	f7fa fd58 	bl	8000a84 <__aeabi_uldivmod>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	461a      	mov	r2, r3
 8005fda:	4b0c      	ldr	r3, [pc, #48]	; (800600c <UART_SetConfig+0x384>)
 8005fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe0:	095b      	lsrs	r3, r3, #5
 8005fe2:	2164      	movs	r1, #100	; 0x64
 8005fe4:	fb01 f303 	mul.w	r3, r1, r3
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	3332      	adds	r3, #50	; 0x32
 8005fee:	4a07      	ldr	r2, [pc, #28]	; (800600c <UART_SetConfig+0x384>)
 8005ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	f003 0207 	and.w	r2, r3, #7
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4442      	add	r2, r8
 8006000:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006002:	e1b2      	b.n	800636a <UART_SetConfig+0x6e2>
 8006004:	40011000 	.word	0x40011000
 8006008:	40011400 	.word	0x40011400
 800600c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4ad7      	ldr	r2, [pc, #860]	; (8006374 <UART_SetConfig+0x6ec>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d005      	beq.n	8006026 <UART_SetConfig+0x39e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4ad6      	ldr	r2, [pc, #856]	; (8006378 <UART_SetConfig+0x6f0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	f040 80d1 	bne.w	80061c8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006026:	f7fd fe3f 	bl	8003ca8 <HAL_RCC_GetPCLK2Freq>
 800602a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	469a      	mov	sl, r3
 8006030:	f04f 0b00 	mov.w	fp, #0
 8006034:	46d0      	mov	r8, sl
 8006036:	46d9      	mov	r9, fp
 8006038:	eb18 0308 	adds.w	r3, r8, r8
 800603c:	eb49 0409 	adc.w	r4, r9, r9
 8006040:	4698      	mov	r8, r3
 8006042:	46a1      	mov	r9, r4
 8006044:	eb18 080a 	adds.w	r8, r8, sl
 8006048:	eb49 090b 	adc.w	r9, r9, fp
 800604c:	f04f 0100 	mov.w	r1, #0
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006058:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800605c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006060:	4688      	mov	r8, r1
 8006062:	4691      	mov	r9, r2
 8006064:	eb1a 0508 	adds.w	r5, sl, r8
 8006068:	eb4b 0609 	adc.w	r6, fp, r9
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	4619      	mov	r1, r3
 8006072:	f04f 0200 	mov.w	r2, #0
 8006076:	f04f 0300 	mov.w	r3, #0
 800607a:	f04f 0400 	mov.w	r4, #0
 800607e:	0094      	lsls	r4, r2, #2
 8006080:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006084:	008b      	lsls	r3, r1, #2
 8006086:	461a      	mov	r2, r3
 8006088:	4623      	mov	r3, r4
 800608a:	4628      	mov	r0, r5
 800608c:	4631      	mov	r1, r6
 800608e:	f7fa fcf9 	bl	8000a84 <__aeabi_uldivmod>
 8006092:	4603      	mov	r3, r0
 8006094:	460c      	mov	r4, r1
 8006096:	461a      	mov	r2, r3
 8006098:	4bb8      	ldr	r3, [pc, #736]	; (800637c <UART_SetConfig+0x6f4>)
 800609a:	fba3 2302 	umull	r2, r3, r3, r2
 800609e:	095b      	lsrs	r3, r3, #5
 80060a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	469b      	mov	fp, r3
 80060a8:	f04f 0c00 	mov.w	ip, #0
 80060ac:	46d9      	mov	r9, fp
 80060ae:	46e2      	mov	sl, ip
 80060b0:	eb19 0309 	adds.w	r3, r9, r9
 80060b4:	eb4a 040a 	adc.w	r4, sl, sl
 80060b8:	4699      	mov	r9, r3
 80060ba:	46a2      	mov	sl, r4
 80060bc:	eb19 090b 	adds.w	r9, r9, fp
 80060c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060c4:	f04f 0100 	mov.w	r1, #0
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060d8:	4689      	mov	r9, r1
 80060da:	4692      	mov	sl, r2
 80060dc:	eb1b 0509 	adds.w	r5, fp, r9
 80060e0:	eb4c 060a 	adc.w	r6, ip, sl
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	4619      	mov	r1, r3
 80060ea:	f04f 0200 	mov.w	r2, #0
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	f04f 0400 	mov.w	r4, #0
 80060f6:	0094      	lsls	r4, r2, #2
 80060f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060fc:	008b      	lsls	r3, r1, #2
 80060fe:	461a      	mov	r2, r3
 8006100:	4623      	mov	r3, r4
 8006102:	4628      	mov	r0, r5
 8006104:	4631      	mov	r1, r6
 8006106:	f7fa fcbd 	bl	8000a84 <__aeabi_uldivmod>
 800610a:	4603      	mov	r3, r0
 800610c:	460c      	mov	r4, r1
 800610e:	461a      	mov	r2, r3
 8006110:	4b9a      	ldr	r3, [pc, #616]	; (800637c <UART_SetConfig+0x6f4>)
 8006112:	fba3 1302 	umull	r1, r3, r3, r2
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	2164      	movs	r1, #100	; 0x64
 800611a:	fb01 f303 	mul.w	r3, r1, r3
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	3332      	adds	r3, #50	; 0x32
 8006124:	4a95      	ldr	r2, [pc, #596]	; (800637c <UART_SetConfig+0x6f4>)
 8006126:	fba2 2303 	umull	r2, r3, r2, r3
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006130:	4498      	add	r8, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	469b      	mov	fp, r3
 8006136:	f04f 0c00 	mov.w	ip, #0
 800613a:	46d9      	mov	r9, fp
 800613c:	46e2      	mov	sl, ip
 800613e:	eb19 0309 	adds.w	r3, r9, r9
 8006142:	eb4a 040a 	adc.w	r4, sl, sl
 8006146:	4699      	mov	r9, r3
 8006148:	46a2      	mov	sl, r4
 800614a:	eb19 090b 	adds.w	r9, r9, fp
 800614e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006152:	f04f 0100 	mov.w	r1, #0
 8006156:	f04f 0200 	mov.w	r2, #0
 800615a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800615e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006162:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006166:	4689      	mov	r9, r1
 8006168:	4692      	mov	sl, r2
 800616a:	eb1b 0509 	adds.w	r5, fp, r9
 800616e:	eb4c 060a 	adc.w	r6, ip, sl
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	4619      	mov	r1, r3
 8006178:	f04f 0200 	mov.w	r2, #0
 800617c:	f04f 0300 	mov.w	r3, #0
 8006180:	f04f 0400 	mov.w	r4, #0
 8006184:	0094      	lsls	r4, r2, #2
 8006186:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800618a:	008b      	lsls	r3, r1, #2
 800618c:	461a      	mov	r2, r3
 800618e:	4623      	mov	r3, r4
 8006190:	4628      	mov	r0, r5
 8006192:	4631      	mov	r1, r6
 8006194:	f7fa fc76 	bl	8000a84 <__aeabi_uldivmod>
 8006198:	4603      	mov	r3, r0
 800619a:	460c      	mov	r4, r1
 800619c:	461a      	mov	r2, r3
 800619e:	4b77      	ldr	r3, [pc, #476]	; (800637c <UART_SetConfig+0x6f4>)
 80061a0:	fba3 1302 	umull	r1, r3, r3, r2
 80061a4:	095b      	lsrs	r3, r3, #5
 80061a6:	2164      	movs	r1, #100	; 0x64
 80061a8:	fb01 f303 	mul.w	r3, r1, r3
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	3332      	adds	r3, #50	; 0x32
 80061b2:	4a72      	ldr	r2, [pc, #456]	; (800637c <UART_SetConfig+0x6f4>)
 80061b4:	fba2 2303 	umull	r2, r3, r2, r3
 80061b8:	095b      	lsrs	r3, r3, #5
 80061ba:	f003 020f 	and.w	r2, r3, #15
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4442      	add	r2, r8
 80061c4:	609a      	str	r2, [r3, #8]
 80061c6:	e0d0      	b.n	800636a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80061c8:	f7fd fd5a 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 80061cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	469a      	mov	sl, r3
 80061d2:	f04f 0b00 	mov.w	fp, #0
 80061d6:	46d0      	mov	r8, sl
 80061d8:	46d9      	mov	r9, fp
 80061da:	eb18 0308 	adds.w	r3, r8, r8
 80061de:	eb49 0409 	adc.w	r4, r9, r9
 80061e2:	4698      	mov	r8, r3
 80061e4:	46a1      	mov	r9, r4
 80061e6:	eb18 080a 	adds.w	r8, r8, sl
 80061ea:	eb49 090b 	adc.w	r9, r9, fp
 80061ee:	f04f 0100 	mov.w	r1, #0
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80061fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80061fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006202:	4688      	mov	r8, r1
 8006204:	4691      	mov	r9, r2
 8006206:	eb1a 0508 	adds.w	r5, sl, r8
 800620a:	eb4b 0609 	adc.w	r6, fp, r9
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	4619      	mov	r1, r3
 8006214:	f04f 0200 	mov.w	r2, #0
 8006218:	f04f 0300 	mov.w	r3, #0
 800621c:	f04f 0400 	mov.w	r4, #0
 8006220:	0094      	lsls	r4, r2, #2
 8006222:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006226:	008b      	lsls	r3, r1, #2
 8006228:	461a      	mov	r2, r3
 800622a:	4623      	mov	r3, r4
 800622c:	4628      	mov	r0, r5
 800622e:	4631      	mov	r1, r6
 8006230:	f7fa fc28 	bl	8000a84 <__aeabi_uldivmod>
 8006234:	4603      	mov	r3, r0
 8006236:	460c      	mov	r4, r1
 8006238:	461a      	mov	r2, r3
 800623a:	4b50      	ldr	r3, [pc, #320]	; (800637c <UART_SetConfig+0x6f4>)
 800623c:	fba3 2302 	umull	r2, r3, r3, r2
 8006240:	095b      	lsrs	r3, r3, #5
 8006242:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	469b      	mov	fp, r3
 800624a:	f04f 0c00 	mov.w	ip, #0
 800624e:	46d9      	mov	r9, fp
 8006250:	46e2      	mov	sl, ip
 8006252:	eb19 0309 	adds.w	r3, r9, r9
 8006256:	eb4a 040a 	adc.w	r4, sl, sl
 800625a:	4699      	mov	r9, r3
 800625c:	46a2      	mov	sl, r4
 800625e:	eb19 090b 	adds.w	r9, r9, fp
 8006262:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006266:	f04f 0100 	mov.w	r1, #0
 800626a:	f04f 0200 	mov.w	r2, #0
 800626e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006272:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006276:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800627a:	4689      	mov	r9, r1
 800627c:	4692      	mov	sl, r2
 800627e:	eb1b 0509 	adds.w	r5, fp, r9
 8006282:	eb4c 060a 	adc.w	r6, ip, sl
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	4619      	mov	r1, r3
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	f04f 0400 	mov.w	r4, #0
 8006298:	0094      	lsls	r4, r2, #2
 800629a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800629e:	008b      	lsls	r3, r1, #2
 80062a0:	461a      	mov	r2, r3
 80062a2:	4623      	mov	r3, r4
 80062a4:	4628      	mov	r0, r5
 80062a6:	4631      	mov	r1, r6
 80062a8:	f7fa fbec 	bl	8000a84 <__aeabi_uldivmod>
 80062ac:	4603      	mov	r3, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	461a      	mov	r2, r3
 80062b2:	4b32      	ldr	r3, [pc, #200]	; (800637c <UART_SetConfig+0x6f4>)
 80062b4:	fba3 1302 	umull	r1, r3, r3, r2
 80062b8:	095b      	lsrs	r3, r3, #5
 80062ba:	2164      	movs	r1, #100	; 0x64
 80062bc:	fb01 f303 	mul.w	r3, r1, r3
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	3332      	adds	r3, #50	; 0x32
 80062c6:	4a2d      	ldr	r2, [pc, #180]	; (800637c <UART_SetConfig+0x6f4>)
 80062c8:	fba2 2303 	umull	r2, r3, r2, r3
 80062cc:	095b      	lsrs	r3, r3, #5
 80062ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062d2:	4498      	add	r8, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	469b      	mov	fp, r3
 80062d8:	f04f 0c00 	mov.w	ip, #0
 80062dc:	46d9      	mov	r9, fp
 80062de:	46e2      	mov	sl, ip
 80062e0:	eb19 0309 	adds.w	r3, r9, r9
 80062e4:	eb4a 040a 	adc.w	r4, sl, sl
 80062e8:	4699      	mov	r9, r3
 80062ea:	46a2      	mov	sl, r4
 80062ec:	eb19 090b 	adds.w	r9, r9, fp
 80062f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062f4:	f04f 0100 	mov.w	r1, #0
 80062f8:	f04f 0200 	mov.w	r2, #0
 80062fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006300:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006304:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006308:	4689      	mov	r9, r1
 800630a:	4692      	mov	sl, r2
 800630c:	eb1b 0509 	adds.w	r5, fp, r9
 8006310:	eb4c 060a 	adc.w	r6, ip, sl
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	4619      	mov	r1, r3
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	f04f 0400 	mov.w	r4, #0
 8006326:	0094      	lsls	r4, r2, #2
 8006328:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800632c:	008b      	lsls	r3, r1, #2
 800632e:	461a      	mov	r2, r3
 8006330:	4623      	mov	r3, r4
 8006332:	4628      	mov	r0, r5
 8006334:	4631      	mov	r1, r6
 8006336:	f7fa fba5 	bl	8000a84 <__aeabi_uldivmod>
 800633a:	4603      	mov	r3, r0
 800633c:	460c      	mov	r4, r1
 800633e:	461a      	mov	r2, r3
 8006340:	4b0e      	ldr	r3, [pc, #56]	; (800637c <UART_SetConfig+0x6f4>)
 8006342:	fba3 1302 	umull	r1, r3, r3, r2
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	2164      	movs	r1, #100	; 0x64
 800634a:	fb01 f303 	mul.w	r3, r1, r3
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	3332      	adds	r3, #50	; 0x32
 8006354:	4a09      	ldr	r2, [pc, #36]	; (800637c <UART_SetConfig+0x6f4>)
 8006356:	fba2 2303 	umull	r2, r3, r2, r3
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	f003 020f 	and.w	r2, r3, #15
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4442      	add	r2, r8
 8006366:	609a      	str	r2, [r3, #8]
}
 8006368:	e7ff      	b.n	800636a <UART_SetConfig+0x6e2>
 800636a:	bf00      	nop
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006374:	40011000 	.word	0x40011000
 8006378:	40011400 	.word	0x40011400
 800637c:	51eb851f 	.word	0x51eb851f

08006380 <__libc_init_array>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	4e0d      	ldr	r6, [pc, #52]	; (80063b8 <__libc_init_array+0x38>)
 8006384:	4c0d      	ldr	r4, [pc, #52]	; (80063bc <__libc_init_array+0x3c>)
 8006386:	1ba4      	subs	r4, r4, r6
 8006388:	10a4      	asrs	r4, r4, #2
 800638a:	2500      	movs	r5, #0
 800638c:	42a5      	cmp	r5, r4
 800638e:	d109      	bne.n	80063a4 <__libc_init_array+0x24>
 8006390:	4e0b      	ldr	r6, [pc, #44]	; (80063c0 <__libc_init_array+0x40>)
 8006392:	4c0c      	ldr	r4, [pc, #48]	; (80063c4 <__libc_init_array+0x44>)
 8006394:	f000 f820 	bl	80063d8 <_init>
 8006398:	1ba4      	subs	r4, r4, r6
 800639a:	10a4      	asrs	r4, r4, #2
 800639c:	2500      	movs	r5, #0
 800639e:	42a5      	cmp	r5, r4
 80063a0:	d105      	bne.n	80063ae <__libc_init_array+0x2e>
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063a8:	4798      	blx	r3
 80063aa:	3501      	adds	r5, #1
 80063ac:	e7ee      	b.n	800638c <__libc_init_array+0xc>
 80063ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063b2:	4798      	blx	r3
 80063b4:	3501      	adds	r5, #1
 80063b6:	e7f2      	b.n	800639e <__libc_init_array+0x1e>
 80063b8:	08006418 	.word	0x08006418
 80063bc:	08006418 	.word	0x08006418
 80063c0:	08006418 	.word	0x08006418
 80063c4:	0800641c 	.word	0x0800641c

080063c8 <memset>:
 80063c8:	4402      	add	r2, r0
 80063ca:	4603      	mov	r3, r0
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d100      	bne.n	80063d2 <memset+0xa>
 80063d0:	4770      	bx	lr
 80063d2:	f803 1b01 	strb.w	r1, [r3], #1
 80063d6:	e7f9      	b.n	80063cc <memset+0x4>

080063d8 <_init>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	bf00      	nop
 80063dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063de:	bc08      	pop	{r3}
 80063e0:	469e      	mov	lr, r3
 80063e2:	4770      	bx	lr

080063e4 <_fini>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	bf00      	nop
 80063e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ea:	bc08      	pop	{r3}
 80063ec:	469e      	mov	lr, r3
 80063ee:	4770      	bx	lr
